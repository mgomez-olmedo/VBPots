Index.PACKAGES = {"experiments.ijisExperiments" : [{"name" : "experiments.ijisExperiments.BnlearnMemorySizes", "shortDescription" : "generates the complete table for the results of memory spacerequired for bnlearn networks", "object" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html", "members_object" : [{"label" : "reps", "tail" : ": String", "member" : "experiments.ijisExperiments.BnlearnMemorySizes.reps", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#reps:String", "kind" : "val"}, {"label" : "nets", "tail" : ": List[String]", "member" : "experiments.ijisExperiments.BnlearnMemorySizes.nets", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#nets:List[String]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/ijisExperiments\/BnlearnMemorySizes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.ijisExperiments.UAIMemorySizes", "shortDescription" : "generates the complete table for the results of memory spacerequired for bnlearn networks", "object" : "experiments\/ijisExperiments\/UAIMemorySizes$.html", "members_object" : [{"label" : "reps", "tail" : ": String", "member" : "experiments.ijisExperiments.UAIMemorySizes.reps", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#reps:String", "kind" : "val"}, {"label" : "nets", "tail" : ": List[String]", "member" : "experiments.ijisExperiments.UAIMemorySizes.nets", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#nets:List[String]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/ijisExperiments\/UAIMemorySizes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "experiments" : [{"name" : "experiments.BnetAnalysis", "shortDescription" : "Class for performing the analysis on networks", "object" : "experiments\/BnetAnalysis$.html", "members_class" : [{"label" : "showPotential", "tail" : "(variableName: String, storeType: potential.ValueStoreTypes.Value): Unit", "member" : "experiments.BnetAnalysis.showPotential", "link" : "experiments\/BnetAnalysis.html#showPotential(variableName:String,storeType:potential.ValueStoreTypes.Value):Unit", "kind" : "def"}, {"label" : "compareRepresentations", "tail" : "(mode1: ValueStoreType, mode2: ValueStoreType, mainVar: Variable): (Double, Double, Double, Double)", "member" : "experiments.BnetAnalysis.compareRepresentations", "link" : "experiments\/BnetAnalysis.html#compareRepresentations(mode1:potential.ValueStoreTypes.ValueStoreType,mode2:potential.ValueStoreTypes.ValueStoreType,mainVar:base.Variable):(Double,Double,Double,Double)", "kind" : "def"}, {"label" : "storeGlobalInfo", "tail" : "(): Map[potential.ValueStoreTypes.Value, Long]", "member" : "experiments.BnetAnalysis.storeGlobalInfo", "link" : "experiments\/BnetAnalysis.html#storeGlobalInfo():scala.collection.immutable.Map[potential.ValueStoreTypes.Value,Long]", "kind" : "def"}, {"label" : "composeLatexTableComparison", "tail" : "(resFile: PrintWriter): Unit", "member" : "experiments.BnetAnalysis.composeLatexTableComparison", "link" : "experiments\/BnetAnalysis.html#composeLatexTableComparison(resFile:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "composeLatexTableCPTTrees", "tail" : "(resFile: PrintWriter): Unit", "member" : "experiments.BnetAnalysis.composeLatexTableCPTTrees", "link" : "experiments\/BnetAnalysis.html#composeLatexTableCPTTrees(resFile:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "showRepresentationSummaryInformation", "tail" : "(resFile: PrintWriter): Unit", "member" : "experiments.BnetAnalysis.showRepresentationSummaryInformation", "link" : "experiments\/BnetAnalysis.html#showRepresentationSummaryInformation(resFile:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "showNetworkSummaryInformation", "tail" : "(resFile: PrintWriter): Unit", "member" : "experiments.BnetAnalysis.showNetworkSummaryInformation", "link" : "experiments\/BnetAnalysis.html#showNetworkSummaryInformation(resFile:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "showPotentialRepresentationInfo", "tail" : "(resFile: PrintWriter, potential: Potential, storeType: ValueStoreType): Unit", "member" : "experiments.BnetAnalysis.showPotentialRepresentationInfo", "link" : "experiments\/BnetAnalysis.html#showPotentialRepresentationInfo(resFile:java.io.PrintWriter,potential:potential.Potential,storeType:potential.ValueStoreTypes.ValueStoreType):Unit", "kind" : "def"}, {"label" : "showPotentialGeneralInfo", "tail" : "(resFile: PrintWriter, potential: Potential): Unit", "member" : "experiments.BnetAnalysis.showPotentialGeneralInfo", "link" : "experiments\/BnetAnalysis.html#showPotentialGeneralInfo(resFile:java.io.PrintWriter,potential:potential.Potential):Unit", "kind" : "def"}, {"label" : "showSerializationInfo", "tail" : "(resFile: PrintWriter): Unit", "member" : "experiments.BnetAnalysis.showSerializationInfo", "link" : "experiments\/BnetAnalysis.html#showSerializationInfo(resFile:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "showColumnsMeaning", "tail" : "(resFile: PrintWriter): Unit", "member" : "experiments.BnetAnalysis.showColumnsMeaning", "link" : "experiments\/BnetAnalysis.html#showColumnsMeaning(resFile:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "generateInfo", "tail" : "(): Unit", "member" : "experiments.BnetAnalysis.generateInfo", "link" : "experiments\/BnetAnalysis.html#generateInfo:Unit", "kind" : "def"}, {"label" : "bnetsInfo", "tail" : ": Map[ValueStoreType, BnetInfo]", "member" : "experiments.BnetAnalysis.bnetsInfo", "link" : "experiments\/BnetAnalysis.html#bnetsInfo:scala.collection.mutable.Map[potential.ValueStoreTypes.ValueStoreType,experiments.BnetInfo]", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "experiments.BnetAnalysis.bnet", "link" : "experiments\/BnetAnalysis.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "folderNet", "tail" : ": String", "member" : "experiments.BnetAnalysis.folderNet", "link" : "experiments\/BnetAnalysis.html#folderNet:String", "kind" : "val"}, {"label" : "folderResults", "tail" : ": String", "member" : "experiments.BnetAnalysis.folderResults", "link" : "experiments\/BnetAnalysis.html#folderResults:String", "kind" : "val"}, {"member" : "experiments.BnetAnalysis#<init>", "error" : "unsupported entity"}, {"label" : "extension", "tail" : ": String", "member" : "experiments.BnetAnalysis.extension", "link" : "experiments\/BnetAnalysis.html#extension:String", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.BnetAnalysis.netName", "link" : "experiments\/BnetAnalysis.html#netName:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.BnetAnalysis.folder", "link" : "experiments\/BnetAnalysis.html#folder:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/BnetAnalysis.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/BnetAnalysis.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/BnetAnalysis.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/BnetAnalysis.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/BnetAnalysis.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/BnetAnalysis.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/BnetAnalysis.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetAnalysis.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetAnalysis.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetAnalysis.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/BnetAnalysis.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/BnetAnalysis.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/BnetAnalysis.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/BnetAnalysis.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/BnetAnalysis.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/BnetAnalysis.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/BnetAnalysis.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/BnetAnalysis.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/BnetAnalysis.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "showPotential", "tail" : "(netName: String, folder: String, variable: String, representation: ValueStoreType): Unit", "member" : "experiments.BnetAnalysis.showPotential", "link" : "experiments\/BnetAnalysis$.html#showPotential(netName:String,folder:String,variable:String,representation:potential.ValueStoreTypes.ValueStoreType):Unit", "kind" : "def"}, {"label" : "singleAnalysis", "tail" : "(netName: String, folder: String, extension: String): String", "member" : "experiments.BnetAnalysis.singleAnalysis", "link" : "experiments\/BnetAnalysis$.html#singleAnalysis(netName:String,folder:String,extension:String):String", "kind" : "def"}, {"label" : "generateGlobalFile", "tail" : "(): Unit", "member" : "experiments.BnetAnalysis.generateGlobalFile", "link" : "experiments\/BnetAnalysis$.html#generateGlobalFile:Unit", "kind" : "def"}, {"label" : "composeLineForNet", "tail" : "(net: String): String", "member" : "experiments.BnetAnalysis.composeLineForNet", "link" : "experiments\/BnetAnalysis$.html#composeLineForNet(net:String):String", "kind" : "def"}, {"label" : "composeTableFinal", "tail" : "(): String", "member" : "experiments.BnetAnalysis.composeTableFinal", "link" : "experiments\/BnetAnalysis$.html#composeTableFinal():String", "kind" : "def"}, {"label" : "composeHeader", "tail" : "(): String", "member" : "experiments.BnetAnalysis.composeHeader", "link" : "experiments\/BnetAnalysis$.html#composeHeader():String", "kind" : "def"}, {"label" : "generatePaperLatexTable", "tail" : "(): Unit", "member" : "experiments.BnetAnalysis.generatePaperLatexTable", "link" : "experiments\/BnetAnalysis$.html#generatePaperLatexTable:Unit", "kind" : "def"}, {"label" : "batchAnalysis", "tail" : "(folder: String, extension: String): Unit", "member" : "experiments.BnetAnalysis.batchAnalysis", "link" : "experiments\/BnetAnalysis$.html#batchAnalysis(folder:String,extension:String):Unit", "kind" : "def"}, {"label" : "globalInfo", "tail" : ": Map[String, Map[potential.ValueStoreTypes.Value, Long]]", "member" : "experiments.BnetAnalysis.globalInfo", "link" : "experiments\/BnetAnalysis$.html#globalInfo:scala.collection.mutable.Map[String,scala.collection.immutable.Map[potential.ValueStoreTypes.Value,Long]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/BnetAnalysis$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/BnetAnalysis$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/BnetAnalysis$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/BnetAnalysis$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/BnetAnalysis$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/BnetAnalysis$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/BnetAnalysis$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetAnalysis$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetAnalysis$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetAnalysis$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/BnetAnalysis$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/BnetAnalysis$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/BnetAnalysis$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/BnetAnalysis$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/BnetAnalysis$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/BnetAnalysis$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/BnetAnalysis$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/BnetAnalysis$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/BnetAnalysis$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "experiments\/BnetAnalysis.html", "kind" : "class"}, {"name" : "experiments.BnetGeneralInfo", "shortDescription" : "", "object" : "experiments\/BnetGeneralInfo$.html", "members_object" : [{"label" : "showValuesPatterns", "tail" : "(bnet: Bnet): Unit", "member" : "experiments.BnetGeneralInfo.showValuesPatterns", "link" : "experiments\/BnetGeneralInfo$.html#showValuesPatterns(bnet:bnet.Bnet):Unit", "kind" : "def"}, {"label" : "showBasicInfo", "tail" : "(bnet: Bnet): Unit", "member" : "experiments.BnetGeneralInfo.showBasicInfo", "link" : "experiments\/BnetGeneralInfo$.html#showBasicInfo(bnet:bnet.Bnet):Unit", "kind" : "def"}, {"label" : "readNetData", "tail" : "(folder: String, name: String, extension: String): Bnet", "member" : "experiments.BnetGeneralInfo.readNetData", "link" : "experiments\/BnetGeneralInfo$.html#readNetData(folder:String,name:String,extension:String):bnet.Bnet", "kind" : "def"}, {"label" : "extension", "tail" : ": String", "member" : "experiments.BnetGeneralInfo.extension", "link" : "experiments\/BnetGeneralInfo$.html#extension:String", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.BnetGeneralInfo.netName", "link" : "experiments\/BnetGeneralInfo$.html#netName:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.BnetGeneralInfo.folder", "link" : "experiments\/BnetGeneralInfo$.html#folder:String", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/BnetGeneralInfo$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/BnetGeneralInfo$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/BnetGeneralInfo$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/BnetGeneralInfo$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/BnetGeneralInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/BnetGeneralInfo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/BnetGeneralInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/BnetGeneralInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/BnetGeneralInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/BnetGeneralInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/BnetGeneralInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetGeneralInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetGeneralInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetGeneralInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/BnetGeneralInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/BnetGeneralInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/BnetGeneralInfo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/BnetGeneralInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/BnetGeneralInfo$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/BnetGeneralInfo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/BnetGeneralInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/BnetGeneralInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/BnetGeneralInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.BnetInfo", "shortDescription" : "Class for storing the information about the potentialsobtained through each representation", "members_class" : [{"label" : "serializationSize", "tail" : ": Long", "member" : "experiments.BnetInfo.serializationSize", "link" : "experiments\/BnetInfo.html#serializationSize:Long", "kind" : "val"}, {"label" : "potentialsInfo", "tail" : ": Map[Variable, PotentialInfo]", "member" : "experiments.BnetInfo.potentialsInfo", "link" : "experiments\/BnetInfo.html#potentialsInfo:scala.collection.mutable.Map[base.Variable,experiments.PotentialInfo]", "kind" : "val"}, {"member" : "experiments.BnetInfo#<init>", "error" : "unsupported entity"}, {"label" : "serialize", "tail" : ": Boolean", "member" : "experiments.BnetInfo.serialize", "link" : "experiments\/BnetInfo.html#serialize:Boolean", "kind" : "val"}, {"label" : "net", "tail" : ": Bnet", "member" : "experiments.BnetInfo.net", "link" : "experiments\/BnetInfo.html#net:bnet.Bnet", "kind" : "val"}, {"label" : "storeType", "tail" : ": ValueStoreType", "member" : "experiments.BnetInfo.storeType", "link" : "experiments\/BnetInfo.html#storeType:potential.ValueStoreTypes.ValueStoreType", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.BnetInfo.netName", "link" : "experiments\/BnetInfo.html#netName:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.BnetInfo.folder", "link" : "experiments\/BnetInfo.html#folder:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/BnetInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/BnetInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/BnetInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/BnetInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/BnetInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/BnetInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/BnetInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/BnetInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/BnetInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/BnetInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/BnetInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/BnetInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/BnetInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/BnetInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/BnetInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/BnetInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "experiments\/BnetInfo.html", "kind" : "class"}, {"name" : "experiments.BnetPotentialInspection", "shortDescription" : "Class for inspecting the result of conversions and relationsbetween several representations.", "object" : "experiments\/BnetPotentialInspection$.html", "members_class" : [{"label" : "printGlobalSizes", "tail" : "(): Unit", "member" : "experiments.BnetPotentialInspection.printGlobalSizes", "link" : "experiments\/BnetPotentialInspection.html#printGlobalSizes:Unit", "kind" : "def"}, {"label" : "printPotential", "tail" : "(storeType: ValueStoreType): Unit", "member" : "experiments.BnetPotentialInspection.printPotential", "link" : "experiments\/BnetPotentialInspection.html#printPotential(storeType:potential.ValueStoreTypes.ValueStoreType):Unit", "kind" : "def"}, {"label" : "generateInfo", "tail" : "(): Unit", "member" : "experiments.BnetPotentialInspection.generateInfo", "link" : "experiments\/BnetPotentialInspection.html#generateInfo:Unit", "kind" : "def"}, {"label" : "potentialsInfo", "tail" : ": Map[ValueStoreType, PotentialInfo]", "member" : "experiments.BnetPotentialInspection.potentialsInfo", "link" : "experiments\/BnetPotentialInspection.html#potentialsInfo:scala.collection.mutable.Map[potential.ValueStoreTypes.ValueStoreType,experiments.PotentialInfo]", "kind" : "val"}, {"label" : "globalSizes", "tail" : ": Map[ValueStoreType, Long]", "member" : "experiments.BnetPotentialInspection.globalSizes", "link" : "experiments\/BnetPotentialInspection.html#globalSizes:scala.collection.mutable.Map[potential.ValueStoreTypes.ValueStoreType,Long]", "kind" : "val"}, {"label" : "potentialRepresentations", "tail" : ": Map[ValueStoreType, Potential]", "member" : "experiments.BnetPotentialInspection.potentialRepresentations", "link" : "experiments\/BnetPotentialInspection.html#potentialRepresentations:scala.collection.mutable.Map[potential.ValueStoreTypes.ValueStoreType,potential.Potential]", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "experiments.BnetPotentialInspection.bnet", "link" : "experiments\/BnetPotentialInspection.html#bnet:bnet.Bnet", "kind" : "val"}, {"member" : "experiments.BnetPotentialInspection#<init>", "error" : "unsupported entity"}, {"label" : "storeTypes", "tail" : ": List[ValueStoreType]", "member" : "experiments.BnetPotentialInspection.storeTypes", "link" : "experiments\/BnetPotentialInspection.html#storeTypes:List[potential.ValueStoreTypes.ValueStoreType]", "kind" : "val"}, {"label" : "variableName", "tail" : ": String", "member" : "experiments.BnetPotentialInspection.variableName", "link" : "experiments\/BnetPotentialInspection.html#variableName:String", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "experiments.BnetPotentialInspection.extension", "link" : "experiments\/BnetPotentialInspection.html#extension:String", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.BnetPotentialInspection.netName", "link" : "experiments\/BnetPotentialInspection.html#netName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/BnetPotentialInspection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/BnetPotentialInspection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/BnetPotentialInspection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/BnetPotentialInspection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/BnetPotentialInspection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/BnetPotentialInspection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/BnetPotentialInspection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetPotentialInspection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetPotentialInspection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetPotentialInspection.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/BnetPotentialInspection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/BnetPotentialInspection.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/BnetPotentialInspection.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/BnetPotentialInspection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/BnetPotentialInspection.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/BnetPotentialInspection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/BnetPotentialInspection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/BnetPotentialInspection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/BnetPotentialInspection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "inspector", "tail" : ": BnetPotentialInspection", "member" : "experiments.BnetPotentialInspection.inspector", "link" : "experiments\/BnetPotentialInspection$.html#inspector:experiments.BnetPotentialInspection", "kind" : "val"}, {"label" : "listAlternatives", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.BnetPotentialInspection.listAlternatives", "link" : "experiments\/BnetPotentialInspection$.html#listAlternatives:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/BnetPotentialInspection$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/BnetPotentialInspection$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/BnetPotentialInspection$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/BnetPotentialInspection$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/BnetPotentialInspection$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/BnetPotentialInspection$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/BnetPotentialInspection$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/BnetPotentialInspection$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/BnetPotentialInspection$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/BnetPotentialInspection$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/BnetPotentialInspection$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetPotentialInspection$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetPotentialInspection$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/BnetPotentialInspection$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/BnetPotentialInspection$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/BnetPotentialInspection$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/BnetPotentialInspection$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/BnetPotentialInspection$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/BnetPotentialInspection$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/BnetPotentialInspection$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/BnetPotentialInspection$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/BnetPotentialInspection$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/BnetPotentialInspection$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "experiments\/BnetPotentialInspection.html", "kind" : "class"}, {"name" : "experiments.ExampleAnalysys", "shortDescription" : "Simple example of generation of information for a net", "object" : "experiments\/ExampleAnalysys$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/ExampleAnalysys$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/ExampleAnalysys$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/ExampleAnalysys$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/ExampleAnalysys$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/ExampleAnalysys$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/ExampleAnalysys$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/ExampleAnalysys$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/ExampleAnalysys$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/ExampleAnalysys$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/ExampleAnalysys$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/ExampleAnalysys$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ExampleAnalysys$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ExampleAnalysys$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ExampleAnalysys$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/ExampleAnalysys$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/ExampleAnalysys$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/ExampleAnalysys$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/ExampleAnalysys$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/ExampleAnalysys$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/ExampleAnalysys$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/ExampleAnalysys$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/ExampleAnalysys$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/ExampleAnalysys$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.ExperimentConfiguration", "shortDescription" : "Object for storing the configuration of the experimentto perform in order to analyze a certain Bnet with severalkind of representations", "object" : "experiments\/ExperimentConfiguration$.html", "members_object" : [{"label" : "typesOfInterest", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.ExperimentConfiguration.typesOfInterest", "link" : "experiments\/ExperimentConfiguration$.html#typesOfInterest:List[potential.ValueStoreTypes.Value]", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/ExperimentConfiguration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/ExperimentConfiguration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/ExperimentConfiguration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/ExperimentConfiguration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/ExperimentConfiguration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/ExperimentConfiguration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/ExperimentConfiguration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ExperimentConfiguration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ExperimentConfiguration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/ExperimentConfiguration$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/ExperimentConfiguration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/ExperimentConfiguration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/ExperimentConfiguration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/ExperimentConfiguration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/ExperimentConfiguration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/ExperimentConfiguration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/ExperimentConfiguration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/ExperimentConfiguration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/ExperimentConfiguration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.PotentialInfo", "shortDescription" : "Class for representing the information of interest of a givenpotential", "members_class" : [{"label" : "serializationSize", "tail" : ": Long", "member" : "experiments.PotentialInfo.serializationSize", "link" : "experiments\/PotentialInfo.html#serializationSize:Long", "kind" : "val"}, {"label" : "memorySize", "tail" : ": Long", "member" : "experiments.PotentialInfo.memorySize", "link" : "experiments\/PotentialInfo.html#memorySize:Long", "kind" : "val"}, {"label" : "sizes", "tail" : ": (Long, Long, Long)", "member" : "experiments.PotentialInfo.sizes", "link" : "experiments\/PotentialInfo.html#sizes:(Long,Long,Long)", "kind" : "val"}, {"label" : "conditioningVars", "tail" : ": VariableSet", "member" : "experiments.PotentialInfo.conditioningVars", "link" : "experiments\/PotentialInfo.html#conditioningVars:base.VariableSet", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "experiments.PotentialInfo.mainVariable", "link" : "experiments\/PotentialInfo.html#mainVariable:base.Variable", "kind" : "val"}, {"member" : "experiments.PotentialInfo#<init>", "error" : "unsupported entity"}, {"label" : "serialize", "tail" : ": Boolean", "member" : "experiments.PotentialInfo.serialize", "link" : "experiments\/PotentialInfo.html#serialize:Boolean", "kind" : "val"}, {"label" : "potential", "tail" : ": Potential", "member" : "experiments.PotentialInfo.potential", "link" : "experiments\/PotentialInfo.html#potential:potential.Potential", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.PotentialInfo.netName", "link" : "experiments\/PotentialInfo.html#netName:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.PotentialInfo.folder", "link" : "experiments\/PotentialInfo.html#folder:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/PotentialInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/PotentialInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/PotentialInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/PotentialInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/PotentialInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/PotentialInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/PotentialInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/PotentialInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/PotentialInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/PotentialInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/PotentialInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/PotentialInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/PotentialInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/PotentialInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/PotentialInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/PotentialInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/PotentialInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/PotentialInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/PotentialInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "experiments\/PotentialInfo.html", "kind" : "class"}, {"name" : "experiments.QualitativeVariableEliminationTest", "shortDescription" : "Object extending of App for executing test aboutQualitativeVariableElimination algorithm execution", "object" : "experiments\/QualitativeVariableEliminationTest$.html", "members_object" : [{"label" : "engine", "tail" : ": QualitativeVariableElimination", "member" : "experiments.QualitativeVariableEliminationTest.engine", "link" : "experiments\/QualitativeVariableEliminationTest$.html#engine:inference.QualitativeVariableElimination", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "experiments.QualitativeVariableEliminationTest.extension", "link" : "experiments\/QualitativeVariableEliminationTest$.html#extension:String", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.QualitativeVariableEliminationTest.netName", "link" : "experiments\/QualitativeVariableEliminationTest$.html#netName:String", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/QualitativeVariableEliminationTest$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/QualitativeVariableEliminationTest$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/QualitativeVariableEliminationTest$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/QualitativeVariableEliminationTest$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/QualitativeVariableEliminationTest$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/QualitativeVariableEliminationTest$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/QualitativeVariableEliminationTest$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/QualitativeVariableEliminationTest$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/QualitativeVariableEliminationTest$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/QualitativeVariableEliminationTest$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/QualitativeVariableEliminationTest$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/QualitativeVariableEliminationTest$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/QualitativeVariableEliminationTest$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/QualitativeVariableEliminationTest$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/QualitativeVariableEliminationTest$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/QualitativeVariableEliminationTest$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/QualitativeVariableEliminationTest$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/QualitativeVariableEliminationTest$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/QualitativeVariableEliminationTest$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/QualitativeVariableEliminationTest$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/QualitativeVariableEliminationTest$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/QualitativeVariableEliminationTest$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/QualitativeVariableEliminationTest$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.SingleConversion", "shortDescription" : "Object extending from App for performing a singleconversion of a net", "object" : "experiments\/SingleConversion$.html", "members_object" : [{"label" : "alternativeBnet", "tail" : ": Bnet", "member" : "experiments.SingleConversion.alternativeBnet", "link" : "experiments\/SingleConversion$.html#alternativeBnet:bnet.Bnet", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "experiments.SingleConversion.bnet", "link" : "experiments\/SingleConversion$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.SingleConversion.netName", "link" : "experiments\/SingleConversion$.html#netName:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.SingleConversion.folder", "link" : "experiments\/SingleConversion$.html#folder:String", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/SingleConversion$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/SingleConversion$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/SingleConversion$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/SingleConversion$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/SingleConversion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/SingleConversion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/SingleConversion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/SingleConversion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/SingleConversion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/SingleConversion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/SingleConversion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SingleConversion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SingleConversion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SingleConversion$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/SingleConversion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/SingleConversion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/SingleConversion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/SingleConversion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/SingleConversion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/SingleConversion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/SingleConversion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/SingleConversion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/SingleConversion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.SingleOperation", "shortDescription" : "Object for making a single test of a concrete combinationof potentials.", "object" : "experiments\/SingleOperation$.html", "members_object" : [{"label" : "potMarginalizationAIM", "tail" : ": Potential", "member" : "experiments.SingleOperation.potMarginalizationAIM", "link" : "experiments\/SingleOperation$.html#potMarginalizationAIM:potential.Potential", "kind" : "val"}, {"label" : "potCombinationAIM", "tail" : ": Potential", "member" : "experiments.SingleOperation.potCombinationAIM", "link" : "experiments\/SingleOperation$.html#potCombinationAIM:potential.Potential", "kind" : "val"}, {"label" : "potential2AIM", "tail" : ": Potential", "member" : "experiments.SingleOperation.potential2AIM", "link" : "experiments\/SingleOperation$.html#potential2AIM:potential.Potential", "kind" : "val"}, {"label" : "potential1AIM", "tail" : ": Potential", "member" : "experiments.SingleOperation.potential1AIM", "link" : "experiments\/SingleOperation$.html#potential1AIM:potential.Potential", "kind" : "val"}, {"label" : "target", "tail" : ": potential.ValueStoreTypes.Value", "member" : "experiments.SingleOperation.target", "link" : "experiments\/SingleOperation$.html#target:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "potCombination", "tail" : ": Potential", "member" : "experiments.SingleOperation.potCombination", "link" : "experiments\/SingleOperation$.html#potCombination:potential.Potential", "kind" : "val"}, {"label" : "potential2", "tail" : ": Potential", "member" : "experiments.SingleOperation.potential2", "link" : "experiments\/SingleOperation$.html#potential2:potential.Potential", "kind" : "val"}, {"label" : "potential1", "tail" : ": Potential", "member" : "experiments.SingleOperation.potential1", "link" : "experiments\/SingleOperation$.html#potential1:potential.Potential", "kind" : "val"}, {"label" : "store2Table", "tail" : ": TableStore", "member" : "experiments.SingleOperation.store2Table", "link" : "experiments\/SingleOperation$.html#store2Table:potential.TableStore", "kind" : "val"}, {"label" : "store1Table", "tail" : ": TableStore", "member" : "experiments.SingleOperation.store1Table", "link" : "experiments\/SingleOperation$.html#store1Table:potential.TableStore", "kind" : "val"}, {"label" : "valuesPot2", "tail" : ": Array[Double]", "member" : "experiments.SingleOperation.valuesPot2", "link" : "experiments\/SingleOperation$.html#valuesPot2:Array[Double]", "kind" : "val"}, {"label" : "valuesPot1", "tail" : ": Array[Double]", "member" : "experiments.SingleOperation.valuesPot1", "link" : "experiments\/SingleOperation$.html#valuesPot1:Array[Double]", "kind" : "val"}, {"label" : "domain2", "tail" : ": VariableSet", "member" : "experiments.SingleOperation.domain2", "link" : "experiments\/SingleOperation$.html#domain2:base.VariableSet", "kind" : "val"}, {"label" : "domain1", "tail" : ": VariableSet", "member" : "experiments.SingleOperation.domain1", "link" : "experiments\/SingleOperation$.html#domain1:base.VariableSet", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "experiments.SingleOperation.variable3", "link" : "experiments\/SingleOperation$.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "experiments.SingleOperation.variable2", "link" : "experiments\/SingleOperation$.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "experiments.SingleOperation.variable1", "link" : "experiments\/SingleOperation$.html#variable1:base.Variable", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/SingleOperation$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/SingleOperation$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/SingleOperation$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/SingleOperation$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/SingleOperation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/SingleOperation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/SingleOperation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/SingleOperation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/SingleOperation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/SingleOperation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/SingleOperation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SingleOperation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SingleOperation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SingleOperation$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/SingleOperation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/SingleOperation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/SingleOperation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/SingleOperation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/SingleOperation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/SingleOperation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/SingleOperation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/SingleOperation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/SingleOperation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.SinglePotentialIJISExample", "shortDescription" : "", "object" : "experiments\/SinglePotentialIJISExample$.html", "members_class" : [{"label" : "potential", "tail" : ": Potential", "member" : "experiments.SinglePotentialIJISExample.potential", "link" : "experiments\/SinglePotentialIJISExample.html#potential:potential.Potential", "kind" : "val"}, {"member" : "experiments.SinglePotentialIJISExample#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/SinglePotentialIJISExample.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/SinglePotentialIJISExample.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/SinglePotentialIJISExample.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/SinglePotentialIJISExample.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/SinglePotentialIJISExample.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/SinglePotentialIJISExample.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/SinglePotentialIJISExample.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SinglePotentialIJISExample.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SinglePotentialIJISExample.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SinglePotentialIJISExample.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/SinglePotentialIJISExample.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/SinglePotentialIJISExample.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/SinglePotentialIJISExample.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/SinglePotentialIJISExample.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/SinglePotentialIJISExample.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/SinglePotentialIJISExample.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/SinglePotentialIJISExample.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/SinglePotentialIJISExample.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/SinglePotentialIJISExample.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "idm", "tail" : ": Potential", "member" : "experiments.SinglePotentialIJISExample.idm", "link" : "experiments\/SinglePotentialIJISExample$.html#idm:potential.Potential", "kind" : "val"}, {"label" : "idp", "tail" : ": Potential", "member" : "experiments.SinglePotentialIJISExample.idp", "link" : "experiments\/SinglePotentialIJISExample$.html#idp:potential.Potential", "kind" : "val"}, {"label" : "vdi", "tail" : ": Potential", "member" : "experiments.SinglePotentialIJISExample.vdi", "link" : "experiments\/SinglePotentialIJISExample$.html#vdi:potential.Potential", "kind" : "val"}, {"label" : "grainData", "tail" : ": (Int, Long, Double)", "member" : "experiments.SinglePotentialIJISExample.grainData", "link" : "experiments\/SinglePotentialIJISExample$.html#grainData:(Int,Long,Double)", "kind" : "val"}, {"label" : "vdg", "tail" : ": Potential", "member" : "experiments.SinglePotentialIJISExample.vdg", "link" : "experiments\/SinglePotentialIJISExample$.html#vdg:potential.Potential", "kind" : "val"}, {"label" : "prunedTree", "tail" : ": Potential", "member" : "experiments.SinglePotentialIJISExample.prunedTree", "link" : "experiments\/SinglePotentialIJISExample$.html#prunedTree:potential.Potential", "kind" : "val"}, {"label" : "tree", "tail" : ": Potential", "member" : "experiments.SinglePotentialIJISExample.tree", "link" : "experiments\/SinglePotentialIJISExample$.html#tree:potential.Potential", "kind" : "val"}, {"label" : "difValues", "tail" : ": List[Double]", "member" : "experiments.SinglePotentialIJISExample.difValues", "link" : "experiments\/SinglePotentialIJISExample$.html#difValues:List[Double]", "kind" : "val"}, {"label" : "example", "tail" : ": SinglePotentialIJISExample", "member" : "experiments.SinglePotentialIJISExample.example", "link" : "experiments\/SinglePotentialIJISExample$.html#example:experiments.SinglePotentialIJISExample", "kind" : "val"}, {"label" : "typesOfInteres", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.SinglePotentialIJISExample.typesOfInteres", "link" : "experiments\/SinglePotentialIJISExample$.html#typesOfInteres:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/SinglePotentialIJISExample$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/SinglePotentialIJISExample$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/SinglePotentialIJISExample$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/SinglePotentialIJISExample$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/SinglePotentialIJISExample$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/SinglePotentialIJISExample$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/SinglePotentialIJISExample$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/SinglePotentialIJISExample$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/SinglePotentialIJISExample$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/SinglePotentialIJISExample$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/SinglePotentialIJISExample$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SinglePotentialIJISExample$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SinglePotentialIJISExample$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/SinglePotentialIJISExample$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/SinglePotentialIJISExample$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/SinglePotentialIJISExample$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/SinglePotentialIJISExample$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/SinglePotentialIJISExample$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/SinglePotentialIJISExample$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/SinglePotentialIJISExample$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/SinglePotentialIJISExample$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/SinglePotentialIJISExample$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/SinglePotentialIJISExample$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "experiments\/SinglePotentialIJISExample.html", "kind" : "class"}, {"name" : "experiments.UtilAnalysis", "shortDescription" : "Object offering utility function for bnet analysis", "object" : "experiments\/UtilAnalysis$.html", "members_object" : [{"label" : "serializePotential", "tail" : "(folder: String, netName: String, potential: Potential): Long", "member" : "experiments.UtilAnalysis.serializePotential", "link" : "experiments\/UtilAnalysis$.html#serializePotential(folder:String,netName:String,potential:potential.Potential):Long", "kind" : "def"}, {"label" : "serializeNet", "tail" : "(folder: String, netName: String, storeType: ValueStoreType, net: Bnet): Long", "member" : "experiments.UtilAnalysis.serializeNet", "link" : "experiments\/UtilAnalysis$.html#serializeNet(folder:String,netName:String,storeType:potential.ValueStoreTypes.ValueStoreType,net:bnet.Bnet):Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/UtilAnalysis$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/UtilAnalysis$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/UtilAnalysis$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/UtilAnalysis$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/UtilAnalysis$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/UtilAnalysis$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/UtilAnalysis$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/UtilAnalysis$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/UtilAnalysis$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/UtilAnalysis$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/UtilAnalysis$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/UtilAnalysis$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/UtilAnalysis$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/UtilAnalysis$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/UtilAnalysis$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/UtilAnalysis$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/UtilAnalysis$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/UtilAnalysis$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/UtilAnalysis$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.VariableEliminationTest", "shortDescription" : "Object extending of App for executing test about VariableEliminationalgorithm execution", "object" : "experiments\/VariableEliminationTest$.html", "members_object" : [{"label" : "methods", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.VariableEliminationTest.methods", "link" : "experiments\/VariableEliminationTest$.html#methods:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "completeList", "tail" : ": List[String]", "member" : "experiments.VariableEliminationTest.completeList", "link" : "experiments\/VariableEliminationTest$.html#completeList:List[String]", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "experiments.VariableEliminationTest.extension", "link" : "experiments\/VariableEliminationTest$.html#extension:String", "kind" : "val"}, {"label" : "netNames", "tail" : ": List[String]", "member" : "experiments.VariableEliminationTest.netNames", "link" : "experiments\/VariableEliminationTest$.html#netNames:List[String]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/VariableEliminationTest$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/VariableEliminationTest$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/VariableEliminationTest$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/VariableEliminationTest$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/VariableEliminationTest$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/VariableEliminationTest$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/VariableEliminationTest$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/VariableEliminationTest$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/VariableEliminationTest$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/VariableEliminationTest$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/VariableEliminationTest$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/VariableEliminationTest$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/VariableEliminationTest$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/VariableEliminationTest$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/VariableEliminationTest$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/VariableEliminationTest$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/VariableEliminationTest$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/VariableEliminationTest$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/VariableEliminationTest$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/VariableEliminationTest$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/VariableEliminationTest$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/VariableEliminationTest$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/VariableEliminationTest$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "potential.tree" : [{"name" : "potential.tree.Internal", "shortDescription" : "Class for internal nodes: extends from TreeNode", "members_case class" : [{"label" : "printNode", "tail" : "(level: Int): String", "member" : "potential.tree.Internal.printNode", "link" : "potential\/tree\/Internal.html#printNode(level:Int):String", "kind" : "def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.tree.Internal.getMemorySize", "link" : "potential\/tree\/Internal.html#getMemorySize:Long", "kind" : "def"}, {"label" : "pruneChildren", "tail" : "(): TreeNode", "member" : "potential.tree.Internal.pruneChildren", "link" : "potential\/tree\/Internal.html#pruneChildren:potential.tree.TreeNode", "kind" : "def"}, {"label" : "getValues", "tail" : "(): List[Double]", "member" : "potential.tree.Internal.getValues", "link" : "potential\/tree\/Internal.html#getValues:List[Double]", "kind" : "def"}, {"label" : "getChild", "tail" : "(index: Int): TreeNode", "member" : "potential.tree.Internal.getChild", "link" : "potential\/tree\/Internal.html#getChild(index:Int):potential.tree.TreeNode", "kind" : "def"}, {"label" : "child", "tail" : ": Array[TreeNode]", "member" : "potential.tree.Internal.child", "link" : "potential\/tree\/Internal.html#child:Array[potential.tree.TreeNode]", "kind" : "val"}, {"member" : "potential.tree.Internal#<init>", "error" : "unsupported entity"}, {"label" : "variable", "tail" : ": Variable", "member" : "potential.tree.Internal.variable", "link" : "potential\/tree\/Internal.html#variable:base.Variable", "kind" : "val"}, {"label" : "getNumberNodes", "tail" : "(): (Long, Long)", "member" : "potential.tree.TreeNode.getNumberNodes", "link" : "potential\/tree\/Internal.html#getNumberNodes:(Long,Long)", "kind" : "def"}, {"label" : "restrict", "tail" : "(variable: Variable, value: Int): TreeNode", "member" : "potential.tree.TreeNode.restrict", "link" : "potential\/tree\/Internal.html#restrict(variable:base.Variable,value:Int):potential.tree.TreeNode", "kind" : "def"}, {"label" : "spaces", "tail" : ": String(\"   \")", "member" : "potential.tree.TreeNode.spaces", "link" : "potential\/tree\/Internal.html#spaces:String(\"\")", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/tree\/Internal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/tree\/Internal.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/tree\/Internal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/tree\/Internal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/tree\/Internal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/tree\/Internal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/tree\/Internal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/Internal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/Internal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/Internal.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/tree\/Internal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/tree\/Internal.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/tree\/Internal.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/tree\/Internal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/tree\/Internal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/tree\/Internal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/tree\/Internal.html", "kind" : "case class"}, {"name" : "potential.tree.Leaf", "shortDescription" : "Case class for leaf nodes: extends TreeNode", "members_case class" : [{"label" : "printNode", "tail" : "(level: Int): String", "member" : "potential.tree.Leaf.printNode", "link" : "potential\/tree\/Leaf.html#printNode(level:Int):String", "kind" : "def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.tree.Leaf.getMemorySize", "link" : "potential\/tree\/Leaf.html#getMemorySize:Long", "kind" : "def"}, {"label" : "getChild", "tail" : "(index: Int): TreeNode", "member" : "potential.tree.Leaf.getChild", "link" : "potential\/tree\/Leaf.html#getChild(index:Int):potential.tree.TreeNode", "kind" : "def"}, {"label" : "getValues", "tail" : "(): List[Double]", "member" : "potential.tree.Leaf.getValues", "link" : "potential\/tree\/Leaf.html#getValues:List[Double]", "kind" : "def"}, {"member" : "potential.tree.Leaf#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Double", "member" : "potential.tree.Leaf.value", "link" : "potential\/tree\/Leaf.html#value:Double", "kind" : "val"}, {"label" : "getNumberNodes", "tail" : "(): (Long, Long)", "member" : "potential.tree.TreeNode.getNumberNodes", "link" : "potential\/tree\/Leaf.html#getNumberNodes:(Long,Long)", "kind" : "def"}, {"label" : "restrict", "tail" : "(variable: Variable, value: Int): TreeNode", "member" : "potential.tree.TreeNode.restrict", "link" : "potential\/tree\/Leaf.html#restrict(variable:base.Variable,value:Int):potential.tree.TreeNode", "kind" : "def"}, {"label" : "spaces", "tail" : ": String(\"   \")", "member" : "potential.tree.TreeNode.spaces", "link" : "potential\/tree\/Leaf.html#spaces:String(\"\")", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/tree\/Leaf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/tree\/Leaf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/tree\/Leaf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/tree\/Leaf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/tree\/Leaf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/tree\/Leaf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/tree\/Leaf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/Leaf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/Leaf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/Leaf.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/tree\/Leaf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/tree\/Leaf.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/tree\/Leaf.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/tree\/Leaf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/tree\/Leaf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/tree\/Leaf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/tree\/Leaf.html", "kind" : "case class"}, {"name" : "potential.tree.PruneTreeTest", "shortDescription" : "Class for testing the combination of potentials as trees", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "potential\/tree\/PruneTreeTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "potential\/tree\/PruneTreeTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "potential\/tree\/PruneTreeTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "potential\/tree\/PruneTreeTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "potential1", "tail" : ": Potential", "member" : "potential.tree.PruneTreeTest.potential1", "link" : "potential\/tree\/PruneTreeTest.html#potential1:potential.Potential", "kind" : "val"}, {"label" : "potential1Values", "tail" : ": PrunedTreeStore", "member" : "potential.tree.PruneTreeTest.potential1Values", "link" : "potential\/tree\/PruneTreeTest.html#potential1Values:potential.PrunedTreeStore", "kind" : "val"}, {"label" : "valuesPot1", "tail" : ": Array[Double]", "member" : "potential.tree.PruneTreeTest.valuesPot1", "link" : "potential\/tree\/PruneTreeTest.html#valuesPot1:Array[Double]", "kind" : "val"}, {"label" : "variableSet1", "tail" : ": VariableSet", "member" : "potential.tree.PruneTreeTest.variableSet1", "link" : "potential\/tree\/PruneTreeTest.html#variableSet1:base.VariableSet", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "potential.tree.PruneTreeTest.variable3", "link" : "potential\/tree\/PruneTreeTest.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "potential.tree.PruneTreeTest.variable2", "link" : "potential\/tree\/PruneTreeTest.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "potential.tree.PruneTreeTest.variable1", "link" : "potential\/tree\/PruneTreeTest.html#variable1:base.Variable", "kind" : "val"}, {"member" : "potential.tree.PruneTreeTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "potential\/tree\/PruneTreeTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "potential\/tree\/PruneTreeTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "potential\/tree\/PruneTreeTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "potential\/tree\/PruneTreeTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "potential\/tree\/PruneTreeTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "potential\/tree\/PruneTreeTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "potential\/tree\/PruneTreeTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "potential\/tree\/PruneTreeTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "potential\/tree\/PruneTreeTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "potential\/tree\/PruneTreeTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "potential\/tree\/PruneTreeTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "potential\/tree\/PruneTreeTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "potential\/tree\/PruneTreeTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "potential\/tree\/PruneTreeTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "potential\/tree\/PruneTreeTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "potential\/tree\/PruneTreeTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "potential\/tree\/PruneTreeTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "potential\/tree\/PruneTreeTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "potential\/tree\/PruneTreeTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "potential\/tree\/PruneTreeTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "potential\/tree\/PruneTreeTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "potential\/tree\/PruneTreeTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "potential\/tree\/PruneTreeTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/tree\/PruneTreeTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/tree\/PruneTreeTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "potential\/tree\/PruneTreeTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "potential\/tree\/PruneTreeTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "potential\/tree\/PruneTreeTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "potential\/tree\/PruneTreeTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "potential\/tree\/PruneTreeTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/tree\/PruneTreeTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/tree\/PruneTreeTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/tree\/PruneTreeTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/tree\/PruneTreeTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/tree\/PruneTreeTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/tree\/PruneTreeTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/tree\/PruneTreeTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/tree\/PruneTreeTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/tree\/PruneTreeTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/tree\/PruneTreeTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "potential\/tree\/PruneTreeTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "potential\/tree\/PruneTreeTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "potential\/tree\/PruneTreeTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "potential\/tree\/PruneTreeTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "potential\/tree\/PruneTreeTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "potential\/tree\/PruneTreeTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/tree\/PruneTreeTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/tree\/PruneTreeTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/tree\/PruneTreeTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "potential\/tree\/PruneTreeTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/tree\/PruneTreeTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "potential\/tree\/PruneTreeTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "potential\/tree\/PruneTreeTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "potential\/tree\/PruneTreeTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "potential\/tree\/PruneTreeTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "potential\/tree\/PruneTreeTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "potential\/tree\/PruneTreeTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "potential\/tree\/PruneTreeTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "potential\/tree\/PruneTreeTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "potential\/tree\/PruneTreeTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "potential\/tree\/PruneTreeTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "potential\/tree\/PruneTreeTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/tree\/PruneTreeTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/tree\/PruneTreeTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/tree\/PruneTreeTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/tree\/PruneTreeTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/tree\/PruneTreeTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/tree\/PruneTreeTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "potential\/tree\/PruneTreeTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/tree\/PruneTreeTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/tree\/PruneTreeTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/tree\/PruneTreeTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/tree\/PruneTreeTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/tree\/PruneTreeTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/tree\/PruneTreeTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/tree\/PruneTreeTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/PruneTreeTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/PruneTreeTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/PruneTreeTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/tree\/PruneTreeTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/tree\/PruneTreeTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/tree\/PruneTreeTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/tree\/PruneTreeTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/tree\/PruneTreeTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/tree\/PruneTreeTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/tree\/PruneTreeTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/tree\/PruneTreeTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/tree\/PruneTreeTest.html", "kind" : "class"}, {"name" : "potential.tree.TreeNode", "members_trait" : [{"label" : "getNumberNodes", "tail" : "(): (Long, Long)", "member" : "potential.tree.TreeNode.getNumberNodes", "link" : "potential\/tree\/TreeNode.html#getNumberNodes:(Long,Long)", "kind" : "def"}, {"label" : "restrict", "tail" : "(variable: Variable, value: Int): TreeNode", "member" : "potential.tree.TreeNode.restrict", "link" : "potential\/tree\/TreeNode.html#restrict(variable:base.Variable,value:Int):potential.tree.TreeNode", "kind" : "def"}, {"label" : "spaces", "tail" : ": String(\"   \")", "member" : "potential.tree.TreeNode.spaces", "link" : "potential\/tree\/TreeNode.html#spaces:String(\"\")", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/tree\/TreeNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/tree\/TreeNode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/tree\/TreeNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/tree\/TreeNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/tree\/TreeNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/tree\/TreeNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/tree\/TreeNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/TreeNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/TreeNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/TreeNode.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/tree\/TreeNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/tree\/TreeNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/tree\/TreeNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/tree\/TreeNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/tree\/TreeNode.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/tree\/TreeNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/tree\/TreeNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/tree\/TreeNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/tree\/TreeNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "printNode", "tail" : "(level: Int): String", "member" : "potential.tree.TreeNode.printNode", "link" : "potential\/tree\/TreeNode.html#printNode(level:Int):String", "kind" : "abstract def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.tree.TreeNode.getMemorySize", "link" : "potential\/tree\/TreeNode.html#getMemorySize:Long", "kind" : "abstract def"}, {"label" : "getChild", "tail" : "(index: Int): TreeNode", "member" : "potential.tree.TreeNode.getChild", "link" : "potential\/tree\/TreeNode.html#getChild(index:Int):potential.tree.TreeNode", "kind" : "abstract def"}, {"label" : "getValues", "tail" : "(): List[Double]", "member" : "potential.tree.TreeNode.getValues", "link" : "potential\/tree\/TreeNode.html#getValues:List[Double]", "kind" : "abstract def"}], "shortDescription" : "Abstract trait for tree nodes", "object" : "potential\/tree\/TreeNode$.html", "members_object" : [{"label" : "resetObjectsCounter", "tail" : "(): Unit", "member" : "potential.tree.TreeNode.resetObjectsCounter", "link" : "potential\/tree\/TreeNode$.html#resetObjectsCounter():Unit", "kind" : "def"}, {"label" : "getObjectsCounter", "tail" : "(): Double", "member" : "potential.tree.TreeNode.getObjectsCounter", "link" : "potential\/tree\/TreeNode$.html#getObjectsCounter:Double", "kind" : "def"}, {"label" : "addObjectsCounter", "tail" : "(internal: Boolean): Unit", "member" : "potential.tree.TreeNode.addObjectsCounter", "link" : "potential\/tree\/TreeNode$.html#addObjectsCounter(internal:Boolean):Unit", "kind" : "def"}, {"label" : "prune", "tail" : "(tree: TreeNode): TreeNode", "member" : "potential.tree.TreeNode.prune", "link" : "potential\/tree\/TreeNode$.html#prune(tree:potential.tree.TreeNode):potential.tree.TreeNode", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable, tree: TreeNode): TreeNode", "member" : "potential.tree.TreeNode.marginalize", "link" : "potential\/tree\/TreeNode$.html#marginalize(variable:base.Variable,tree:potential.tree.TreeNode):potential.tree.TreeNode", "kind" : "def"}, {"label" : "combine", "tail" : "(tree1: TreeNode, tree2: TreeNode): TreeNode", "member" : "potential.tree.TreeNode.combine", "link" : "potential\/tree\/TreeNode$.html#combine(tree1:potential.tree.TreeNode,tree2:potential.tree.TreeNode):potential.tree.TreeNode", "kind" : "def"}, {"label" : "getValue", "tail" : "(tree: TreeNode, variables: VariableSet, index: Long): Double", "member" : "potential.tree.TreeNode.getValue", "link" : "potential\/tree\/TreeNode$.html#getValue(tree:potential.tree.TreeNode,variables:base.VariableSet,index:Long):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(tree: TreeNode): TreeNode", "member" : "potential.tree.TreeNode.apply", "link" : "potential\/tree\/TreeNode$.html#apply(tree:potential.tree.TreeNode):potential.tree.TreeNode", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/tree\/TreeNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/tree\/TreeNode$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/tree\/TreeNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/tree\/TreeNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/tree\/TreeNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/tree\/TreeNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/tree\/TreeNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/TreeNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/TreeNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/tree\/TreeNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/tree\/TreeNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/tree\/TreeNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/tree\/TreeNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/tree\/TreeNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/tree\/TreeNode$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/tree\/TreeNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/tree\/TreeNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/tree\/TreeNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/tree\/TreeNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "potential\/tree\/TreeNode.html", "kind" : "trait"}], "bnet" : [{"name" : "bnet.Bnet", "shortDescription" : "Class for representing Bayesian Networks", "object" : "bnet\/Bnet$.html", "members_class" : [{"label" : "getGeneralInfo", "tail" : "(): (Int, Int, Int, Double, Int, Int)", "member" : "bnet.Bnet.getGeneralInfo", "link" : "bnet\/Bnet.html#getGeneralInfo:(Int,Int,Int,Double,Int,Int)", "kind" : "def"}, {"label" : "getPotentialsMemorySize", "tail" : "(): Long", "member" : "bnet.Bnet.getPotentialsMemorySize", "link" : "bnet\/Bnet.html#getPotentialsMemorySize:Long", "kind" : "def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "bnet.Bnet.getMemorySize", "link" : "bnet\/Bnet.html#getMemorySize:Long", "kind" : "def"}, {"label" : "getPotentialForVariable", "tail" : "(variableName: String): Potential", "member" : "bnet.Bnet.getPotentialForVariable", "link" : "bnet\/Bnet.html#getPotentialForVariable(variableName:String):potential.Potential", "kind" : "def"}, {"label" : "getPotentialForVariable", "tail" : "(variable: Variable): Potential", "member" : "bnet.Bnet.getPotentialForVariable", "link" : "bnet\/Bnet.html#getPotentialForVariable(variable:base.Variable):potential.Potential", "kind" : "def"}, {"label" : "graph", "tail" : ": Graph", "member" : "bnet.Bnet.graph", "link" : "bnet\/Bnet.html#graph:graph.Graph", "kind" : "val"}, {"member" : "bnet.Bnet#<init>", "error" : "unsupported entity"}, {"label" : "potentials", "tail" : ": List[Potential]", "member" : "bnet.Bnet.potentials", "link" : "bnet\/Bnet.html#potentials:List[potential.Potential]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "bnet.Bnet.variables", "link" : "bnet\/Bnet.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "bnet.Bnet.name", "link" : "bnet\/Bnet.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "bnet\/Bnet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "bnet\/Bnet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "bnet\/Bnet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "bnet\/Bnet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "bnet\/Bnet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "bnet\/Bnet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "bnet\/Bnet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "bnet\/Bnet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "bnet\/Bnet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "bnet\/Bnet.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "bnet\/Bnet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "bnet\/Bnet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "bnet\/Bnet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "bnet\/Bnet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "bnet\/Bnet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "bnet\/Bnet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "bnet\/Bnet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "bnet\/Bnet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "bnet\/Bnet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "randomSelectVariableIndexes", "tail" : "(bnet: Bnet, counter: Int, seed: Long): List[Int]", "member" : "bnet.Bnet.randomSelectVariableIndexes", "link" : "bnet\/Bnet$.html#randomSelectVariableIndexes(bnet:bnet.Bnet,counter:Int,seed:Long):List[Int]", "kind" : "def"}, {"label" : "convert", "tail" : "(net: Bnet, storeType: potential.ValueStoreTypes.Value): Bnet", "member" : "bnet.Bnet.convert", "link" : "bnet\/Bnet$.html#convert(net:bnet.Bnet,storeType:potential.ValueStoreTypes.Value):bnet.Bnet", "kind" : "def"}, {"label" : "readObject", "tail" : "(fileName: String): Bnet", "member" : "bnet.Bnet.readObject", "link" : "bnet\/Bnet$.html#readObject(fileName:String):bnet.Bnet", "kind" : "def"}, {"label" : "writeObject", "tail" : "(fileName: String, bnet: Bnet): Unit", "member" : "bnet.Bnet.writeObject", "link" : "bnet\/Bnet$.html#writeObject(fileName:String,bnet:bnet.Bnet):Unit", "kind" : "def"}, {"label" : "analyzePotentials", "tail" : "(potentials: List[Potential]): InfoPotential", "member" : "bnet.Bnet.analyzePotentials", "link" : "bnet\/Bnet$.html#analyzePotentials(potentials:List[potential.Potential]):bnet.Bnet.InfoPotential", "kind" : "def"}, {"label" : "analyzePotentials", "tail" : "(bnet: Bnet): InfoPotential", "member" : "bnet.Bnet.analyzePotentials", "link" : "bnet\/Bnet$.html#analyzePotentials(bnet:bnet.Bnet):bnet.Bnet.InfoPotential", "kind" : "def"}, {"label" : "apply", "tail" : "(netName: String): Bnet", "member" : "bnet.Bnet.apply", "link" : "bnet\/Bnet$.html#apply(netName:String):bnet.Bnet", "kind" : "def"}, {"label" : "apply", "tail" : "(netName: String, variableSet: VariableSet, potentialsList: List[Potential]): Bnet", "member" : "bnet.Bnet.apply", "link" : "bnet\/Bnet$.html#apply(netName:String,variableSet:base.VariableSet,potentialsList:List[potential.Potential]):bnet.Bnet", "kind" : "def"}, {"label" : "apply", "tail" : "(netName: String, nodes: List[(String, List[String])], potentialsList: List[((String, List[String]), List[Double])]): Bnet", "member" : "bnet.Bnet.apply", "link" : "bnet\/Bnet$.html#apply(netName:String,nodes:List[(String,List[String])],potentialsList:List[((String,List[String]),List[Double])]):bnet.Bnet", "kind" : "def"}, {"label" : "InfoPotential", "tail" : "", "member" : "bnet.Bnet.InfoPotential", "link" : "bnet\/Bnet$.html#InfoPotential=List[(base.VariableSet,List[Double],Double,List[Double],List[Double],Double,Long,Long)]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "bnet\/Bnet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "bnet\/Bnet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "bnet\/Bnet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "bnet\/Bnet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "bnet\/Bnet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "bnet\/Bnet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "bnet\/Bnet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "bnet\/Bnet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "bnet\/Bnet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "bnet\/Bnet$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "bnet\/Bnet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "bnet\/Bnet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "bnet\/Bnet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "bnet\/Bnet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "bnet\/Bnet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "bnet\/Bnet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "bnet\/Bnet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "bnet\/Bnet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "bnet\/Bnet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "bnet\/Bnet.html", "kind" : "class"}], "experiments.variableElimination" : [{"name" : "experiments.variableElimination.VariableEliminationBenchmarkNets", "shortDescription" : "", "object" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html", "members_object" : [{"label" : "measure", "tail" : "", "member" : "org.scalameter.DSL.measure", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#measure", "kind" : "object"}, {"label" : "performance", "tail" : "", "member" : "org.scalameter.DSL.performance", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#performance", "kind" : "object"}, {"label" : "Using", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Using", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#Using[T<:<?>]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Scope", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Scope", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#ScopeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.main", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "composeTableFinal", "tail" : "(): String", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.composeTableFinal", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#composeTableFinal():String", "kind" : "def"}, {"label" : "composeLineForNet", "tail" : "(net: String): String", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.composeLineForNet", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#composeLineForNet(net:String):String", "kind" : "def"}, {"label" : "composeHeader", "tail" : "(): String", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.composeHeader", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#composeHeader():String", "kind" : "def"}, {"label" : "generatePaperLatexTable", "tail" : "(): Unit", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.generatePaperLatexTable", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#generatePaperLatexTable:Unit", "kind" : "def"}, {"label" : "analyzeNet", "tail" : "(netName: String, extension: String, numberVariables: Int): Unit", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.analyzeNet", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#analyzeNet(netName:String,extension:String,numberVariables:Int):Unit", "kind" : "def"}, {"label" : "measureTime", "tail" : "(engine: VariableElimination, indexSet: List[Int]): Double", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.measureTime", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#measureTime(engine:inference.VariableElimination,indexSet:List[Int]):Double", "kind" : "def"}, {"label" : "prepareVariableIndexes", "tail" : "(bnet: Bnet, counter: Int): List[Int]", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.prepareVariableIndexes", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#prepareVariableIndexes(bnet:bnet.Bnet,counter:Int):List[Int]", "kind" : "def"}, {"label" : "singleAnalysis", "tail" : "(netname: String, extension: String, numberVariables: Int): Unit", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.singleAnalysis", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#singleAnalysis(netname:String,extension:String,numberVariables:Int):Unit", "kind" : "def"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.standardConfig", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "variableIndexes", "tail" : ": HashMap[String, Int]", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.variableIndexes", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#variableIndexes:scala.collection.mutable.HashMap[String,Int]", "kind" : "val"}, {"label" : "times", "tail" : ": HashMap[String, HashMap[potential.ValueStoreTypes.Value, Double]]", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.times", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#times:scala.collection.mutable.HashMap[String,scala.collection.mutable.HashMap[potential.ValueStoreTypes.Value,Double]]", "kind" : "val"}, {"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.variableElimination.VariableEliminationBenchmarkNets.representations", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "measurer", "tail" : "(): Measurer[Double]", "member" : "org.scalameter.Bench.ForkedTime.measurer", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#measurer:org.scalameter.Measurer[Double]", "kind" : "def"}, {"label" : "aggregator", "tail" : "(): Aggregator[Double]", "member" : "org.scalameter.Bench.ForkedTime.aggregator", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#aggregator:org.scalameter.Aggregator[Double]", "kind" : "def"}, {"label" : "reporter", "tail" : "(): Reporter[Double]", "member" : "org.scalameter.Bench.Forked.reporter", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#reporter:org.scalameter.Reporter[U]", "kind" : "def"}, {"label" : "persistor", "tail" : "(): Persistor", "member" : "org.scalameter.Bench.Forked.persistor", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#persistor:org.scalameter.Persistor", "kind" : "def"}, {"label" : "executor", "tail" : "(): Executor[Double]", "member" : "org.scalameter.Bench.Forked.executor", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#executor:org.scalameter.Executor[U]", "kind" : "def"}, {"label" : "warmer", "tail" : "(): Warmer", "member" : "org.scalameter.Bench.Forked.warmer", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#warmer:org.scalameter.Warmer", "kind" : "def"}, {"label" : "include", "tail" : "(arg0: ClassTag[T]): Unit", "member" : "org.scalameter.DSL.include", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#include[T<:org.scalameter.BasePerformanceTest[_]](implicitevidence$1:scala.reflect.ClassTag[T]):Unit", "kind" : "def"}, {"label" : "using", "tail" : "(gen: Gen[T]): Using[T]", "member" : "org.scalameter.DSL.using", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#using[T](gen:org.scalameter.Gen[T]):DSL.this.Using[T]", "kind" : "def"}, {"label" : "executeTests", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.executeTests", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#executeTests():Boolean", "kind" : "def"}, {"label" : "rebuildSetupZipper", "tail" : "(): Unit", "member" : "org.scalameter.BasePerformanceTest.rebuildSetupZipper", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#rebuildSetupZipper():Unit", "kind" : "def"}, {"label" : "defaultConfig", "tail" : "(): Context", "member" : "org.scalameter.BasePerformanceTest.defaultConfig", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#defaultConfig:org.scalameter.Context", "kind" : "def"}, {"label" : "isModule", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.isModule", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#isModule:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/variableElimination\/VariableEliminationBenchmarkNets$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "org.scalameter.BasePerformanceTest.SameType", "error" : "unsupported entity"}], "kind" : "object"}], "experiments.statistics" : [{"name" : "experiments.statistics.ExecutionStatistics", "shortDescription" : "Class for storing statistics information about theexecution of an inference algorithm with graphicalmodels", "members_class" : [{"label" : "showVarRepInfo", "tail" : "(variable: Variable): String", "member" : "experiments.statistics.ExecutionStatistics.showVarRepInfo", "link" : "experiments\/statistics\/ExecutionStatistics.html#showVarRepInfo(variable:base.Variable):String", "kind" : "def"}, {"label" : "showVarsInfo", "tail" : "(): String", "member" : "experiments.statistics.ExecutionStatistics.showVarsInfo", "link" : "experiments\/statistics\/ExecutionStatistics.html#showVarsInfo:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "experiments.statistics.ExecutionStatistics.toString", "link" : "experiments\/statistics\/ExecutionStatistics.html#toString():String", "kind" : "def"}, {"label" : "stopFetcher", "tail" : "(): Unit", "member" : "experiments.statistics.ExecutionStatistics.stopFetcher", "link" : "experiments\/statistics\/ExecutionStatistics.html#stopFetcher:Unit", "kind" : "def"}, {"label" : "getNumberSamples", "tail" : "(): Long", "member" : "experiments.statistics.ExecutionStatistics.getNumberSamples", "link" : "experiments\/statistics\/ExecutionStatistics.html#getNumberSamples:Long", "kind" : "def"}, {"label" : "getAvgMemSize", "tail" : "(): Double", "member" : "experiments.statistics.ExecutionStatistics.getAvgMemSize", "link" : "experiments\/statistics\/ExecutionStatistics.html#getAvgMemSize:Double", "kind" : "def"}, {"label" : "getMaxMemSize", "tail" : "(): Double", "member" : "experiments.statistics.ExecutionStatistics.getMaxMemSize", "link" : "experiments\/statistics\/ExecutionStatistics.html#getMaxMemSize:Double", "kind" : "def"}, {"label" : "getCacheInfo", "tail" : "(potential: Potential, storeType: ValueStoreType): Long", "member" : "experiments.statistics.ExecutionStatistics.getCacheInfo", "link" : "experiments\/statistics\/ExecutionStatistics.html#getCacheInfo(potential:potential.Potential,storeType:potential.ValueStoreTypes.ValueStoreType):Long", "kind" : "def"}, {"label" : "showPotentialSizes", "tail" : "(): Unit", "member" : "experiments.statistics.ExecutionStatistics.showPotentialSizes", "link" : "experiments\/statistics\/ExecutionStatistics.html#showPotentialSizes:Unit", "kind" : "def"}, {"label" : "getMemorySample", "tail" : "(): Unit", "member" : "experiments.statistics.ExecutionStatistics.getMemorySample", "link" : "experiments\/statistics\/ExecutionStatistics.html#getMemorySample:Unit", "kind" : "def"}, {"label" : "getMaxPotSizes", "tail" : "(): Map[ValueStoreType, Long]", "member" : "experiments.statistics.ExecutionStatistics.getMaxPotSizes", "link" : "experiments\/statistics\/ExecutionStatistics.html#getMaxPotSizes:Map[potential.ValueStoreTypes.ValueStoreType,Long]", "kind" : "def"}, {"label" : "storeSizeMeasure", "tail" : "(variable: Variable, storeType: ValueStoreType): Unit", "member" : "experiments.statistics.ExecutionStatistics.storeSizeMeasure", "link" : "experiments\/statistics\/ExecutionStatistics.html#storeSizeMeasure(variable:base.Variable,storeType:potential.ValueStoreTypes.ValueStoreType):Unit", "kind" : "def"}, {"label" : "addMeasureForRepresentation", "tail" : "(potential: Potential, storeType: ValueStoreType): Unit", "member" : "experiments.statistics.ExecutionStatistics.addMeasureForRepresentation", "link" : "experiments\/statistics\/ExecutionStatistics.html#addMeasureForRepresentation(potential:potential.Potential,storeType:potential.ValueStoreTypes.ValueStoreType):Unit", "kind" : "def"}, {"label" : "addPotentialInfo", "tail" : "(potential: Potential, storeType: ValueStoreType, size: Long): Unit", "member" : "experiments.statistics.ExecutionStatistics.addPotentialInfo", "link" : "experiments\/statistics\/ExecutionStatistics.html#addPotentialInfo(potential:potential.Potential,storeType:potential.ValueStoreTypes.ValueStoreType,size:Long):Unit", "kind" : "def"}, {"label" : "addAvailablePotential", "tail" : "(potential: Potential): Unit", "member" : "experiments.statistics.ExecutionStatistics.addAvailablePotential", "link" : "experiments\/statistics\/ExecutionStatistics.html#addAvailablePotential(potential:potential.Potential):Unit", "kind" : "def"}, {"label" : "removeAvailablePotential", "tail" : "(potential: Potential): Unit", "member" : "experiments.statistics.ExecutionStatistics.removeAvailablePotential", "link" : "experiments\/statistics\/ExecutionStatistics.html#removeAvailablePotential(potential:potential.Potential):Unit", "kind" : "def"}, {"label" : "resetAvailablePotentials", "tail" : "(potentials: List[Potential], storeType: ValueStoreType): Unit", "member" : "experiments.statistics.ExecutionStatistics.resetAvailablePotentials", "link" : "experiments\/statistics\/ExecutionStatistics.html#resetAvailablePotentials(potentials:List[potential.Potential],storeType:potential.ValueStoreTypes.ValueStoreType):Unit", "kind" : "def"}, {"label" : "checks", "tail" : ": Int", "member" : "experiments.statistics.ExecutionStatistics.checks", "link" : "experiments\/statistics\/ExecutionStatistics.html#checks:Int", "kind" : "var"}, {"label" : "hits", "tail" : ": Int", "member" : "experiments.statistics.ExecutionStatistics.hits", "link" : "experiments\/statistics\/ExecutionStatistics.html#hits:Int", "kind" : "var"}, {"label" : "fetcher", "tail" : ": Fetcher", "member" : "experiments.statistics.ExecutionStatistics.fetcher", "link" : "experiments\/statistics\/ExecutionStatistics.html#fetcher:experiments.statistics.Fetcher", "kind" : "val"}, {"label" : "samples", "tail" : ": Long", "member" : "experiments.statistics.ExecutionStatistics.samples", "link" : "experiments\/statistics\/ExecutionStatistics.html#samples:Long", "kind" : "var"}, {"label" : "avgSystemMemory", "tail" : ": Double", "member" : "experiments.statistics.ExecutionStatistics.avgSystemMemory", "link" : "experiments\/statistics\/ExecutionStatistics.html#avgSystemMemory:Double", "kind" : "var"}, {"label" : "maxSystemMemory", "tail" : ": Double", "member" : "experiments.statistics.ExecutionStatistics.maxSystemMemory", "link" : "experiments\/statistics\/ExecutionStatistics.html#maxSystemMemory:Double", "kind" : "var"}, {"label" : "cacheSizes", "tail" : ": Map[VariableSet, Map[ValueStoreType, Long]]", "member" : "experiments.statistics.ExecutionStatistics.cacheSizes", "link" : "experiments\/statistics\/ExecutionStatistics.html#cacheSizes:scala.collection.mutable.Map[base.VariableSet,scala.collection.mutable.Map[potential.ValueStoreTypes.ValueStoreType,Long]]", "kind" : "val"}, {"label" : "availablePotentials", "tail" : ": Map[Potential, Map[ValueStoreType, Long]]", "member" : "experiments.statistics.ExecutionStatistics.availablePotentials", "link" : "experiments\/statistics\/ExecutionStatistics.html#availablePotentials:scala.collection.mutable.Map[potential.Potential,scala.collection.mutable.Map[potential.ValueStoreTypes.ValueStoreType,Long]]", "kind" : "val"}, {"label" : "potSizes", "tail" : ": Map[Variable, Map[ValueStoreType, ArrayBuffer[Long]]]", "member" : "experiments.statistics.ExecutionStatistics.potSizes", "link" : "experiments\/statistics\/ExecutionStatistics.html#potSizes:scala.collection.mutable.Map[base.Variable,scala.collection.mutable.Map[potential.ValueStoreTypes.ValueStoreType,scala.collection.mutable.ArrayBuffer[Long]]]", "kind" : "val"}, {"member" : "experiments.statistics.ExecutionStatistics#<init>", "error" : "unsupported entity"}, {"label" : "baseType", "tail" : ": ValueStoreType", "member" : "experiments.statistics.ExecutionStatistics.baseType", "link" : "experiments\/statistics\/ExecutionStatistics.html#baseType:potential.ValueStoreTypes.ValueStoreType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/statistics\/ExecutionStatistics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/statistics\/ExecutionStatistics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/statistics\/ExecutionStatistics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/statistics\/ExecutionStatistics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/statistics\/ExecutionStatistics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/statistics\/ExecutionStatistics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/statistics\/ExecutionStatistics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/statistics\/ExecutionStatistics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/statistics\/ExecutionStatistics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/statistics\/ExecutionStatistics.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/statistics\/ExecutionStatistics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/statistics\/ExecutionStatistics.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/statistics\/ExecutionStatistics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/statistics\/ExecutionStatistics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/statistics\/ExecutionStatistics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/statistics\/ExecutionStatistics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/statistics\/ExecutionStatistics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/statistics\/ExecutionStatistics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "experiments\/statistics\/ExecutionStatistics.html", "kind" : "class"}, {"name" : "experiments.statistics.Fetcher", "shortDescription" : "Class for performing memory measures from timeto time", "members_class" : [{"label" : "finish", "tail" : "(): Unit", "member" : "experiments.statistics.Fetcher.finish", "link" : "experiments\/statistics\/Fetcher.html#finish:Unit", "kind" : "def"}, {"label" : "run", "tail" : "(): Unit", "member" : "experiments.statistics.Fetcher.run", "link" : "experiments\/statistics\/Fetcher.html#run():Unit", "kind" : "def"}, {"label" : "terminated", "tail" : ": Boolean", "member" : "experiments.statistics.Fetcher.terminated", "link" : "experiments\/statistics\/Fetcher.html#terminated:Boolean", "kind" : "var"}, {"member" : "experiments.statistics.Fetcher#<init>", "error" : "unsupported entity"}, {"label" : "stats", "tail" : ": ExecutionStatistics", "member" : "experiments.statistics.Fetcher.stats", "link" : "experiments\/statistics\/Fetcher.html#stats:experiments.statistics.ExecutionStatistics", "kind" : "val"}, {"label" : "setUncaughtExceptionHandler", "tail" : "(arg0: UncaughtExceptionHandler): Unit", "member" : "java.lang.Thread.setUncaughtExceptionHandler", "link" : "experiments\/statistics\/Fetcher.html#setUncaughtExceptionHandler(x$1:java.lang.Thread.UncaughtExceptionHandler):Unit", "kind" : "def"}, {"label" : "getUncaughtExceptionHandler", "tail" : "(): UncaughtExceptionHandler", "member" : "java.lang.Thread.getUncaughtExceptionHandler", "link" : "experiments\/statistics\/Fetcher.html#getUncaughtExceptionHandler():java.lang.Thread.UncaughtExceptionHandler", "kind" : "def"}, {"label" : "getState", "tail" : "(): State", "member" : "java.lang.Thread.getState", "link" : "experiments\/statistics\/Fetcher.html#getState():java.lang.Thread.State", "kind" : "def"}, {"label" : "getId", "tail" : "(): Long", "member" : "java.lang.Thread.getId", "link" : "experiments\/statistics\/Fetcher.html#getId():Long", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Thread.getStackTrace", "link" : "experiments\/statistics\/Fetcher.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "setContextClassLoader", "tail" : "(arg0: ClassLoader): Unit", "member" : "java.lang.Thread.setContextClassLoader", "link" : "experiments\/statistics\/Fetcher.html#setContextClassLoader(x$1:ClassLoader):Unit", "kind" : "def"}, {"label" : "getContextClassLoader", "tail" : "(): ClassLoader", "member" : "java.lang.Thread.getContextClassLoader", "link" : "experiments\/statistics\/Fetcher.html#getContextClassLoader():ClassLoader", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Thread.toString", "link" : "experiments\/statistics\/Fetcher.html#toString():String", "kind" : "def"}, {"label" : "checkAccess", "tail" : "(): Unit", "member" : "java.lang.Thread.checkAccess", "link" : "experiments\/statistics\/Fetcher.html#checkAccess():Unit", "kind" : "final def"}, {"label" : "isDaemon", "tail" : "(): Boolean", "member" : "java.lang.Thread.isDaemon", "link" : "experiments\/statistics\/Fetcher.html#isDaemon():Boolean", "kind" : "final def"}, {"label" : "setDaemon", "tail" : "(arg0: Boolean): Unit", "member" : "java.lang.Thread.setDaemon", "link" : "experiments\/statistics\/Fetcher.html#setDaemon(x$1:Boolean):Unit", "kind" : "final def"}, {"label" : "join", "tail" : "(): Unit", "member" : "java.lang.Thread.join", "link" : "experiments\/statistics\/Fetcher.html#join():Unit", "kind" : "final def"}, {"label" : "join", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "java.lang.Thread.join", "link" : "experiments\/statistics\/Fetcher.html#join(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "join", "tail" : "(arg0: Long): Unit", "member" : "java.lang.Thread.join", "link" : "experiments\/statistics\/Fetcher.html#join(x$1:Long):Unit", "kind" : "final def"}, {"label" : "countStackFrames", "tail" : "(): Int", "member" : "java.lang.Thread.countStackFrames", "link" : "experiments\/statistics\/Fetcher.html#countStackFrames():Int", "kind" : "def"}, {"label" : "getThreadGroup", "tail" : "(): ThreadGroup", "member" : "java.lang.Thread.getThreadGroup", "link" : "experiments\/statistics\/Fetcher.html#getThreadGroup():ThreadGroup", "kind" : "final def"}, {"label" : "getName", "tail" : "(): String", "member" : "java.lang.Thread.getName", "link" : "experiments\/statistics\/Fetcher.html#getName():String", "kind" : "final def"}, {"label" : "setName", "tail" : "(arg0: String): Unit", "member" : "java.lang.Thread.setName", "link" : "experiments\/statistics\/Fetcher.html#setName(x$1:String):Unit", "kind" : "final def"}, {"label" : "getPriority", "tail" : "(): Int", "member" : "java.lang.Thread.getPriority", "link" : "experiments\/statistics\/Fetcher.html#getPriority():Int", "kind" : "final def"}, {"label" : "setPriority", "tail" : "(arg0: Int): Unit", "member" : "java.lang.Thread.setPriority", "link" : "experiments\/statistics\/Fetcher.html#setPriority(x$1:Int):Unit", "kind" : "final def"}, {"label" : "resume", "tail" : "(): Unit", "member" : "java.lang.Thread.resume", "link" : "experiments\/statistics\/Fetcher.html#resume():Unit", "kind" : "final def"}, {"label" : "suspend", "tail" : "(): Unit", "member" : "java.lang.Thread.suspend", "link" : "experiments\/statistics\/Fetcher.html#suspend():Unit", "kind" : "final def"}, {"label" : "isAlive", "tail" : "(): Boolean", "member" : "java.lang.Thread.isAlive", "link" : "experiments\/statistics\/Fetcher.html#isAlive():Boolean", "kind" : "final def"}, {"label" : "isInterrupted", "tail" : "(): Boolean", "member" : "java.lang.Thread.isInterrupted", "link" : "experiments\/statistics\/Fetcher.html#isInterrupted():Boolean", "kind" : "def"}, {"label" : "interrupt", "tail" : "(): Unit", "member" : "java.lang.Thread.interrupt", "link" : "experiments\/statistics\/Fetcher.html#interrupt():Unit", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "java.lang.Thread.stop", "link" : "experiments\/statistics\/Fetcher.html#stop():Unit", "kind" : "final def"}, {"label" : "start", "tail" : "(): Unit", "member" : "java.lang.Thread.start", "link" : "experiments\/statistics\/Fetcher.html#start():Unit", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Thread.clone", "link" : "experiments\/statistics\/Fetcher.html#clone():Object", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/statistics\/Fetcher.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/statistics\/Fetcher.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/statistics\/Fetcher.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/statistics\/Fetcher.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/statistics\/Fetcher.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/statistics\/Fetcher.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/statistics\/Fetcher.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/statistics\/Fetcher.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/statistics\/Fetcher.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/statistics\/Fetcher.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/statistics\/Fetcher.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/statistics\/Fetcher.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/statistics\/Fetcher.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/statistics\/Fetcher.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/statistics\/Fetcher.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/statistics\/Fetcher.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/statistics\/Fetcher.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "experiments\/statistics\/Fetcher.html", "kind" : "class"}], "utils" : [{"name" : "utils.DataSizes", "shortDescription" : "Object for storing data sizes used for memory sizeestimation", "object" : "utils\/DataSizes$.html", "members_object" : [{"label" : "stringSize", "tail" : "(string: String): Int", "member" : "utils.DataSizes.stringSize", "link" : "utils\/DataSizes$.html#stringSize(string:String):Int", "kind" : "final def"}, {"label" : "MAP", "tail" : ": Int", "member" : "utils.DataSizes.MAP", "link" : "utils\/DataSizes$.html#MAP:Int", "kind" : "final val"}, {"label" : "SET", "tail" : ": Int", "member" : "utils.DataSizes.SET", "link" : "utils\/DataSizes$.html#SET:Int", "kind" : "final val"}, {"label" : "ARRAY", "tail" : ": Int", "member" : "utils.DataSizes.ARRAY", "link" : "utils\/DataSizes$.html#ARRAY:Int", "kind" : "final val"}, {"label" : "VARIABLE", "tail" : ": Int(50)", "member" : "utils.DataSizes.VARIABLE", "link" : "utils\/DataSizes$.html#VARIABLE:Int(50)", "kind" : "final val"}, {"label" : "REFERENCE", "tail" : ": Int(8)", "member" : "utils.DataSizes.REFERENCE", "link" : "utils\/DataSizes$.html#REFERENCE:Int(8)", "kind" : "final val"}, {"label" : "DOUBLE", "tail" : ": Int(8)", "member" : "utils.DataSizes.DOUBLE", "link" : "utils\/DataSizes$.html#DOUBLE:Int(8)", "kind" : "final val"}, {"label" : "FLOAT", "tail" : ": Int(4)", "member" : "utils.DataSizes.FLOAT", "link" : "utils\/DataSizes$.html#FLOAT:Int(4)", "kind" : "final val"}, {"label" : "LONG", "tail" : ": Int(4)", "member" : "utils.DataSizes.LONG", "link" : "utils\/DataSizes$.html#LONG:Int(4)", "kind" : "final val"}, {"label" : "INT", "tail" : ": Int(4)", "member" : "utils.DataSizes.INT", "link" : "utils\/DataSizes$.html#INT:Int(4)", "kind" : "final val"}, {"label" : "CHAR", "tail" : ": Int(2)", "member" : "utils.DataSizes.CHAR", "link" : "utils\/DataSizes$.html#CHAR:Int(2)", "kind" : "final val"}, {"label" : "SHORT", "tail" : ": Int(2)", "member" : "utils.DataSizes.SHORT", "link" : "utils\/DataSizes$.html#SHORT:Int(2)", "kind" : "final val"}, {"label" : "BYTE", "tail" : ": Int(1)", "member" : "utils.DataSizes.BYTE", "link" : "utils\/DataSizes$.html#BYTE:Int(1)", "kind" : "final val"}, {"label" : "BOOLEAN", "tail" : ": Int(1)", "member" : "utils.DataSizes.BOOLEAN", "link" : "utils\/DataSizes$.html#BOOLEAN:Int(1)", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "utils\/DataSizes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "utils\/DataSizes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "utils\/DataSizes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "utils\/DataSizes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "utils\/DataSizes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "utils\/DataSizes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "utils\/DataSizes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/DataSizes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/DataSizes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/DataSizes$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "utils\/DataSizes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "utils\/DataSizes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "utils\/DataSizes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "utils\/DataSizes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "utils\/DataSizes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "utils\/DataSizes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "utils\/DataSizes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "utils\/DataSizes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "utils\/DataSizes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "utils.PerformanceStats", "shortDescription" : "Object for storing information about the executionof the software", "object" : "utils\/PerformanceStats$.html", "members_object" : [{"label" : "resetVariables", "tail" : "(): Unit", "member" : "utils.PerformanceStats.resetVariables", "link" : "utils\/PerformanceStats$.html#resetVariables:Unit", "kind" : "def"}, {"label" : "printInfoCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.printInfoCalls", "link" : "utils\/PerformanceStats$.html#printInfoCalls:Unit", "kind" : "def"}, {"label" : "addNormalizeTime", "tail" : "(time: Double): Unit", "member" : "utils.PerformanceStats.addNormalizeTime", "link" : "utils\/PerformanceStats$.html#addNormalizeTime(time:Double):Unit", "kind" : "def"}, {"label" : "addNormalizeCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.addNormalizeCalls", "link" : "utils\/PerformanceStats$.html#addNormalizeCalls:Unit", "kind" : "def"}, {"label" : "addMarginalizeTime", "tail" : "(time: Double): Unit", "member" : "utils.PerformanceStats.addMarginalizeTime", "link" : "utils\/PerformanceStats$.html#addMarginalizeTime(time:Double):Unit", "kind" : "def"}, {"label" : "addMarginalizeCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.addMarginalizeCalls", "link" : "utils\/PerformanceStats$.html#addMarginalizeCalls:Unit", "kind" : "def"}, {"label" : "addCombineTime", "tail" : "(time: Double): Unit", "member" : "utils.PerformanceStats.addCombineTime", "link" : "utils\/PerformanceStats$.html#addCombineTime(time:Double):Unit", "kind" : "def"}, {"label" : "addCombineCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.addCombineCalls", "link" : "utils\/PerformanceStats$.html#addCombineCalls:Unit", "kind" : "def"}, {"label" : "addGetIndicesForValueTime", "tail" : "(time: Double): Unit", "member" : "utils.PerformanceStats.addGetIndicesForValueTime", "link" : "utils\/PerformanceStats$.html#addGetIndicesForValueTime(time:Double):Unit", "kind" : "def"}, {"label" : "addGetIndicesForValueCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.addGetIndicesForValueCalls", "link" : "utils\/PerformanceStats$.html#addGetIndicesForValueCalls:Unit", "kind" : "def"}, {"label" : "addGetDifferentValuesTime", "tail" : "(time: Double): Unit", "member" : "utils.PerformanceStats.addGetDifferentValuesTime", "link" : "utils\/PerformanceStats$.html#addGetDifferentValuesTime(time:Double):Unit", "kind" : "def"}, {"label" : "addGetDifferentValuesCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.addGetDifferentValuesCalls", "link" : "utils\/PerformanceStats$.html#addGetDifferentValuesCalls:Unit", "kind" : "def"}, {"label" : "addGetListValuesTime", "tail" : "(time: Double): Unit", "member" : "utils.PerformanceStats.addGetListValuesTime", "link" : "utils\/PerformanceStats$.html#addGetListValuesTime(time:Double):Unit", "kind" : "def"}, {"label" : "addGetListValueCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.addGetListValueCalls", "link" : "utils\/PerformanceStats$.html#addGetListValueCalls:Unit", "kind" : "def"}, {"label" : "addAddValueTime", "tail" : "(time: Double): Unit", "member" : "utils.PerformanceStats.addAddValueTime", "link" : "utils\/PerformanceStats$.html#addAddValueTime(time:Double):Unit", "kind" : "def"}, {"label" : "addAddValueCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.addAddValueCalls", "link" : "utils\/PerformanceStats$.html#addAddValueCalls:Unit", "kind" : "def"}, {"label" : "addGetValueTime", "tail" : "(time: Double): Unit", "member" : "utils.PerformanceStats.addGetValueTime", "link" : "utils\/PerformanceStats$.html#addGetValueTime(time:Double):Unit", "kind" : "def"}, {"label" : "addGetValueCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.addGetValueCalls", "link" : "utils\/PerformanceStats$.html#addGetValueCalls:Unit", "kind" : "def"}, {"label" : "addGetVariablesTime", "tail" : "(time: Double): Unit", "member" : "utils.PerformanceStats.addGetVariablesTime", "link" : "utils\/PerformanceStats$.html#addGetVariablesTime(time:Double):Unit", "kind" : "def"}, {"label" : "addGetVariablesCalls", "tail" : "(): Unit", "member" : "utils.PerformanceStats.addGetVariablesCalls", "link" : "utils\/PerformanceStats$.html#addGetVariablesCalls:Unit", "kind" : "def"}, {"label" : "normalizeTime", "tail" : ": Double", "member" : "utils.PerformanceStats.normalizeTime", "link" : "utils\/PerformanceStats$.html#normalizeTime:Double", "kind" : "var"}, {"label" : "normalizeCalls", "tail" : ": Int", "member" : "utils.PerformanceStats.normalizeCalls", "link" : "utils\/PerformanceStats$.html#normalizeCalls:Int", "kind" : "var"}, {"label" : "marginalizeTime", "tail" : ": Double", "member" : "utils.PerformanceStats.marginalizeTime", "link" : "utils\/PerformanceStats$.html#marginalizeTime:Double", "kind" : "var"}, {"label" : "marginalizeCalls", "tail" : ": Int", "member" : "utils.PerformanceStats.marginalizeCalls", "link" : "utils\/PerformanceStats$.html#marginalizeCalls:Int", "kind" : "var"}, {"label" : "combineTime", "tail" : ": Double", "member" : "utils.PerformanceStats.combineTime", "link" : "utils\/PerformanceStats$.html#combineTime:Double", "kind" : "var"}, {"label" : "combineCalls", "tail" : ": Int", "member" : "utils.PerformanceStats.combineCalls", "link" : "utils\/PerformanceStats$.html#combineCalls:Int", "kind" : "var"}, {"label" : "getIndicesForValueTime", "tail" : ": Double", "member" : "utils.PerformanceStats.getIndicesForValueTime", "link" : "utils\/PerformanceStats$.html#getIndicesForValueTime:Double", "kind" : "var"}, {"label" : "getIndicesForValueCalls", "tail" : ": Int", "member" : "utils.PerformanceStats.getIndicesForValueCalls", "link" : "utils\/PerformanceStats$.html#getIndicesForValueCalls:Int", "kind" : "var"}, {"label" : "getDifferentValuesTime", "tail" : ": Double", "member" : "utils.PerformanceStats.getDifferentValuesTime", "link" : "utils\/PerformanceStats$.html#getDifferentValuesTime:Double", "kind" : "var"}, {"label" : "getDifferentValuesCalls", "tail" : ": Int", "member" : "utils.PerformanceStats.getDifferentValuesCalls", "link" : "utils\/PerformanceStats$.html#getDifferentValuesCalls:Int", "kind" : "var"}, {"label" : "getListValuesTime", "tail" : ": Double", "member" : "utils.PerformanceStats.getListValuesTime", "link" : "utils\/PerformanceStats$.html#getListValuesTime:Double", "kind" : "var"}, {"label" : "getListValuesCalls", "tail" : ": Int", "member" : "utils.PerformanceStats.getListValuesCalls", "link" : "utils\/PerformanceStats$.html#getListValuesCalls:Int", "kind" : "var"}, {"label" : "addValueTime", "tail" : ": Double", "member" : "utils.PerformanceStats.addValueTime", "link" : "utils\/PerformanceStats$.html#addValueTime:Double", "kind" : "var"}, {"label" : "addValueCalls", "tail" : ": Int", "member" : "utils.PerformanceStats.addValueCalls", "link" : "utils\/PerformanceStats$.html#addValueCalls:Int", "kind" : "var"}, {"label" : "getValueTime", "tail" : ": Double", "member" : "utils.PerformanceStats.getValueTime", "link" : "utils\/PerformanceStats$.html#getValueTime:Double", "kind" : "var"}, {"label" : "getValueCalls", "tail" : ": Int", "member" : "utils.PerformanceStats.getValueCalls", "link" : "utils\/PerformanceStats$.html#getValueCalls:Int", "kind" : "var"}, {"label" : "getVariablesTime", "tail" : ": Double", "member" : "utils.PerformanceStats.getVariablesTime", "link" : "utils\/PerformanceStats$.html#getVariablesTime:Double", "kind" : "var"}, {"label" : "getVariablesCalls", "tail" : ": Int", "member" : "utils.PerformanceStats.getVariablesCalls", "link" : "utils\/PerformanceStats$.html#getVariablesCalls:Int", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "utils\/PerformanceStats$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "utils\/PerformanceStats$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "utils\/PerformanceStats$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "utils\/PerformanceStats$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "utils\/PerformanceStats$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "utils\/PerformanceStats$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "utils\/PerformanceStats$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/PerformanceStats$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/PerformanceStats$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/PerformanceStats$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "utils\/PerformanceStats$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "utils\/PerformanceStats$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "utils\/PerformanceStats$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "utils\/PerformanceStats$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "utils\/PerformanceStats$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "utils\/PerformanceStats$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "utils\/PerformanceStats$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "utils\/PerformanceStats$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "utils\/PerformanceStats$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "utils.Serializator", "shortDescription" : "object ofeering functions for serialization and retrieval", "object" : "utils\/Serializator$.html", "members_object" : [{"label" : "readObject", "tail" : "(fileName: String): A", "member" : "utils.Serializator.readObject", "link" : "utils\/Serializator$.html#readObject[A](fileName:String):A", "kind" : "def"}, {"label" : "writeObject", "tail" : "(fileName: String, target: A): Unit", "member" : "utils.Serializator.writeObject", "link" : "utils\/Serializator$.html#writeObject[A](fileName:String,target:A):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "utils\/Serializator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "utils\/Serializator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "utils\/Serializator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "utils\/Serializator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "utils\/Serializator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "utils\/Serializator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "utils\/Serializator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/Serializator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/Serializator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/Serializator$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "utils\/Serializator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "utils\/Serializator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "utils\/Serializator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "utils\/Serializator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "utils\/Serializator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "utils\/Serializator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "utils\/Serializator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "utils\/Serializator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "utils\/Serializator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "utils.Tasks", "shortDescription" : "Object including methods for parallel task creation andexecution", "object" : "utils\/Tasks$.html", "members_object" : [{"label" : "parallel", "tail" : "(taskA: ⇒ A, taskB: ⇒ B, taskC: ⇒ C, taskD: ⇒ D): (A, B, C, D)", "member" : "utils.Tasks.parallel", "link" : "utils\/Tasks$.html#parallel[A,B,C,D](taskA:=>A,taskB:=>B,taskC:=>C,taskD:=>D):(A,B,C,D)", "kind" : "def"}, {"label" : "parallel", "tail" : "(taskA: ⇒ A, taskB: ⇒ B): (A, B)", "member" : "utils.Tasks.parallel", "link" : "utils\/Tasks$.html#parallel[A,B](taskA:=>A,taskB:=>B):(A,B)", "kind" : "def"}, {"label" : "task", "tail" : "(body: ⇒ T): ForkJoinTask[T]", "member" : "utils.Tasks.task", "link" : "utils\/Tasks$.html#task[T](body:=>T):java.util.concurrent.ForkJoinTask[T]", "kind" : "def"}, {"label" : "scheduler", "tail" : ": DynamicVariable[TaskScheduler]", "member" : "utils.Tasks.scheduler", "link" : "utils\/Tasks$.html#scheduler:scala.util.DynamicVariable[utils.Tasks.TaskScheduler]", "kind" : "val"}, {"label" : "DefaultTaskScheduler", "tail" : "", "member" : "utils.Tasks.DefaultTaskScheduler", "link" : "utils\/Tasks$.html#DefaultTaskSchedulerextendsTasks.TaskScheduler", "kind" : "class"}, {"label" : "TaskScheduler", "tail" : "", "member" : "utils.Tasks.TaskScheduler", "link" : "utils\/Tasks$.html#TaskSchedulerextendsAnyRef", "kind" : "abstract class"}, {"label" : "forkJoinPool", "tail" : ": ForkJoinPool", "member" : "utils.Tasks.forkJoinPool", "link" : "utils\/Tasks$.html#forkJoinPool:java.util.concurrent.ForkJoinPool", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "utils\/Tasks$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "utils\/Tasks$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "utils\/Tasks$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "utils\/Tasks$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "utils\/Tasks$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "utils\/Tasks$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "utils\/Tasks$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/Tasks$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/Tasks$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/Tasks$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "utils\/Tasks$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "utils\/Tasks$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "utils\/Tasks$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "utils\/Tasks$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "utils\/Tasks$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "utils\/Tasks$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "utils\/Tasks$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "utils\/Tasks$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "utils\/Tasks$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "utils.Util", "shortDescription" : "Object for utility methods", "object" : "utils\/Util$.html", "members_object" : [{"label" : "std", "tail" : "(a: Seq[Double]): Double", "member" : "utils.Util.std", "link" : "utils\/Util$.html#std(a:Seq[Double]):Double", "kind" : "def"}, {"label" : "mean", "tail" : "(a: Seq[Double]): Double", "member" : "utils.Util.mean", "link" : "utils\/Util$.html#mean(a:Seq[Double]):Double", "kind" : "def"}, {"label" : "makeCombinations", "tail" : "(list1: List[Long], list2: List[Long]): List[(Long, Long)]", "member" : "utils.Util.makeCombinations", "link" : "utils\/Util$.html#makeCombinations(list1:List[Long],list2:List[Long]):List[(Long,Long)]", "kind" : "def"}, {"label" : "makeTriplets", "tail" : "(list1: List[Double], list2: List[Double]): Map[Double, List[(Double, Double, Double)]]", "member" : "utils.Util.makeTriplets", "link" : "utils\/Util$.html#makeTriplets(list1:List[Double],list2:List[Double]):Map[Double,List[(Double,Double,Double)]]", "kind" : "def"}, {"label" : "getListOfFiles", "tail" : "(dir: String, ext: String): List[File]", "member" : "utils.Util.getListOfFiles", "link" : "utils\/Util$.html#getListOfFiles(dir:String,ext:String):List[java.io.File]", "kind" : "def"}, {"label" : "getOccurrencesCounter", "tail" : "(refValue: Double, values: Seq[Double]): Int", "member" : "utils.Util.getOccurrencesCounter", "link" : "utils\/Util$.html#getOccurrencesCounter(refValue:Double,values:Seq[Double]):Int", "kind" : "def"}, {"label" : "determineDefaultValue", "tail" : "(values: Seq[Double]): Double", "member" : "utils.Util.determineDefaultValue", "link" : "utils\/Util$.html#determineDefaultValue(values:Seq[Double]):Double", "kind" : "def"}, {"label" : "reduceSimilarValues", "tail" : "(valueList: List[Double]): List[Double]", "member" : "utils.Util.reduceSimilarValues", "link" : "utils\/Util$.html#reduceSimilarValues(valueList:List[Double]):List[Double]", "kind" : "def"}, {"label" : "nearZero", "tail" : "(x: Double): Boolean", "member" : "utils.Util.nearZero", "link" : "utils\/Util$.html#nearZero(x:Double):Boolean", "kind" : "def"}, {"label" : "roundNumber", "tail" : "(x: Double): Double", "member" : "utils.Util.roundNumber", "link" : "utils\/Util$.html#roundNumber(x:Double):Double", "kind" : "def"}, {"label" : "nearEqual", "tail" : "(x: Double, y: Double): Boolean", "member" : "utils.Util.nearEqual", "link" : "utils\/Util$.html#nearEqual(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "DEFAULTVALUE", "tail" : ": Double", "member" : "utils.Util.DEFAULTVALUE", "link" : "utils\/Util$.html#DEFAULTVALUE:Double", "kind" : "val"}, {"label" : "DECIMALS", "tail" : ": Int", "member" : "utils.Util.DECIMALS", "link" : "utils\/Util$.html#DECIMALS:Int", "kind" : "val"}, {"label" : "DIF", "tail" : ": Double", "member" : "utils.Util.DIF", "link" : "utils\/Util$.html#DIF:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "utils\/Util$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "utils\/Util$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "utils\/Util$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "utils\/Util$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "utils\/Util$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "utils\/Util$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "utils\/Util$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/Util$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/Util$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "utils\/Util$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "utils\/Util$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "utils\/Util$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "utils\/Util$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "utils\/Util$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "utils\/Util$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "utils\/Util$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "utils\/Util$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "utils\/Util$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "utils\/Util$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "potential.indexBased" : [{"name" : "potential.indexBased.IDMMStore", "shortDescription" : "Class for storing values as a value driven store withthe following structure: different values are storedin a mutable array; another array contains pairs withinformation about index of potential - index in arrayof values", "object" : "potential\/indexBased\/IDMMStore$.html", "members_object" : [{"label" : "marginalizeAlt4", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDMMStore.marginalizeAlt4", "link" : "potential\/indexBased\/IDMMStore$.html#marginalizeAlt4(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeAlt3", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDMMStore.marginalizeAlt3", "link" : "potential\/indexBased\/IDMMStore$.html#marginalizeAlt3(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeAlt2", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDMMStore.marginalizeAlt2", "link" : "potential\/indexBased\/IDMMStore$.html#marginalizeAlt2(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeAlt1", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDMMStore.marginalizeAlt1", "link" : "potential\/indexBased\/IDMMStore$.html#marginalizeAlt1(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDMMStore.marginalizeDefault", "link" : "potential\/indexBased\/IDMMStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt8", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDMMStore.combineAlt8", "link" : "potential\/indexBased\/IDMMStore$.html#combineAlt8(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt7", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDMMStore.combineAlt7", "link" : "potential\/indexBased\/IDMMStore$.html#combineAlt7(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt6", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDMMStore.combineAlt6", "link" : "potential\/indexBased\/IDMMStore$.html#combineAlt6(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt5", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDMMStore.combineAlt5", "link" : "potential\/indexBased\/IDMMStore$.html#combineAlt5(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt4", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDMMStore.combineAlt4", "link" : "potential\/indexBased\/IDMMStore$.html#combineAlt4(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt3", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDMMStore.combineAlt3", "link" : "potential\/indexBased\/IDMMStore$.html#combineAlt3(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt2", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDMMStore.combineAlt2", "link" : "potential\/indexBased\/IDMMStore$.html#combineAlt2(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt1", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDMMStore.combineAlt1", "link" : "potential\/indexBased\/IDMMStore$.html#combineAlt1(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDMMStore.combineDefault", "link" : "potential\/indexBased\/IDMMStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet): IDMMStore", "member" : "potential.indexBased.IDMMStore.apply", "link" : "potential\/indexBased\/IDMMStore$.html#apply(variables:base.VariableSet):potential.indexBased.IDMMStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): IDMMStore", "member" : "potential.indexBased.IDMMStore.apply", "link" : "potential\/indexBased\/IDMMStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.indexBased.IDMMStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDMMStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDMMStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDMMStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDMMStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDMMStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDMMStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDMMStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDMMStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDMMStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDMMStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDMMStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDMMStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDMMStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDMMStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDMMStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDMMStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDMMStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDMMStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDMMStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDMMStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDMMStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDMMStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/indexBased\/IDMMStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDMMStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/indexBased\/IDMMStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/indexBased\/IDMMStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDMMStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDMMStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDMMStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.indexBased.IDMMStore.getMemorySize", "link" : "potential\/indexBased\/IDMMStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.indexBased.IDMMStore.toString", "link" : "potential\/indexBased\/IDMMStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.indexBased.IDMMStore.getSize", "link" : "potential\/indexBased\/IDMMStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDMMStore.getValuesProportions", "link" : "potential\/indexBased\/IDMMStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.indexBased.IDMMStore.getZerosProportion", "link" : "potential\/indexBased\/IDMMStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.indexBased.IDMMStore.getIndices", "link" : "potential\/indexBased\/IDMMStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.indexBased.IDMMStore.getIndicesForValue", "link" : "potential\/indexBased\/IDMMStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDMMStore.getDifferentValues", "link" : "potential\/indexBased\/IDMMStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDMMStore.getListValues", "link" : "potential\/indexBased\/IDMMStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "addNonCheckValueForRepresentation", "tail" : "(value: Double, indexes: ArrayBuffer[Long]): IDMMStore", "member" : "potential.indexBased.IDMMStore.addNonCheckValueForRepresentation", "link" : "potential\/indexBased\/IDMMStore.html#addNonCheckValueForRepresentation(value:Double,indexes:scala.collection.mutable.ArrayBuffer[Long]):potential.indexBased.IDMMStore", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, indexes: ArrayBuffer[Long]): IDMMStore", "member" : "potential.indexBased.IDMMStore.addValueForRepresentation", "link" : "potential\/indexBased\/IDMMStore.html#addValueForRepresentation(value:Double,indexes:scala.collection.mutable.ArrayBuffer[Long]):potential.indexBased.IDMMStore", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): IDMMStore", "member" : "potential.indexBased.IDMMStore.addValueForRepresentation", "link" : "potential\/indexBased\/IDMMStore.html#addValueForRepresentation(value:Double,index:Long):potential.indexBased.IDMMStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.indexBased.IDMMStore.getValue", "link" : "potential\/indexBased\/IDMMStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.indexBased.IDMMStore.kind", "link" : "potential\/indexBased\/IDMMStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.indexBased.IDMMStore#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": ArrayBuffer[Double]", "member" : "potential.indexBased.IDMMStore.values", "link" : "potential\/indexBased\/IDMMStore.html#values:scala.collection.mutable.ArrayBuffer[Double]", "kind" : "val"}, {"label" : "indices", "tail" : ": Map[Long, Long]", "member" : "potential.indexBased.IDMMStore.indices", "link" : "potential\/indexBased\/IDMMStore.html#indices:scala.collection.mutable.Map[Long,Long]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.indexBased.IDMMStore.variables", "link" : "potential\/indexBased\/IDMMStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/indexBased\/IDMMStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/indexBased\/IDMMStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/indexBased\/IDMMStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/indexBased\/IDMMStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/indexBased\/IDMMStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/indexBased\/IDMMStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/indexBased\/IDMMStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/indexBased\/IDMMStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/indexBased\/IDMMStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDMMStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDMMStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDMMStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDMMStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDMMStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/indexBased\/IDMMStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDMMStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDMMStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDMMStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDMMStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDMMStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDMMStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDMMStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDMMStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDMMStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDMMStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDMMStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDMMStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDMMStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDMMStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDMMStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDMMStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDMMStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDMMStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDMMStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDMMStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDMMStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/indexBased\/IDMMStore.html", "kind" : "case class"}, {"name" : "potential.indexBased.IDPIStore", "shortDescription" : "Class for storing values as a value driven store withthe following structure: different values are storedin a immutable array; another array contains pairs withinformation about index of potential - index in arrayof values", "object" : "potential\/indexBased\/IDPIStore$.html", "members_object" : [{"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDPIStore.marginalizeDefault", "link" : "potential\/indexBased\/IDPIStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDPIStore.combineDefault", "link" : "potential\/indexBased\/IDPIStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): IDPIStore", "member" : "potential.indexBased.IDPIStore.apply", "link" : "potential\/indexBased\/IDPIStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.indexBased.IDPIStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDPIStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDPIStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDPIStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDPIStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDPIStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDPIStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDPIStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDPIStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDPIStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDPIStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDPIStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDPIStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDPIStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDPIStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDPIStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDPIStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDPIStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPIStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPIStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPIStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDPIStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDPIStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/indexBased\/IDPIStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDPIStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/indexBased\/IDPIStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/indexBased\/IDPIStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDPIStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDPIStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDPIStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.indexBased.IDPIStore.getMemorySize", "link" : "potential\/indexBased\/IDPIStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.indexBased.IDPIStore.toString", "link" : "potential\/indexBased\/IDPIStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.indexBased.IDPIStore.getSize", "link" : "potential\/indexBased\/IDPIStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDPIStore.getValuesProportions", "link" : "potential\/indexBased\/IDPIStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.indexBased.IDPIStore.getZerosProportion", "link" : "potential\/indexBased\/IDPIStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.indexBased.IDPIStore.getIndices", "link" : "potential\/indexBased\/IDPIStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.indexBased.IDPIStore.getIndicesForValue", "link" : "potential\/indexBased\/IDPIStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDPIStore.getListValues", "link" : "potential\/indexBased\/IDPIStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): IDPIStore", "member" : "potential.indexBased.IDPIStore.addValueForRepresentation", "link" : "potential\/indexBased\/IDPIStore.html#addValueForRepresentation(value:Double,index:Long):potential.indexBased.IDPIStore", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDPIStore.getDifferentValues", "link" : "potential\/indexBased\/IDPIStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.indexBased.IDPIStore.getValue", "link" : "potential\/indexBased\/IDPIStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.indexBased.IDPIStore.kind", "link" : "potential\/indexBased\/IDPIStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.indexBased.IDPIStore#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": Array[Double]", "member" : "potential.indexBased.IDPIStore.values", "link" : "potential\/indexBased\/IDPIStore.html#values:Array[Double]", "kind" : "val"}, {"label" : "indices", "tail" : ": Array[(Long, Long)]", "member" : "potential.indexBased.IDPIStore.indices", "link" : "potential\/indexBased\/IDPIStore.html#indices:Array[(Long,Long)]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.indexBased.IDPIStore.variables", "link" : "potential\/indexBased\/IDPIStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/indexBased\/IDPIStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/indexBased\/IDPIStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/indexBased\/IDPIStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/indexBased\/IDPIStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/indexBased\/IDPIStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/indexBased\/IDPIStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/indexBased\/IDPIStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/indexBased\/IDPIStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/indexBased\/IDPIStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDPIStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDPIStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDPIStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDPIStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDPIStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/indexBased\/IDPIStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDPIStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDPIStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDPIStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDPIStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDPIStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDPIStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDPIStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDPIStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDPIStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDPIStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDPIStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDPIStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPIStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPIStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPIStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDPIStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDPIStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDPIStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDPIStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDPIStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDPIStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/indexBased\/IDPIStore.html", "kind" : "case class"}, {"name" : "potential.indexBased.IDPMStore", "shortDescription" : "Class for storing values as a value driven store withthe following structure: different values are storedin a mutable array; another array contains pairs withinformation about index of potential - index in arrayof values", "object" : "potential\/indexBased\/IDPMStore$.html", "members_object" : [{"label" : "marginalizeAlt3", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDPMStore.marginalizeAlt3", "link" : "potential\/indexBased\/IDPMStore$.html#marginalizeAlt3(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeAlt2", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDPMStore.marginalizeAlt2", "link" : "potential\/indexBased\/IDPMStore$.html#marginalizeAlt2(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeAlt1", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDPMStore.marginalizeAlt1", "link" : "potential\/indexBased\/IDPMStore$.html#marginalizeAlt1(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDPMStore.marginalizeDefault", "link" : "potential\/indexBased\/IDPMStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt7", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDPMStore.combineAlt7", "link" : "potential\/indexBased\/IDPMStore$.html#combineAlt7(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt6", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDPMStore.combineAlt6", "link" : "potential\/indexBased\/IDPMStore$.html#combineAlt6(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt5", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDPMStore.combineAlt5", "link" : "potential\/indexBased\/IDPMStore$.html#combineAlt5(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt4", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDPMStore.combineAlt4", "link" : "potential\/indexBased\/IDPMStore$.html#combineAlt4(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt3", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDPMStore.combineAlt3", "link" : "potential\/indexBased\/IDPMStore$.html#combineAlt3(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt2", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDPMStore.combineAlt2", "link" : "potential\/indexBased\/IDPMStore$.html#combineAlt2(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt1", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDPMStore.combineAlt1", "link" : "potential\/indexBased\/IDPMStore$.html#combineAlt1(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDPMStore.combineDefault", "link" : "potential\/indexBased\/IDPMStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet): IDPMStore", "member" : "potential.indexBased.IDPMStore.apply", "link" : "potential\/indexBased\/IDPMStore$.html#apply(variables:base.VariableSet):potential.indexBased.IDPMStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): IDPMStore", "member" : "potential.indexBased.IDPMStore.apply", "link" : "potential\/indexBased\/IDPMStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.indexBased.IDPMStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDPMStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDPMStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDPMStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDPMStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDPMStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDPMStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDPMStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDPMStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDPMStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDPMStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDPMStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDPMStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDPMStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDPMStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDPMStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDPMStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDPMStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPMStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPMStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPMStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDPMStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDPMStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/indexBased\/IDPMStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDPMStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/indexBased\/IDPMStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/indexBased\/IDPMStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDPMStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDPMStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDPMStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.indexBased.IDPMStore.getMemorySize", "link" : "potential\/indexBased\/IDPMStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.indexBased.IDPMStore.toString", "link" : "potential\/indexBased\/IDPMStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.indexBased.IDPMStore.getSize", "link" : "potential\/indexBased\/IDPMStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDPMStore.getValuesProportions", "link" : "potential\/indexBased\/IDPMStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.indexBased.IDPMStore.getZerosProportion", "link" : "potential\/indexBased\/IDPMStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.indexBased.IDPMStore.getIndices", "link" : "potential\/indexBased\/IDPMStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.indexBased.IDPMStore.getIndicesForValue", "link" : "potential\/indexBased\/IDPMStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDPMStore.getDifferentValues", "link" : "potential\/indexBased\/IDPMStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDPMStore.getListValues", "link" : "potential\/indexBased\/IDPMStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "addNonCheckValueForRepresentation", "tail" : "(value: Double, indexes: ArrayBuffer[Long]): IDPMStore", "member" : "potential.indexBased.IDPMStore.addNonCheckValueForRepresentation", "link" : "potential\/indexBased\/IDPMStore.html#addNonCheckValueForRepresentation(value:Double,indexes:scala.collection.mutable.ArrayBuffer[Long]):potential.indexBased.IDPMStore", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, indexes: ArrayBuffer[Long]): IDPMStore", "member" : "potential.indexBased.IDPMStore.addValueForRepresentation", "link" : "potential\/indexBased\/IDPMStore.html#addValueForRepresentation(value:Double,indexes:scala.collection.mutable.ArrayBuffer[Long]):potential.indexBased.IDPMStore", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): IDPMStore", "member" : "potential.indexBased.IDPMStore.addValueForRepresentation", "link" : "potential\/indexBased\/IDPMStore.html#addValueForRepresentation(value:Double,index:Long):potential.indexBased.IDPMStore", "kind" : "def"}, {"label" : "sortIndices", "tail" : "(): Unit", "member" : "potential.indexBased.IDPMStore.sortIndices", "link" : "potential\/indexBased\/IDPMStore.html#sortIndices():Unit", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.indexBased.IDPMStore.getValue", "link" : "potential\/indexBased\/IDPMStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.indexBased.IDPMStore.kind", "link" : "potential\/indexBased\/IDPMStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.indexBased.IDPMStore#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": ArrayBuffer[Double]", "member" : "potential.indexBased.IDPMStore.values", "link" : "potential\/indexBased\/IDPMStore.html#values:scala.collection.mutable.ArrayBuffer[Double]", "kind" : "val"}, {"label" : "indices", "tail" : ": ArrayBuffer[(Long, Long)]", "member" : "potential.indexBased.IDPMStore.indices", "link" : "potential\/indexBased\/IDPMStore.html#indices:scala.collection.mutable.ArrayBuffer[(Long,Long)]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.indexBased.IDPMStore.variables", "link" : "potential\/indexBased\/IDPMStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/indexBased\/IDPMStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/indexBased\/IDPMStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/indexBased\/IDPMStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/indexBased\/IDPMStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/indexBased\/IDPMStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/indexBased\/IDPMStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/indexBased\/IDPMStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/indexBased\/IDPMStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/indexBased\/IDPMStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDPMStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDPMStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDPMStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDPMStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDPMStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/indexBased\/IDPMStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDPMStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDPMStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDPMStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDPMStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDPMStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDPMStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDPMStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDPMStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDPMStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDPMStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDPMStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDPMStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPMStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPMStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDPMStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDPMStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDPMStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDPMStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDPMStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDPMStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDPMStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/indexBased\/IDPMStore.html", "kind" : "case class"}, {"name" : "potential.indexBased.IDSIStore", "shortDescription" : "Class for storing values with the following structure:values are stored in an array; each value is paired withthe same position in another array where indices arestored in sets.", "object" : "potential\/indexBased\/IDSIStore$.html", "members_object" : [{"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDSIStore.marginalizeDefault", "link" : "potential\/indexBased\/IDSIStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDSIStore.combineDefault", "link" : "potential\/indexBased\/IDSIStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): IDSIStore", "member" : "potential.indexBased.IDSIStore.apply", "link" : "potential\/indexBased\/IDSIStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.indexBased.IDSIStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDSIStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDSIStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDSIStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDSIStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDSIStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDSIStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDSIStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDSIStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDSIStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDSIStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDSIStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDSIStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDSIStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDSIStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDSIStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDSIStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDSIStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSIStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSIStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSIStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDSIStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDSIStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/indexBased\/IDSIStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDSIStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/indexBased\/IDSIStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/indexBased\/IDSIStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDSIStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDSIStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDSIStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.indexBased.IDSIStore.getMemorySize", "link" : "potential\/indexBased\/IDSIStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.indexBased.IDSIStore.toString", "link" : "potential\/indexBased\/IDSIStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.indexBased.IDSIStore.getSize", "link" : "potential\/indexBased\/IDSIStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDSIStore.getValuesProportions", "link" : "potential\/indexBased\/IDSIStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.indexBased.IDSIStore.getZerosProportion", "link" : "potential\/indexBased\/IDSIStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.indexBased.IDSIStore.getIndices", "link" : "potential\/indexBased\/IDSIStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.indexBased.IDSIStore.getIndicesForValue", "link" : "potential\/indexBased\/IDSIStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDSIStore.getDifferentValues", "link" : "potential\/indexBased\/IDSIStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDSIStore.getListValues", "link" : "potential\/indexBased\/IDSIStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): IDSIStore", "member" : "potential.indexBased.IDSIStore.addValueForRepresentation", "link" : "potential\/indexBased\/IDSIStore.html#addValueForRepresentation(value:Double,index:Long):potential.indexBased.IDSIStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.indexBased.IDSIStore.getValue", "link" : "potential\/indexBased\/IDSIStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.indexBased.IDSIStore.kind", "link" : "potential\/indexBased\/IDSIStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.indexBased.IDSIStore#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": Array[Double]", "member" : "potential.indexBased.IDSIStore.values", "link" : "potential\/indexBased\/IDSIStore.html#values:Array[Double]", "kind" : "val"}, {"label" : "indicesSets", "tail" : ": Array[Set[Long]]", "member" : "potential.indexBased.IDSIStore.indicesSets", "link" : "potential\/indexBased\/IDSIStore.html#indicesSets:Array[scala.collection.Set[Long]]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.indexBased.IDSIStore.variables", "link" : "potential\/indexBased\/IDSIStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/indexBased\/IDSIStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/indexBased\/IDSIStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/indexBased\/IDSIStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/indexBased\/IDSIStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/indexBased\/IDSIStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/indexBased\/IDSIStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/indexBased\/IDSIStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/indexBased\/IDSIStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/indexBased\/IDSIStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDSIStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDSIStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDSIStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDSIStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDSIStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/indexBased\/IDSIStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDSIStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDSIStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDSIStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDSIStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDSIStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDSIStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDSIStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDSIStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDSIStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDSIStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDSIStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDSIStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSIStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSIStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSIStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDSIStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDSIStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDSIStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDSIStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDSIStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDSIStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/indexBased\/IDSIStore.html", "kind" : "case class"}, {"name" : "potential.indexBased.IDSMStore", "shortDescription" : "Class for storing values with the following structure:values are stored in an array; each value is paired withthe same position in another array where indices arestored in sets.", "object" : "potential\/indexBased\/IDSMStore$.html", "members_object" : [{"label" : "marginalizeAlt3", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDSMStore.marginalizeAlt3", "link" : "potential\/indexBased\/IDSMStore$.html#marginalizeAlt3(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeAlt2", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDSMStore.marginalizeAlt2", "link" : "potential\/indexBased\/IDSMStore$.html#marginalizeAlt2(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeAlt1", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDSMStore.marginalizeAlt1", "link" : "potential\/indexBased\/IDSMStore$.html#marginalizeAlt1(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.indexBased.IDSMStore.marginalizeDefault", "link" : "potential\/indexBased\/IDSMStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt4", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDSMStore.combineAlt4", "link" : "potential\/indexBased\/IDSMStore$.html#combineAlt4(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt3", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDSMStore.combineAlt3", "link" : "potential\/indexBased\/IDSMStore$.html#combineAlt3(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt2", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDSMStore.combineAlt2", "link" : "potential\/indexBased\/IDSMStore$.html#combineAlt2(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt1", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDSMStore.combineAlt1", "link" : "potential\/indexBased\/IDSMStore$.html#combineAlt1(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.indexBased.IDSMStore.combineDefault", "link" : "potential\/indexBased\/IDSMStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet): IDSMStore", "member" : "potential.indexBased.IDSMStore.apply", "link" : "potential\/indexBased\/IDSMStore$.html#apply(variables:base.VariableSet):potential.indexBased.IDSMStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): IDSMStore", "member" : "potential.indexBased.IDSMStore.apply", "link" : "potential\/indexBased\/IDSMStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.indexBased.IDSMStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDSMStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDSMStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDSMStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDSMStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDSMStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDSMStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDSMStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDSMStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDSMStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDSMStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDSMStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDSMStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDSMStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDSMStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDSMStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDSMStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDSMStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSMStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSMStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSMStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDSMStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDSMStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/indexBased\/IDSMStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDSMStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/indexBased\/IDSMStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/indexBased\/IDSMStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDSMStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDSMStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDSMStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.indexBased.IDSMStore.getMemorySize", "link" : "potential\/indexBased\/IDSMStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.indexBased.IDSMStore.toString", "link" : "potential\/indexBased\/IDSMStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.indexBased.IDSMStore.getSize", "link" : "potential\/indexBased\/IDSMStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDSMStore.getValuesProportions", "link" : "potential\/indexBased\/IDSMStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.indexBased.IDSMStore.getZerosProportion", "link" : "potential\/indexBased\/IDSMStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.indexBased.IDSMStore.getIndices", "link" : "potential\/indexBased\/IDSMStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.indexBased.IDSMStore.getIndicesForValue", "link" : "potential\/indexBased\/IDSMStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDSMStore.getDifferentValues", "link" : "potential\/indexBased\/IDSMStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.indexBased.IDSMStore.getListValues", "link" : "potential\/indexBased\/IDSMStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "addNonCheckValueForRepresentation", "tail" : "(value: Double, indexes: ArrayBuffer[Long]): IDSMStore", "member" : "potential.indexBased.IDSMStore.addNonCheckValueForRepresentation", "link" : "potential\/indexBased\/IDSMStore.html#addNonCheckValueForRepresentation(value:Double,indexes:scala.collection.mutable.ArrayBuffer[Long]):potential.indexBased.IDSMStore", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): IDSMStore", "member" : "potential.indexBased.IDSMStore.addValueForRepresentation", "link" : "potential\/indexBased\/IDSMStore.html#addValueForRepresentation(value:Double,index:Long):potential.indexBased.IDSMStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.indexBased.IDSMStore.getValue", "link" : "potential\/indexBased\/IDSMStore.html#getValue(index:Long):Double", "kind" : "def"}, {"member" : "potential.indexBased.IDSMStore#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": ArrayBuffer[Double]", "member" : "potential.indexBased.IDSMStore.values", "link" : "potential\/indexBased\/IDSMStore.html#values:scala.collection.mutable.ArrayBuffer[Double]", "kind" : "val"}, {"label" : "indexesSet", "tail" : ": ArrayBuffer[Set[Long]]", "member" : "potential.indexBased.IDSMStore.indexesSet", "link" : "potential\/indexBased\/IDSMStore.html#indexesSet:scala.collection.mutable.ArrayBuffer[scala.collection.Set[Long]]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.indexBased.IDSMStore.variables", "link" : "potential\/indexBased\/IDSMStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/indexBased\/IDSMStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/indexBased\/IDSMStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/indexBased\/IDSMStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/indexBased\/IDSMStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/indexBased\/IDSMStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/indexBased\/IDSMStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.ValueStore.kind", "link" : "potential\/indexBased\/IDSMStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/indexBased\/IDSMStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/indexBased\/IDSMStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/indexBased\/IDSMStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/indexBased\/IDSMStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/indexBased\/IDSMStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/indexBased\/IDSMStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/indexBased\/IDSMStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/indexBased\/IDSMStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/indexBased\/IDSMStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/indexBased\/IDSMStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/indexBased\/IDSMStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/indexBased\/IDSMStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/indexBased\/IDSMStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/indexBased\/IDSMStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/indexBased\/IDSMStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/indexBased\/IDSMStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/indexBased\/IDSMStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/indexBased\/IDSMStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/indexBased\/IDSMStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/indexBased\/IDSMStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/indexBased\/IDSMStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSMStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSMStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/indexBased\/IDSMStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/indexBased\/IDSMStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/indexBased\/IDSMStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/indexBased\/IDSMStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/indexBased\/IDSMStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/indexBased\/IDSMStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/indexBased\/IDSMStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/indexBased\/IDSMStore.html", "kind" : "case class"}], "mapper" : [{"name" : "mapper.CombineMapper", "shortDescription" : "Class for making the mapping of indices from result tooperands in combination operations", "object" : "mapper\/CombineMapper$.html", "members_class" : [{"label" : "VariableInfo", "tail" : "", "member" : "mapper.CombineMapper.VariableInfo", "link" : "mapper\/CombineMapper.html#VariableInfoextendsAnyRef", "kind" : "class"}, {"label" : "mapToOperand2", "tail" : "(index: Long): Long", "member" : "mapper.CombineMapper.mapToOperand2", "link" : "mapper\/CombineMapper.html#mapToOperand2(index:Long):Long", "kind" : "def"}, {"label" : "mapToOperand1", "tail" : "(index: Long): Long", "member" : "mapper.CombineMapper.mapToOperand1", "link" : "mapper\/CombineMapper.html#mapToOperand1(index:Long):Long", "kind" : "def"}, {"label" : "mapIndices3", "tail" : "(index: Long): (Long, Long)", "member" : "mapper.CombineMapper.mapIndices3", "link" : "mapper\/CombineMapper.html#mapIndices3(index:Long):(Long,Long)", "kind" : "def"}, {"label" : "mapIndices2", "tail" : "(index: Long): (Long, Long)", "member" : "mapper.CombineMapper.mapIndices2", "link" : "mapper\/CombineMapper.html#mapIndices2(index:Long):(Long,Long)", "kind" : "def"}, {"label" : "mapIndices", "tail" : "(index: Long): (Long, Long)", "member" : "mapper.CombineMapper.mapIndices", "link" : "mapper\/CombineMapper.html#mapIndices(index:Long):(Long,Long)", "kind" : "def"}, {"label" : "computeGlobalIndex", "tail" : "(index1: Long, index2: Long): Long", "member" : "mapper.CombineMapper.computeGlobalIndex", "link" : "mapper\/CombineMapper.html#computeGlobalIndex(index1:Long,index2:Long):Long", "kind" : "def"}, {"label" : "compatible", "tail" : "(index1: Long, index2: Long): Boolean", "member" : "mapper.CombineMapper.compatible", "link" : "mapper\/CombineMapper.html#compatible(index1:Long,index2:Long):Boolean", "kind" : "def"}, {"label" : "resultDomainMaxIndex", "tail" : ": Long", "member" : "mapper.CombineMapper.resultDomainMaxIndex", "link" : "mapper\/CombineMapper.html#resultDomainMaxIndex:Long", "kind" : "val"}, {"label" : "resultDomainCardinalities", "tail" : ": Array[Int]", "member" : "mapper.CombineMapper.resultDomainCardinalities", "link" : "mapper\/CombineMapper.html#resultDomainCardinalities:Array[Int]", "kind" : "val"}, {"label" : "destExclusiveVars", "tail" : ": List[Variable]", "member" : "mapper.CombineMapper.destExclusiveVars", "link" : "mapper\/CombineMapper.html#destExclusiveVars:List[base.Variable]", "kind" : "val"}, {"label" : "sourceExclusiveVars", "tail" : ": List[Variable]", "member" : "mapper.CombineMapper.sourceExclusiveVars", "link" : "mapper\/CombineMapper.html#sourceExclusiveVars:List[base.Variable]", "kind" : "val"}, {"label" : "commonVariables", "tail" : ": VariableSet", "member" : "mapper.CombineMapper.commonVariables", "link" : "mapper\/CombineMapper.html#commonVariables:base.VariableSet", "kind" : "val"}, {"label" : "resultConfiguration", "tail" : ": Configuration", "member" : "mapper.CombineMapper.resultConfiguration", "link" : "mapper\/CombineMapper.html#resultConfiguration:base.Configuration", "kind" : "val"}, {"label" : "mapperInfo", "tail" : ": Map[Variable, VariableInfo]", "member" : "mapper.CombineMapper.mapperInfo", "link" : "mapper\/CombineMapper.html#mapperInfo:Map[base.Variable,CombineMapper.this.VariableInfo]", "kind" : "val"}, {"label" : "resultDomainWeights", "tail" : ": Array[Long]", "member" : "mapper.CombineMapper.resultDomainWeights", "link" : "mapper\/CombineMapper.html#resultDomainWeights:Array[Long]", "kind" : "val"}, {"label" : "resultDomain", "tail" : ": VariableSet", "member" : "mapper.CombineMapper.resultDomain", "link" : "mapper\/CombineMapper.html#resultDomain:base.VariableSet", "kind" : "val"}, {"member" : "mapper.CombineMapper#<init>", "error" : "unsupported entity"}, {"label" : "operand2", "tail" : ": VariableSet", "member" : "mapper.CombineMapper.operand2", "link" : "mapper\/CombineMapper.html#operand2:base.VariableSet", "kind" : "val"}, {"label" : "operand1", "tail" : ": VariableSet", "member" : "mapper.CombineMapper.operand1", "link" : "mapper\/CombineMapper.html#operand1:base.VariableSet", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "mapper\/CombineMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "mapper\/CombineMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "mapper\/CombineMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "mapper\/CombineMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "mapper\/CombineMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "mapper\/CombineMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "mapper\/CombineMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "mapper\/CombineMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "mapper\/CombineMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "mapper\/CombineMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "mapper\/CombineMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "mapper\/CombineMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "mapper\/CombineMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "mapper\/CombineMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "mapper\/CombineMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "mapper\/CombineMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(variableSet1: VariableSet, variableSet2: VariableSet): CombineMapper", "member" : "mapper.CombineMapper.apply", "link" : "mapper\/CombineMapper$.html#apply(variableSet1:base.VariableSet,variableSet2:base.VariableSet):mapper.CombineMapper", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "mapper\/CombineMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "mapper\/CombineMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "mapper\/CombineMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "mapper\/CombineMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "mapper\/CombineMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "mapper\/CombineMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "mapper\/CombineMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "mapper\/CombineMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "mapper\/CombineMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "mapper\/CombineMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "mapper\/CombineMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "mapper\/CombineMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "mapper\/CombineMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "mapper\/CombineMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "mapper\/CombineMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "mapper\/CombineMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "mapper\/CombineMapper.html", "kind" : "class"}, {"name" : "mapper.CombineMapperTest", "shortDescription" : "Class for testing the methods of Configuration class.", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "mapper\/CombineMapperTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "mapper\/CombineMapperTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "mapper\/CombineMapperTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "mapper\/CombineMapperTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "globalSet", "tail" : ": VariableSet", "member" : "mapper.CombineMapperTest.globalSet", "link" : "mapper\/CombineMapperTest.html#globalSet:base.VariableSet", "kind" : "val"}, {"label" : "mapper", "tail" : ": CombineMapper", "member" : "mapper.CombineMapperTest.mapper", "link" : "mapper\/CombineMapperTest.html#mapper:mapper.CombineMapper", "kind" : "val"}, {"label" : "partial2", "tail" : ": VariableSet", "member" : "mapper.CombineMapperTest.partial2", "link" : "mapper\/CombineMapperTest.html#partial2:base.VariableSet", "kind" : "val"}, {"label" : "partial1", "tail" : ": VariableSet", "member" : "mapper.CombineMapperTest.partial1", "link" : "mapper\/CombineMapperTest.html#partial1:base.VariableSet", "kind" : "val"}, {"label" : "variable5", "tail" : ": Variable", "member" : "mapper.CombineMapperTest.variable5", "link" : "mapper\/CombineMapperTest.html#variable5:base.Variable", "kind" : "val"}, {"label" : "variable4", "tail" : ": Variable", "member" : "mapper.CombineMapperTest.variable4", "link" : "mapper\/CombineMapperTest.html#variable4:base.Variable", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "mapper.CombineMapperTest.variable3", "link" : "mapper\/CombineMapperTest.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "mapper.CombineMapperTest.variable2", "link" : "mapper\/CombineMapperTest.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "mapper.CombineMapperTest.variable1", "link" : "mapper\/CombineMapperTest.html#variable1:base.Variable", "kind" : "val"}, {"member" : "mapper.CombineMapperTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "mapper\/CombineMapperTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "mapper\/CombineMapperTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "mapper\/CombineMapperTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "mapper\/CombineMapperTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "mapper\/CombineMapperTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "mapper\/CombineMapperTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "mapper\/CombineMapperTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "mapper\/CombineMapperTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "mapper\/CombineMapperTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "mapper\/CombineMapperTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "mapper\/CombineMapperTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "mapper\/CombineMapperTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "mapper\/CombineMapperTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "mapper\/CombineMapperTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "mapper\/CombineMapperTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "mapper\/CombineMapperTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "mapper\/CombineMapperTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "mapper\/CombineMapperTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "mapper\/CombineMapperTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "mapper\/CombineMapperTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "mapper\/CombineMapperTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "mapper\/CombineMapperTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "mapper\/CombineMapperTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "mapper\/CombineMapperTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "mapper\/CombineMapperTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "mapper\/CombineMapperTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "mapper\/CombineMapperTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "mapper\/CombineMapperTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "mapper\/CombineMapperTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "mapper\/CombineMapperTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "mapper\/CombineMapperTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "mapper\/CombineMapperTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "mapper\/CombineMapperTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "mapper\/CombineMapperTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "mapper\/CombineMapperTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "mapper\/CombineMapperTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "mapper\/CombineMapperTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "mapper\/CombineMapperTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "mapper\/CombineMapperTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "mapper\/CombineMapperTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "mapper\/CombineMapperTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "mapper\/CombineMapperTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "mapper\/CombineMapperTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "mapper\/CombineMapperTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "mapper\/CombineMapperTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "mapper\/CombineMapperTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "mapper\/CombineMapperTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "mapper\/CombineMapperTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "mapper\/CombineMapperTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "mapper\/CombineMapperTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "mapper\/CombineMapperTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "mapper\/CombineMapperTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "mapper\/CombineMapperTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "mapper\/CombineMapperTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "mapper\/CombineMapperTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "mapper\/CombineMapperTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "mapper\/CombineMapperTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "mapper\/CombineMapperTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "mapper\/CombineMapperTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "mapper\/CombineMapperTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "mapper\/CombineMapperTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "mapper\/CombineMapperTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "mapper\/CombineMapperTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "mapper\/CombineMapperTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "mapper\/CombineMapperTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "mapper\/CombineMapperTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "mapper\/CombineMapperTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "mapper\/CombineMapperTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "mapper\/CombineMapperTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "mapper\/CombineMapperTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "mapper\/CombineMapperTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "mapper\/CombineMapperTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "mapper\/CombineMapperTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "mapper\/CombineMapperTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "mapper\/CombineMapperTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "mapper\/CombineMapperTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapperTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapperTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapperTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "mapper\/CombineMapperTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "mapper\/CombineMapperTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "mapper\/CombineMapperTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "mapper\/CombineMapperTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "mapper\/CombineMapperTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "mapper\/CombineMapperTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "mapper\/CombineMapperTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "mapper\/CombineMapperTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "mapper\/CombineMapperTest.html", "kind" : "class"}, {"name" : "mapper.CombineMapperTest2", "shortDescription" : "", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "mapper\/CombineMapperTest2.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "mapper\/CombineMapperTest2.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "mapper\/CombineMapperTest2.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "mapper\/CombineMapperTest2.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "result", "tail" : ": (Long, Long)", "member" : "mapper.CombineMapperTest2.result", "link" : "mapper\/CombineMapperTest2.html#result:(Long,Long)", "kind" : "val"}, {"label" : "mapper", "tail" : ": CombineMapper", "member" : "mapper.CombineMapperTest2.mapper", "link" : "mapper\/CombineMapperTest2.html#mapper:mapper.CombineMapper", "kind" : "val"}, {"label" : "variableSet2", "tail" : ": VariableSet", "member" : "mapper.CombineMapperTest2.variableSet2", "link" : "mapper\/CombineMapperTest2.html#variableSet2:base.VariableSet", "kind" : "val"}, {"label" : "variableSet1", "tail" : ": VariableSet", "member" : "mapper.CombineMapperTest2.variableSet1", "link" : "mapper\/CombineMapperTest2.html#variableSet1:base.VariableSet", "kind" : "val"}, {"label" : "variable6", "tail" : ": Variable", "member" : "mapper.CombineMapperTest2.variable6", "link" : "mapper\/CombineMapperTest2.html#variable6:base.Variable", "kind" : "val"}, {"label" : "variable5", "tail" : ": Variable", "member" : "mapper.CombineMapperTest2.variable5", "link" : "mapper\/CombineMapperTest2.html#variable5:base.Variable", "kind" : "val"}, {"label" : "variable4", "tail" : ": Variable", "member" : "mapper.CombineMapperTest2.variable4", "link" : "mapper\/CombineMapperTest2.html#variable4:base.Variable", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "mapper.CombineMapperTest2.variable3", "link" : "mapper\/CombineMapperTest2.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "mapper.CombineMapperTest2.variable2", "link" : "mapper\/CombineMapperTest2.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "mapper.CombineMapperTest2.variable1", "link" : "mapper\/CombineMapperTest2.html#variable1:base.Variable", "kind" : "val"}, {"member" : "mapper.CombineMapperTest2#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "mapper\/CombineMapperTest2.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "mapper\/CombineMapperTest2.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "mapper\/CombineMapperTest2.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "mapper\/CombineMapperTest2.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "mapper\/CombineMapperTest2.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "mapper\/CombineMapperTest2.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "mapper\/CombineMapperTest2.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "mapper\/CombineMapperTest2.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "mapper\/CombineMapperTest2.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "mapper\/CombineMapperTest2.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "mapper\/CombineMapperTest2.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "mapper\/CombineMapperTest2.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "mapper\/CombineMapperTest2.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "mapper\/CombineMapperTest2.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "mapper\/CombineMapperTest2.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "mapper\/CombineMapperTest2.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "mapper\/CombineMapperTest2.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "mapper\/CombineMapperTest2.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "mapper\/CombineMapperTest2.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "mapper\/CombineMapperTest2.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "mapper\/CombineMapperTest2.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "mapper\/CombineMapperTest2.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "mapper\/CombineMapperTest2.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "mapper\/CombineMapperTest2.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "mapper\/CombineMapperTest2.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "mapper\/CombineMapperTest2.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "mapper\/CombineMapperTest2.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "mapper\/CombineMapperTest2.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "mapper\/CombineMapperTest2.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "mapper\/CombineMapperTest2.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "mapper\/CombineMapperTest2.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "mapper\/CombineMapperTest2.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "mapper\/CombineMapperTest2.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "mapper\/CombineMapperTest2.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "mapper\/CombineMapperTest2.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "mapper\/CombineMapperTest2.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "mapper\/CombineMapperTest2.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "mapper\/CombineMapperTest2.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "mapper\/CombineMapperTest2.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "mapper\/CombineMapperTest2.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "mapper\/CombineMapperTest2.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "mapper\/CombineMapperTest2.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "mapper\/CombineMapperTest2.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "mapper\/CombineMapperTest2.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "mapper\/CombineMapperTest2.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "mapper\/CombineMapperTest2.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "mapper\/CombineMapperTest2.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "mapper\/CombineMapperTest2.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "mapper\/CombineMapperTest2.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "mapper\/CombineMapperTest2.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "mapper\/CombineMapperTest2.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "mapper\/CombineMapperTest2.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "mapper\/CombineMapperTest2.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "mapper\/CombineMapperTest2.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "mapper\/CombineMapperTest2.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "mapper\/CombineMapperTest2.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "mapper\/CombineMapperTest2.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "mapper\/CombineMapperTest2.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "mapper\/CombineMapperTest2.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "mapper\/CombineMapperTest2.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "mapper\/CombineMapperTest2.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "mapper\/CombineMapperTest2.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "mapper\/CombineMapperTest2.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "mapper\/CombineMapperTest2.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "mapper\/CombineMapperTest2.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "mapper\/CombineMapperTest2.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "mapper\/CombineMapperTest2.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "mapper\/CombineMapperTest2.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "mapper\/CombineMapperTest2.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "mapper\/CombineMapperTest2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "mapper\/CombineMapperTest2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "mapper\/CombineMapperTest2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "mapper\/CombineMapperTest2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "mapper\/CombineMapperTest2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "mapper\/CombineMapperTest2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "mapper\/CombineMapperTest2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapperTest2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapperTest2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/CombineMapperTest2.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "mapper\/CombineMapperTest2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "mapper\/CombineMapperTest2.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "mapper\/CombineMapperTest2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "mapper\/CombineMapperTest2.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "mapper\/CombineMapperTest2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "mapper\/CombineMapperTest2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "mapper\/CombineMapperTest2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "mapper\/CombineMapperTest2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "mapper\/CombineMapperTest2.html", "kind" : "class"}, {"name" : "mapper.MarginalizeMapper", "shortDescription" : "Class for making the mapping between indices and coordinatesin marginalization operations", "object" : "mapper\/MarginalizeMapper$.html", "members_class" : [{"label" : "getCompatibles", "tail" : "(index: Long): List[Long]", "member" : "mapper.MarginalizeMapper.getCompatibles", "link" : "mapper\/MarginalizeMapper.html#getCompatibles(index:Long):List[Long]", "kind" : "def"}, {"label" : "compatible", "tail" : "(index1: Long, index2: Long): Boolean", "member" : "mapper.MarginalizeMapper.compatible", "link" : "mapper\/MarginalizeMapper.html#compatible(index1:Long,index2:Long):Boolean", "kind" : "def"}, {"label" : "mapIndexFromResultToSource", "tail" : "(index: Long): List[Long]", "member" : "mapper.MarginalizeMapper.mapIndexFromResultToSource", "link" : "mapper\/MarginalizeMapper.html#mapIndexFromResultToSource(index:Long):List[Long]", "kind" : "def"}, {"label" : "mapIndexFromSourceToResult", "tail" : "(sourceIndex: Long): Long", "member" : "mapper.MarginalizeMapper.mapIndexFromSourceToResult", "link" : "mapper\/MarginalizeMapper.html#mapIndexFromSourceToResult(sourceIndex:Long):Long", "kind" : "def"}, {"label" : "getIndicesOfResultDomainVarsIntoSource", "tail" : "(): Array[Int]", "member" : "mapper.MarginalizeMapper.getIndicesOfResultDomainVarsIntoSource", "link" : "mapper\/MarginalizeMapper.html#getIndicesOfResultDomainVarsIntoSource:Array[Int]", "kind" : "def"}, {"label" : "variableValues", "tail" : ": Array[Int]", "member" : "mapper.MarginalizeMapper.variableValues", "link" : "mapper\/MarginalizeMapper.html#variableValues:Array[Int]", "kind" : "val"}, {"label" : "maxIndexResultDomain", "tail" : ": Long", "member" : "mapper.MarginalizeMapper.maxIndexResultDomain", "link" : "mapper\/MarginalizeMapper.html#maxIndexResultDomain:Long", "kind" : "val"}, {"label" : "maxIndexSourceDomain", "tail" : ": Long", "member" : "mapper.MarginalizeMapper.maxIndexSourceDomain", "link" : "mapper\/MarginalizeMapper.html#maxIndexSourceDomain:Long", "kind" : "val"}, {"label" : "indicesOfResultDomainVarsIntoSource", "tail" : ": Array[Int]", "member" : "mapper.MarginalizeMapper.indicesOfResultDomainVarsIntoSource", "link" : "mapper\/MarginalizeMapper.html#indicesOfResultDomainVarsIntoSource:Array[Int]", "kind" : "val"}, {"label" : "resultDomainWeights", "tail" : ": Array[Long]", "member" : "mapper.MarginalizeMapper.resultDomainWeights", "link" : "mapper\/MarginalizeMapper.html#resultDomainWeights:Array[Long]", "kind" : "val"}, {"label" : "sourceDomainWeights", "tail" : ": Array[Long]", "member" : "mapper.MarginalizeMapper.sourceDomainWeights", "link" : "mapper\/MarginalizeMapper.html#sourceDomainWeights:Array[Long]", "kind" : "val"}, {"label" : "resultDomainCardinalities", "tail" : ": Array[Int]", "member" : "mapper.MarginalizeMapper.resultDomainCardinalities", "link" : "mapper\/MarginalizeMapper.html#resultDomainCardinalities:Array[Int]", "kind" : "val"}, {"label" : "sourceDomainCardinalities", "tail" : ": Array[Int]", "member" : "mapper.MarginalizeMapper.sourceDomainCardinalities", "link" : "mapper\/MarginalizeMapper.html#sourceDomainCardinalities:Array[Int]", "kind" : "val"}, {"label" : "indexOfVariableToRemove", "tail" : ": Int", "member" : "mapper.MarginalizeMapper.indexOfVariableToRemove", "link" : "mapper\/MarginalizeMapper.html#indexOfVariableToRemove:Int", "kind" : "val"}, {"label" : "resultDomain", "tail" : ": VariableSet", "member" : "mapper.MarginalizeMapper.resultDomain", "link" : "mapper\/MarginalizeMapper.html#resultDomain:base.VariableSet", "kind" : "val"}, {"member" : "mapper.MarginalizeMapper#<init>", "error" : "unsupported entity"}, {"label" : "source", "tail" : ": VariableSet", "member" : "mapper.MarginalizeMapper.source", "link" : "mapper\/MarginalizeMapper.html#source:base.VariableSet", "kind" : "val"}, {"label" : "variable", "tail" : ": Variable", "member" : "mapper.MarginalizeMapper.variable", "link" : "mapper\/MarginalizeMapper.html#variable:base.Variable", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "mapper\/MarginalizeMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "mapper\/MarginalizeMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "mapper\/MarginalizeMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "mapper\/MarginalizeMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "mapper\/MarginalizeMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "mapper\/MarginalizeMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "mapper\/MarginalizeMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/MarginalizeMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/MarginalizeMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/MarginalizeMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "mapper\/MarginalizeMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "mapper\/MarginalizeMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "mapper\/MarginalizeMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "mapper\/MarginalizeMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "mapper\/MarginalizeMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "mapper\/MarginalizeMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "mapper\/MarginalizeMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "mapper\/MarginalizeMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "mapper\/MarginalizeMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(variable: Variable, variables: VariableSet): MarginalizeMapper", "member" : "mapper.MarginalizeMapper.apply", "link" : "mapper\/MarginalizeMapper$.html#apply(variable:base.Variable,variables:base.VariableSet):mapper.MarginalizeMapper", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "mapper\/MarginalizeMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "mapper\/MarginalizeMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "mapper\/MarginalizeMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "mapper\/MarginalizeMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "mapper\/MarginalizeMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "mapper\/MarginalizeMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "mapper\/MarginalizeMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/MarginalizeMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/MarginalizeMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "mapper\/MarginalizeMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "mapper\/MarginalizeMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "mapper\/MarginalizeMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "mapper\/MarginalizeMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "mapper\/MarginalizeMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "mapper\/MarginalizeMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "mapper\/MarginalizeMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "mapper\/MarginalizeMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "mapper\/MarginalizeMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "mapper\/MarginalizeMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "mapper\/MarginalizeMapper.html", "kind" : "class"}], "experiments.generation" : [{"name" : "experiments.generation.IndexesList", "shortDescription" : "Class for storing list of indexes for testing access function", "object" : "experiments\/generation\/IndexesList$.html", "members_class" : [{"member" : "experiments.generation.IndexesList#<init>", "error" : "unsupported entity"}, {"label" : "indexes", "tail" : ": List[Long]", "member" : "experiments.generation.IndexesList.indexes", "link" : "experiments\/generation\/IndexesList.html#indexes:List[Long]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/generation\/IndexesList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/generation\/IndexesList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/generation\/IndexesList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/generation\/IndexesList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/generation\/IndexesList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/generation\/IndexesList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/generation\/IndexesList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/IndexesList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/IndexesList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/IndexesList.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/generation\/IndexesList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/generation\/IndexesList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/generation\/IndexesList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/generation\/IndexesList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/generation\/IndexesList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/generation\/IndexesList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/generation\/IndexesList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/generation\/IndexesList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/generation\/IndexesList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "readObject", "tail" : "(fileName: String): IndexesList", "member" : "experiments.generation.IndexesList.readObject", "link" : "experiments\/generation\/IndexesList$.html#readObject(fileName:String):experiments.generation.IndexesList", "kind" : "def"}, {"label" : "writeObject", "tail" : "(fileName: String, indexesList: IndexesList): Unit", "member" : "experiments.generation.IndexesList.writeObject", "link" : "experiments\/generation\/IndexesList$.html#writeObject(fileName:String,indexesList:experiments.generation.IndexesList):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/generation\/IndexesList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/generation\/IndexesList$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/generation\/IndexesList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/generation\/IndexesList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/generation\/IndexesList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/generation\/IndexesList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/generation\/IndexesList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/IndexesList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/IndexesList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/IndexesList$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/generation\/IndexesList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/generation\/IndexesList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/generation\/IndexesList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/generation\/IndexesList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/generation\/IndexesList$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/generation\/IndexesList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/generation\/IndexesList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/generation\/IndexesList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/generation\/IndexesList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "experiments\/generation\/IndexesList.html", "kind" : "class"}, {"name" : "experiments.generation.PotentialPairsGeneration", "shortDescription" : "Object for performing generation of pairs potential objectsaccording to max global cardinality, min global cardinalityand number of different values.", "object" : "experiments\/generation\/PotentialPairsGeneration$.html", "members_object" : [{"label" : "storePair", "tail" : "(potential1: Potential, potential2: Potential, max: Int, min: Int, levels: Int, id: Int): Unit", "member" : "experiments.generation.PotentialPairsGeneration.storePair", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#storePair(potential1:potential.Potential,potential2:potential.Potential,max:Int,min:Int,levels:Int,id:Int):Unit", "kind" : "def"}, {"label" : "potentials", "tail" : ": Int", "member" : "experiments.generation.PotentialPairsGeneration.potentials", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#potentials:Int", "kind" : "val"}, {"label" : "levels", "tail" : ": List[Int]", "member" : "experiments.generation.PotentialPairsGeneration.levels", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#levels:List[Int]", "kind" : "val"}, {"label" : "minCard", "tail" : ": List[Int]", "member" : "experiments.generation.PotentialPairsGeneration.minCard", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#minCard:List[Int]", "kind" : "val"}, {"label" : "maxCard", "tail" : ": List[Int]", "member" : "experiments.generation.PotentialPairsGeneration.maxCard", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#maxCard:List[Int]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/generation\/PotentialPairsGeneration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/generation\/PotentialPairsGeneration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.generation.PotentialsGeneration", "shortDescription" : "Object for performing generation of potential objectsaccording to max global cardinality, min global cardinalityand number of different values", "object" : "experiments\/generation\/PotentialsGeneration$.html", "members_object" : [{"label" : "generateRandomIndexesSet", "tail" : "(potential: Potential): List[Long]", "member" : "experiments.generation.PotentialsGeneration.generateRandomIndexesSet", "link" : "experiments\/generation\/PotentialsGeneration$.html#generateRandomIndexesSet(potential:potential.Potential):List[Long]", "kind" : "def"}, {"label" : "generateIJISExample", "tail" : "(percentage: Double): Potential", "member" : "experiments.generation.PotentialsGeneration.generateIJISExample", "link" : "experiments\/generation\/PotentialsGeneration$.html#generateIJISExample(percentage:Double):potential.Potential", "kind" : "def"}, {"label" : "potentials", "tail" : ": Int", "member" : "experiments.generation.PotentialsGeneration.potentials", "link" : "experiments\/generation\/PotentialsGeneration$.html#potentials:Int", "kind" : "val"}, {"label" : "levels", "tail" : ": List[Int]", "member" : "experiments.generation.PotentialsGeneration.levels", "link" : "experiments\/generation\/PotentialsGeneration$.html#levels:List[Int]", "kind" : "val"}, {"label" : "minCard", "tail" : ": List[Int]", "member" : "experiments.generation.PotentialsGeneration.minCard", "link" : "experiments\/generation\/PotentialsGeneration$.html#minCard:List[Int]", "kind" : "val"}, {"label" : "maxCard", "tail" : ": List[Int]", "member" : "experiments.generation.PotentialsGeneration.maxCard", "link" : "experiments\/generation\/PotentialsGeneration$.html#maxCard:List[Int]", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.generation.PotentialsGeneration.folder", "link" : "experiments\/generation\/PotentialsGeneration$.html#folder:String", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/generation\/PotentialsGeneration$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/generation\/PotentialsGeneration$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/generation\/PotentialsGeneration$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/generation\/PotentialsGeneration$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/generation\/PotentialsGeneration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/generation\/PotentialsGeneration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/generation\/PotentialsGeneration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/generation\/PotentialsGeneration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/generation\/PotentialsGeneration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/generation\/PotentialsGeneration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/generation\/PotentialsGeneration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/PotentialsGeneration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/PotentialsGeneration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/PotentialsGeneration$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/generation\/PotentialsGeneration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/generation\/PotentialsGeneration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/generation\/PotentialsGeneration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/generation\/PotentialsGeneration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/generation\/PotentialsGeneration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/generation\/PotentialsGeneration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/generation\/PotentialsGeneration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/generation\/PotentialsGeneration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/generation\/PotentialsGeneration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.generation.SimplePotentialPairGeneration", "shortDescription" : "generates a simple pair of potentials", "object" : "experiments\/generation\/SimplePotentialPairGeneration$.html", "members_object" : [{"label" : "potential2", "tail" : ": Potential", "member" : "experiments.generation.SimplePotentialPairGeneration.potential2", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#potential2:potential.Potential", "kind" : "var"}, {"label" : "potential1", "tail" : ": Potential", "member" : "experiments.generation.SimplePotentialPairGeneration.potential1", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#potential1:potential.Potential", "kind" : "var"}, {"label" : "filename2", "tail" : ": String", "member" : "experiments.generation.SimplePotentialPairGeneration.filename2", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#filename2:String", "kind" : "val"}, {"label" : "filename1", "tail" : ": String", "member" : "experiments.generation.SimplePotentialPairGeneration.filename1", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#filename1:String", "kind" : "val"}, {"label" : "pair", "tail" : ": (Potential, Potential)", "member" : "experiments.generation.SimplePotentialPairGeneration.pair", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#pair:(potential.Potential,potential.Potential)", "kind" : "val"}, {"label" : "potentials", "tail" : ": Int", "member" : "experiments.generation.SimplePotentialPairGeneration.potentials", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#potentials:Int", "kind" : "val"}, {"label" : "levels", "tail" : ": Int", "member" : "experiments.generation.SimplePotentialPairGeneration.levels", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#levels:Int", "kind" : "val"}, {"label" : "minCard", "tail" : ": Int", "member" : "experiments.generation.SimplePotentialPairGeneration.minCard", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#minCard:Int", "kind" : "val"}, {"label" : "maxCard", "tail" : ": Int", "member" : "experiments.generation.SimplePotentialPairGeneration.maxCard", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#maxCard:Int", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.generation.SimplePotentialPairGeneration.folder", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#folder:String", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/generation\/SimplePotentialPairGeneration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "experiments.combination" : [{"name" : "experiments.combination.CombinationAAIMBenchmark", "shortDescription" : "Object for performing generation of pairs potential objectsaccording to max global cardinality, min global cardinalityand number of different values.", "object" : "experiments\/combination\/CombinationAAIMBenchmark$.html", "members_object" : [{"label" : "saveResultsFunctions", "tail" : "(cardIndex: Int, levelsIndex: Int, storeType: ValueStoreType): Unit", "member" : "experiments.combination.CombinationAAIMBenchmark.saveResultsFunctions", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#saveResultsFunctions(cardIndex:Int,levelsIndex:Int,storeType:potential.ValueStoreTypes.ValueStoreType):Unit", "kind" : "def"}, {"label" : "saveResultsDefault", "tail" : "(cardIndex: Int, levelsIndex: Int, storeType: ValueStoreType): Unit", "member" : "experiments.combination.CombinationAAIMBenchmark.saveResultsDefault", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#saveResultsDefault(cardIndex:Int,levelsIndex:Int,storeType:potential.ValueStoreTypes.ValueStoreType):Unit", "kind" : "def"}, {"label" : "aaimEvaluation", "tail" : "(cardIndex: Int, levelsIndex: Int): Unit", "member" : "experiments.combination.CombinationAAIMBenchmark.aaimEvaluation", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#aaimEvaluation(cardIndex:Int,levelsIndex:Int):Unit", "kind" : "def"}, {"label" : "treeEvaluation", "tail" : "(cardIndex: Int, levelsIndex: Int): Unit", "member" : "experiments.combination.CombinationAAIMBenchmark.treeEvaluation", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#treeEvaluation(cardIndex:Int,levelsIndex:Int):Unit", "kind" : "def"}, {"label" : "tableEvaluation", "tail" : "(cardIndex: Int, levelsIndex: Int): Unit", "member" : "experiments.combination.CombinationAAIMBenchmark.tableEvaluation", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#tableEvaluation(cardIndex:Int,levelsIndex:Int):Unit", "kind" : "def"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "experiments.combination.CombinationAAIMBenchmark.standardConfig", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "functions", "tail" : ": List[potential.OperatorType.Value]", "member" : "experiments.combination.CombinationAAIMBenchmark.functions", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#functions:List[potential.OperatorType.Value]", "kind" : "val"}, {"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.combination.CombinationAAIMBenchmark.representations", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "times", "tail" : ": HashMap[(ValueStoreType, OperatorType, Int, Int), ArrayBuffer[Double]]", "member" : "experiments.combination.CombinationAAIMBenchmark.times", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#times:scala.collection.mutable.HashMap[(potential.ValueStoreTypes.ValueStoreType,potential.OperatorType.OperatorType,Int,Int),scala.collection.mutable.ArrayBuffer[Double]]", "kind" : "val"}, {"label" : "numberPotentials", "tail" : ": Int", "member" : "experiments.combination.CombinationAAIMBenchmark.numberPotentials", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#numberPotentials:Int", "kind" : "val"}, {"label" : "levels", "tail" : ": List[Int]", "member" : "experiments.combination.CombinationAAIMBenchmark.levels", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#levels:List[Int]", "kind" : "val"}, {"label" : "minCard", "tail" : ": List[Int]", "member" : "experiments.combination.CombinationAAIMBenchmark.minCard", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#minCard:List[Int]", "kind" : "val"}, {"label" : "maxCard", "tail" : ": List[Int]", "member" : "experiments.combination.CombinationAAIMBenchmark.maxCard", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#maxCard:List[Int]", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.combination.CombinationAAIMBenchmark.folder", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#folder:String", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/combination\/CombinationAAIMBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.combination.CombinationCheck", "shortDescription" : "class for testing combination on a particular pairof potentials", "object" : "experiments\/combination\/CombinationCheck$.html", "members_object" : [{"label" : "resultAAIM", "tail" : ": Potential", "member" : "experiments.combination.CombinationCheck.resultAAIM", "link" : "experiments\/combination\/CombinationCheck$.html#resultAAIM:potential.Potential", "kind" : "val"}, {"label" : "pot2AAIM", "tail" : ": Potential", "member" : "experiments.combination.CombinationCheck.pot2AAIM", "link" : "experiments\/combination\/CombinationCheck$.html#pot2AAIM:potential.Potential", "kind" : "val"}, {"label" : "pot1AAIM", "tail" : ": Potential", "member" : "experiments.combination.CombinationCheck.pot1AAIM", "link" : "experiments\/combination\/CombinationCheck$.html#pot1AAIM:potential.Potential", "kind" : "val"}, {"label" : "index", "tail" : ": Long", "member" : "experiments.combination.CombinationCheck.index", "link" : "experiments\/combination\/CombinationCheck$.html#index:Long", "kind" : "var"}, {"label" : "resultTree", "tail" : ": Potential", "member" : "experiments.combination.CombinationCheck.resultTree", "link" : "experiments\/combination\/CombinationCheck$.html#resultTree:potential.Potential", "kind" : "val"}, {"label" : "pot2Tree", "tail" : ": Potential", "member" : "experiments.combination.CombinationCheck.pot2Tree", "link" : "experiments\/combination\/CombinationCheck$.html#pot2Tree:potential.Potential", "kind" : "val"}, {"label" : "pot1Tree", "tail" : ": Potential", "member" : "experiments.combination.CombinationCheck.pot1Tree", "link" : "experiments\/combination\/CombinationCheck$.html#pot1Tree:potential.Potential", "kind" : "val"}, {"label" : "resultTable", "tail" : ": Potential", "member" : "experiments.combination.CombinationCheck.resultTable", "link" : "experiments\/combination\/CombinationCheck$.html#resultTable:potential.Potential", "kind" : "val"}, {"label" : "potential2", "tail" : ": Potential", "member" : "experiments.combination.CombinationCheck.potential2", "link" : "experiments\/combination\/CombinationCheck$.html#potential2:potential.Potential", "kind" : "val"}, {"label" : "potential1", "tail" : ": Potential", "member" : "experiments.combination.CombinationCheck.potential1", "link" : "experiments\/combination\/CombinationCheck$.html#potential1:potential.Potential", "kind" : "val"}, {"label" : "filename2", "tail" : ": String", "member" : "experiments.combination.CombinationCheck.filename2", "link" : "experiments\/combination\/CombinationCheck$.html#filename2:String", "kind" : "val"}, {"label" : "filename1", "tail" : ": String", "member" : "experiments.combination.CombinationCheck.filename1", "link" : "experiments\/combination\/CombinationCheck$.html#filename1:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.combination.CombinationCheck.folder", "link" : "experiments\/combination\/CombinationCheck$.html#folder:String", "kind" : "val"}, {"label" : "id", "tail" : ": Int", "member" : "experiments.combination.CombinationCheck.id", "link" : "experiments\/combination\/CombinationCheck$.html#id:Int", "kind" : "val"}, {"label" : "levels", "tail" : ": Int", "member" : "experiments.combination.CombinationCheck.levels", "link" : "experiments\/combination\/CombinationCheck$.html#levels:Int", "kind" : "val"}, {"label" : "minCard", "tail" : ": Int", "member" : "experiments.combination.CombinationCheck.minCard", "link" : "experiments\/combination\/CombinationCheck$.html#minCard:Int", "kind" : "val"}, {"label" : "maxCard", "tail" : ": Int", "member" : "experiments.combination.CombinationCheck.maxCard", "link" : "experiments\/combination\/CombinationCheck$.html#maxCard:Int", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/combination\/CombinationCheck$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/combination\/CombinationCheck$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/combination\/CombinationCheck$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/combination\/CombinationCheck$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/combination\/CombinationCheck$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/combination\/CombinationCheck$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/combination\/CombinationCheck$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/combination\/CombinationCheck$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/combination\/CombinationCheck$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/combination\/CombinationCheck$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/combination\/CombinationCheck$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/CombinationCheck$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/CombinationCheck$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/CombinationCheck$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/combination\/CombinationCheck$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/combination\/CombinationCheck$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/combination\/CombinationCheck$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/combination\/CombinationCheck$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/combination\/CombinationCheck$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/combination\/CombinationCheck$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/combination\/CombinationCheck$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/combination\/CombinationCheck$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/combination\/CombinationCheck$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark", "shortDescription" : "class for testing combination on a particular pairof potentials", "object" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html", "members_object" : [{"label" : "timeAAIM", "tail" : ": Quantity[Double]", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.timeAAIM", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#timeAAIM:org.scalameter.Quantity[Double]", "kind" : "var"}, {"label" : "pot2AAIM", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.pot2AAIM", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#pot2AAIM:potential.Potential", "kind" : "val"}, {"label" : "pot1AAIM", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.pot1AAIM", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#pot1AAIM:potential.Potential", "kind" : "val"}, {"label" : "timeTree", "tail" : ": Double", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.timeTree", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#timeTree:Double", "kind" : "val"}, {"label" : "pot2Tree", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.pot2Tree", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#pot2Tree:potential.Potential", "kind" : "val"}, {"label" : "pot1Tree", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.pot1Tree", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#pot1Tree:potential.Potential", "kind" : "val"}, {"label" : "timeTable", "tail" : ": Double", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.timeTable", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#timeTable:Double", "kind" : "val"}, {"label" : "potential2", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.potential2", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#potential2:potential.Potential", "kind" : "val"}, {"label" : "potential1", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.potential1", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#potential1:potential.Potential", "kind" : "val"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.standardConfig", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "filename2", "tail" : ": String", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.filename2", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#filename2:String", "kind" : "val"}, {"label" : "filename1", "tail" : ": String", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.filename1", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#filename1:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.folder", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#folder:String", "kind" : "val"}, {"label" : "id", "tail" : ": Int", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.id", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#id:Int", "kind" : "val"}, {"label" : "levels", "tail" : ": Int", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.levels", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#levels:Int", "kind" : "val"}, {"label" : "minCard", "tail" : ": Int", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.minCard", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#minCard:Int", "kind" : "val"}, {"label" : "maxCard", "tail" : ": Int", "member" : "experiments.combination.SinglePotentialCombinationAAIMBenchmark.maxCard", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#maxCard:Int", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/combination\/SinglePotentialCombinationAAIMBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.combination.SinglePotentialCombinationASIMBenchmark", "shortDescription" : "class for testing combination on a particular pairof potentials", "object" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html", "members_object" : [{"label" : "timeASIM", "tail" : ": Quantity[Double]", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.timeASIM", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#timeASIM:org.scalameter.Quantity[Double]", "kind" : "var"}, {"label" : "pot2ASIM", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.pot2ASIM", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#pot2ASIM:potential.Potential", "kind" : "val"}, {"label" : "pot1ASIM", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.pot1ASIM", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#pot1ASIM:potential.Potential", "kind" : "val"}, {"label" : "timeTree", "tail" : ": Double", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.timeTree", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#timeTree:Double", "kind" : "val"}, {"label" : "pot2Tree", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.pot2Tree", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#pot2Tree:potential.Potential", "kind" : "val"}, {"label" : "pot1Tree", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.pot1Tree", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#pot1Tree:potential.Potential", "kind" : "val"}, {"label" : "timeTable", "tail" : ": Double", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.timeTable", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#timeTable:Double", "kind" : "val"}, {"label" : "potential2", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.potential2", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#potential2:potential.Potential", "kind" : "val"}, {"label" : "potential1", "tail" : ": Potential", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.potential1", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#potential1:potential.Potential", "kind" : "val"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.standardConfig", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "filename2", "tail" : ": String", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.filename2", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#filename2:String", "kind" : "val"}, {"label" : "filename1", "tail" : ": String", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.filename1", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#filename1:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.folder", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#folder:String", "kind" : "val"}, {"label" : "id", "tail" : ": Int", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.id", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#id:Int", "kind" : "val"}, {"label" : "levels", "tail" : ": Int", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.levels", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#levels:Int", "kind" : "val"}, {"label" : "minCard", "tail" : ": Int", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.minCard", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#minCard:Int", "kind" : "val"}, {"label" : "maxCard", "tail" : ": Int", "member" : "experiments.combination.SinglePotentialCombinationASIMBenchmark.maxCard", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#maxCard:Int", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/combination\/SinglePotentialCombinationASIMBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "potential.grain" : [{"name" : "potential.grain.Grain", "shortDescription" : "Class for supporting grains.", "object" : "potential\/grain\/Grain$.html", "members_object" : [{"label" : "apply", "tail" : "(index: Long): Grain", "member" : "potential.grain.Grain.apply", "link" : "potential\/grain\/Grain$.html#apply(index:Long):potential.grain.Grain", "kind" : "def"}, {"label" : "apply", "tail" : "(indices: Array[Long]): Grain", "member" : "potential.grain.Grain.apply", "link" : "potential\/grain\/Grain$.html#apply(indices:Array[Long]):potential.grain.Grain", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/grain\/Grain$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/grain\/Grain$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/grain\/Grain$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/grain\/Grain$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/grain\/Grain$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/grain\/Grain$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/grain\/Grain$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/Grain$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/Grain$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/Grain$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/grain\/Grain$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/grain\/Grain$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/grain\/Grain$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/grain\/Grain$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/grain\/Grain$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/grain\/Grain$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/grain\/Grain$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/grain\/Grain$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/grain\/Grain$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "potential.grain.Grain.toString", "link" : "potential\/grain\/Grain.html#toString():String", "kind" : "def"}, {"label" : "getObjectSize", "tail" : "(): Long", "member" : "potential.grain.Grain.getObjectSize", "link" : "potential\/grain\/Grain.html#getObjectSize:Long", "kind" : "def"}, {"label" : "getSize", "tail" : "(): Long", "member" : "potential.grain.Grain.getSize", "link" : "potential\/grain\/Grain.html#getSize:Long", "kind" : "def"}, {"label" : "compareTo", "tail" : "(other: Grain): Int", "member" : "potential.grain.Grain.compareTo", "link" : "potential\/grain\/Grain.html#compareTo(other:potential.grain.Grain):Int", "kind" : "def"}, {"label" : "+", "tail" : "(index: Long): Option[Grain]", "member" : "potential.grain.Grain.+", "link" : "potential\/grain\/Grain.html#+(index:Long):Option[potential.grain.Grain]", "kind" : "def"}, {"label" : "isConsecutiveGrain", "tail" : "(grain: Grain): Boolean", "member" : "potential.grain.Grain.isConsecutiveGrain", "link" : "potential\/grain\/Grain.html#isConsecutiveGrain(grain:potential.grain.Grain):Boolean", "kind" : "def"}, {"label" : "isConsecutiveIndex", "tail" : "(index: Long): Boolean", "member" : "potential.grain.Grain.isConsecutiveIndex", "link" : "potential\/grain\/Grain.html#isConsecutiveIndex(index:Long):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(index: Long): Boolean", "member" : "potential.grain.Grain.contains", "link" : "potential\/grain\/Grain.html#contains(index:Long):Boolean", "kind" : "def"}, {"member" : "potential.grain.Grain#<init>", "error" : "unsupported entity"}, {"label" : "end", "tail" : ": Long", "member" : "potential.grain.Grain.end", "link" : "potential\/grain\/Grain.html#end:Long", "kind" : "val"}, {"label" : "start", "tail" : ": Long", "member" : "potential.grain.Grain.start", "link" : "potential\/grain\/Grain.html#start:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/grain\/Grain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/grain\/Grain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/grain\/Grain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/grain\/Grain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/grain\/Grain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/grain\/Grain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/grain\/Grain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/Grain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/Grain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/Grain.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/grain\/Grain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/grain\/Grain.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/grain\/Grain.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/grain\/Grain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/grain\/Grain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/grain\/Grain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/grain\/Grain.html", "kind" : "case class"}, {"name" : "potential.grain.GrainList", "shortDescription" : "Class for storing grains with a list", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "potential.grain.GrainList.toString", "link" : "potential\/grain\/GrainList.html#toString():String", "kind" : "def"}, {"label" : "getAverageLength", "tail" : "(): Double", "member" : "potential.grain.GrainList.getAverageLength", "link" : "potential\/grain\/GrainList.html#getAverageLength:Double", "kind" : "def"}, {"label" : "getMaxLength", "tail" : "(): Long", "member" : "potential.grain.GrainList.getMaxLength", "link" : "potential\/grain\/GrainList.html#getMaxLength:Long", "kind" : "def"}, {"label" : "getNumberGrains", "tail" : "(): Int", "member" : "potential.grain.GrainList.getNumberGrains", "link" : "potential\/grain\/GrainList.html#getNumberGrains:Int", "kind" : "def"}, {"label" : "getMemorySize", "tail" : "(): Int", "member" : "potential.grain.GrainList.getMemorySize", "link" : "potential\/grain\/GrainList.html#getMemorySize:Int", "kind" : "def"}, {"label" : "getSize", "tail" : "(): Long", "member" : "potential.grain.GrainList.getSize", "link" : "potential\/grain\/GrainList.html#getSize:Long", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.grain.GrainList.getIndices", "link" : "potential\/grain\/GrainList.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "findIndex", "tail" : "(index: Long): Grain", "member" : "potential.grain.GrainList.findIndex", "link" : "potential\/grain\/GrainList.html#findIndex(index:Long):potential.grain.Grain", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Grain]", "member" : "potential.grain.GrainList.toList", "link" : "potential\/grain\/GrainList.html#toList:List[potential.grain.Grain]", "kind" : "def"}, {"label" : "addIndex", "tail" : "(index: Long): GrainList", "member" : "potential.grain.GrainList.addIndex", "link" : "potential\/grain\/GrainList.html#addIndex(index:Long):potential.grain.GrainList", "kind" : "def"}, {"member" : "potential.grain.GrainList#<init>", "error" : "unsupported entity"}, {"label" : "list", "tail" : ": List[Grain]", "member" : "potential.grain.GrainList.list", "link" : "potential\/grain\/GrainList.html#list:List[potential.grain.Grain]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/grain\/GrainList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/grain\/GrainList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/grain\/GrainList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/grain\/GrainList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/grain\/GrainList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/grain\/GrainList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/grain\/GrainList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/GrainList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/GrainList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/GrainList.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/grain\/GrainList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/grain\/GrainList.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/grain\/GrainList.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/grain\/GrainList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/grain\/GrainList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/grain\/GrainList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/grain\/GrainList.html", "kind" : "case class"}, {"name" : "potential.grain.GrainSet", "shortDescription" : "Class for storing a collection of grains using a TreeSet", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "potential.grain.GrainSet.toString", "link" : "potential\/grain\/GrainSet.html#toString():String", "kind" : "def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.grain.GrainSet.getMemorySize", "link" : "potential\/grain\/GrainSet.html#getMemorySize:Long", "kind" : "def"}, {"label" : "getSize", "tail" : "(): Long", "member" : "potential.grain.GrainSet.getSize", "link" : "potential\/grain\/GrainSet.html#getSize:Long", "kind" : "def"}, {"label" : "getNumberGrains", "tail" : "(): Int", "member" : "potential.grain.GrainSet.getNumberGrains", "link" : "potential\/grain\/GrainSet.html#getNumberGrains:Int", "kind" : "def"}, {"label" : "getNumberOfIndices", "tail" : "(): Long", "member" : "potential.grain.GrainSet.getNumberOfIndices", "link" : "potential\/grain\/GrainSet.html#getNumberOfIndices:Long", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.grain.GrainSet.getIndices", "link" : "potential\/grain\/GrainSet.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "findIndex", "tail" : "(index: Long): Grain", "member" : "potential.grain.GrainSet.findIndex", "link" : "potential\/grain\/GrainSet.html#findIndex(index:Long):potential.grain.Grain", "kind" : "def"}, {"label" : "toSet", "tail" : "(): TreeSet[Grain]", "member" : "potential.grain.GrainSet.toSet", "link" : "potential\/grain\/GrainSet.html#toSet:scala.collection.immutable.TreeSet[potential.grain.Grain]", "kind" : "def"}, {"label" : "addIndex", "tail" : "(index: Long): GrainSet", "member" : "potential.grain.GrainSet.addIndex", "link" : "potential\/grain\/GrainSet.html#addIndex(index:Long):potential.grain.GrainSet", "kind" : "def"}, {"member" : "potential.grain.GrainSet#<init>", "error" : "unsupported entity"}, {"label" : "set", "tail" : ": TreeSet[Grain]", "member" : "potential.grain.GrainSet.set", "link" : "potential\/grain\/GrainSet.html#set:scala.collection.immutable.TreeSet[potential.grain.Grain]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/grain\/GrainSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/grain\/GrainSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/grain\/GrainSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/grain\/GrainSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/grain\/GrainSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/grain\/GrainSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/grain\/GrainSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/GrainSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/GrainSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/grain\/GrainSet.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/grain\/GrainSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/grain\/GrainSet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/grain\/GrainSet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/grain\/GrainSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/grain\/GrainSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/grain\/GrainSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/grain\/GrainSet.html", "kind" : "case class"}], "parser" : [{"name" : "parser.BnetParser", "shortDescription" : "Class for parsing Bayesian networks in net (bnlearn) format", "members_class" : [{"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "parser\/BnetParser.html#OnceParser[+T<:<?>]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "parser\/BnetParser.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "parser\/BnetParser.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "parser\/BnetParser.html#Success[+T]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "parser\/BnetParser.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "parser\/BnetParser.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "parser\/BnetParser.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "parser\/BnetParser.html#ParseResult[+T]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "removeCharacter", "tail" : "(target: String, character: Char): String", "member" : "parser.BnetParser.removeCharacter", "link" : "parser\/BnetParser.html#removeCharacter(target:String,character:Char):String", "kind" : "def"}, {"label" : "probValue", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.probValue", "link" : "parser\/BnetParser.html#probValue:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "valuesPattern", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.valuesPattern", "link" : "parser\/BnetParser.html#valuesPattern:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "values", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.values", "link" : "parser\/BnetParser.html#values:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "data", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.data", "link" : "parser\/BnetParser.html#data:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "potentialData", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.potentialData", "link" : "parser\/BnetParser.html#potentialData:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "variables", "tail" : "(): Parser[(String, List[String])]", "member" : "parser.BnetParser.variables", "link" : "parser\/BnetParser.html#variables:BnetParser.this.Parser[(String,List[String])]", "kind" : "def"}, {"label" : "potentialDomain", "tail" : "(): Parser[(String, List[String])]", "member" : "parser.BnetParser.potentialDomain", "link" : "parser\/BnetParser.html#potentialDomain:BnetParser.this.Parser[(String,List[String])]", "kind" : "def"}, {"label" : "potential", "tail" : "(): Parser[((String, List[String]), List[Double])]", "member" : "parser.BnetParser.potential", "link" : "parser\/BnetParser.html#potential:BnetParser.this.Parser[((String,List[String]),List[Double])]", "kind" : "def"}, {"label" : "potentials", "tail" : "(): Parser[List[((String, List[String]), List[Double])]]", "member" : "parser.BnetParser.potentials", "link" : "parser\/BnetParser.html#potentials:BnetParser.this.Parser[List[((String,List[String]),List[Double])]]", "kind" : "def"}, {"label" : "states", "tail" : "(): Parser[List[String]]", "member" : "parser.BnetParser.states", "link" : "parser\/BnetParser.html#states:BnetParser.this.Parser[List[String]]", "kind" : "def"}, {"label" : "nodeStates", "tail" : "(): Parser[List[String]]", "member" : "parser.BnetParser.nodeStates", "link" : "parser\/BnetParser.html#nodeStates:BnetParser.this.Parser[List[String]]", "kind" : "def"}, {"label" : "nodeID", "tail" : "(): Parser[String]", "member" : "parser.BnetParser.nodeID", "link" : "parser\/BnetParser.html#nodeID:BnetParser.this.Parser[String]", "kind" : "def"}, {"label" : "nodeDefinition", "tail" : "(): Parser[(String, List[String])]", "member" : "parser.BnetParser.nodeDefinition", "link" : "parser\/BnetParser.html#nodeDefinition:BnetParser.this.Parser[(String,List[String])]", "kind" : "def"}, {"label" : "nodes", "tail" : "(): Parser[List[(String, List[String])]]", "member" : "parser.BnetParser.nodes", "link" : "parser\/BnetParser.html#nodes:BnetParser.this.Parser[List[(String,List[String])]]", "kind" : "def"}, {"label" : "netName", "tail" : "(): Parser[String]", "member" : "parser.BnetParser.netName", "link" : "parser\/BnetParser.html#netName:BnetParser.this.Parser[String]", "kind" : "def"}, {"label" : "net", "tail" : "(): Parser[String]", "member" : "parser.BnetParser.net", "link" : "parser\/BnetParser.html#net:BnetParser.this.Parser[String]", "kind" : "def"}, {"label" : "component", "tail" : "(): Parser[Bnet]", "member" : "parser.BnetParser.component", "link" : "parser\/BnetParser.html#component:BnetParser.this.Parser[bnet.Bnet]", "kind" : "def"}, {"member" : "parser.BnetParser#<init>", "error" : "unsupported entity"}, {"label" : "floatingPointNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.floatingPointNumber", "link" : "parser\/BnetParser.html#floatingPointNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "stringLiteral", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.stringLiteral", "link" : "parser\/BnetParser.html#stringLiteral:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "decimalNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.decimalNumber", "link" : "parser\/BnetParser.html#decimalNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "wholeNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.wholeNumber", "link" : "parser\/BnetParser.html#wholeNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "ident", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.ident", "link" : "parser\/BnetParser.html#ident:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/BnetParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/BnetParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/BnetParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/BnetParser.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/BnetParser.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/BnetParser.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.phrase", "link" : "parser\/BnetParser.html#phrase[T](p:RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "parser\/BnetParser.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "parser\/BnetParser.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "parser\/BnetParser.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "parser\/BnetParser.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "skipWhitespace", "tail" : "(): Boolean", "member" : "scala.util.parsing.combinator.RegexParsers.skipWhitespace", "link" : "parser\/BnetParser.html#skipWhitespace:Boolean", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "scala.util.parsing.combinator.RegexParsers.whiteSpace", "link" : "parser\/BnetParser.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "parser\/BnetParser.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) ⇒ List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "parser\/BnetParser.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "parser\/BnetParser.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: ⇒ Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "parser\/BnetParser.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: ⇒ Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "parser\/BnetParser.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, U) ⇒ U], combine: (T, U) ⇒ U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "parser\/BnetParser.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: ⇒ Parser[T], p: ⇒ Parser[U], q: ⇒ Parser[(T, U) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "parser\/BnetParser.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, T) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "parser\/BnetParser.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "parser\/BnetParser.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "parser\/BnetParser.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: ⇒ Parser[T], p0: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "parser\/BnetParser.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "parser\/BnetParser.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "parser\/BnetParser.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "parser\/BnetParser.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: ⇒ Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "parser\/BnetParser.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "parser\/BnetParser.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "parser\/BnetParser.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "parser\/BnetParser.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(arg0: (ES) ⇒ Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "parser\/BnetParser.html#acceptSeq[ES](es:ES)(implicitevidence$2:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "parser\/BnetParser.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) ⇒ Boolean)(err: (Elem) ⇒ String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "parser\/BnetParser.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/BnetParser.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(arg0: (ES) ⇒ List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/BnetParser.html#accept[ES](es:ES)(implicitevidence$1:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/BnetParser.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "parser\/BnetParser.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) ⇒ Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "parser\/BnetParser.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "parser\/BnetParser.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "parser\/BnetParser.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "parser\/BnetParser.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "parser\/BnetParser.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "parser\/BnetParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "parser\/BnetParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "parser\/BnetParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "parser\/BnetParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "parser\/BnetParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "parser\/BnetParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "parser\/BnetParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/BnetParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/BnetParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/BnetParser.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "parser\/BnetParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "parser\/BnetParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "parser\/BnetParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "parser\/BnetParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "parser\/BnetParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "parser\/BnetParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "parser\/BnetParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "parser\/BnetParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "parser\/BnetParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "parser\/BnetParser.html", "kind" : "class"}, {"name" : "parser.BnetParserMain", "shortDescription" : "Object offering a main method for making the parserof a net.", "object" : "parser\/BnetParserMain$.html", "members_object" : [{"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "parser\/BnetParserMain$.html#OnceParser[+T]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "parser\/BnetParserMain$.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "parser\/BnetParserMain$.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "parser\/BnetParserMain$.html#Success[+T]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "parser\/BnetParserMain$.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "parser\/BnetParserMain$.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "parser\/BnetParserMain$.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "parser\/BnetParserMain$.html#ParseResult[+T]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "parser.BnetParserMain.main", "link" : "parser\/BnetParserMain$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "removeCharacter", "tail" : "(target: String, character: Char): String", "member" : "parser.BnetParser.removeCharacter", "link" : "parser\/BnetParserMain$.html#removeCharacter(target:String,character:Char):String", "kind" : "def"}, {"label" : "probValue", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.probValue", "link" : "parser\/BnetParserMain$.html#probValue:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "valuesPattern", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.valuesPattern", "link" : "parser\/BnetParserMain$.html#valuesPattern:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "values", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.values", "link" : "parser\/BnetParserMain$.html#values:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "data", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.data", "link" : "parser\/BnetParserMain$.html#data:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "potentialData", "tail" : "(): Parser[List[Double]]", "member" : "parser.BnetParser.potentialData", "link" : "parser\/BnetParserMain$.html#potentialData:BnetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "variables", "tail" : "(): Parser[(String, List[String])]", "member" : "parser.BnetParser.variables", "link" : "parser\/BnetParserMain$.html#variables:BnetParser.this.Parser[(String,List[String])]", "kind" : "def"}, {"label" : "potentialDomain", "tail" : "(): Parser[(String, List[String])]", "member" : "parser.BnetParser.potentialDomain", "link" : "parser\/BnetParserMain$.html#potentialDomain:BnetParser.this.Parser[(String,List[String])]", "kind" : "def"}, {"label" : "potential", "tail" : "(): Parser[((String, List[String]), List[Double])]", "member" : "parser.BnetParser.potential", "link" : "parser\/BnetParserMain$.html#potential:BnetParser.this.Parser[((String,List[String]),List[Double])]", "kind" : "def"}, {"label" : "potentials", "tail" : "(): Parser[List[((String, List[String]), List[Double])]]", "member" : "parser.BnetParser.potentials", "link" : "parser\/BnetParserMain$.html#potentials:BnetParser.this.Parser[List[((String,List[String]),List[Double])]]", "kind" : "def"}, {"label" : "states", "tail" : "(): Parser[List[String]]", "member" : "parser.BnetParser.states", "link" : "parser\/BnetParserMain$.html#states:BnetParser.this.Parser[List[String]]", "kind" : "def"}, {"label" : "nodeStates", "tail" : "(): Parser[List[String]]", "member" : "parser.BnetParser.nodeStates", "link" : "parser\/BnetParserMain$.html#nodeStates:BnetParser.this.Parser[List[String]]", "kind" : "def"}, {"label" : "nodeID", "tail" : "(): Parser[String]", "member" : "parser.BnetParser.nodeID", "link" : "parser\/BnetParserMain$.html#nodeID:BnetParser.this.Parser[String]", "kind" : "def"}, {"label" : "nodeDefinition", "tail" : "(): Parser[(String, List[String])]", "member" : "parser.BnetParser.nodeDefinition", "link" : "parser\/BnetParserMain$.html#nodeDefinition:BnetParser.this.Parser[(String,List[String])]", "kind" : "def"}, {"label" : "nodes", "tail" : "(): Parser[List[(String, List[String])]]", "member" : "parser.BnetParser.nodes", "link" : "parser\/BnetParserMain$.html#nodes:BnetParser.this.Parser[List[(String,List[String])]]", "kind" : "def"}, {"label" : "netName", "tail" : "(): Parser[String]", "member" : "parser.BnetParser.netName", "link" : "parser\/BnetParserMain$.html#netName:BnetParser.this.Parser[String]", "kind" : "def"}, {"label" : "net", "tail" : "(): Parser[String]", "member" : "parser.BnetParser.net", "link" : "parser\/BnetParserMain$.html#net:BnetParser.this.Parser[String]", "kind" : "def"}, {"label" : "component", "tail" : "(): Parser[Bnet]", "member" : "parser.BnetParser.component", "link" : "parser\/BnetParserMain$.html#component:BnetParser.this.Parser[bnet.Bnet]", "kind" : "def"}, {"label" : "floatingPointNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.floatingPointNumber", "link" : "parser\/BnetParserMain$.html#floatingPointNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "stringLiteral", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.stringLiteral", "link" : "parser\/BnetParserMain$.html#stringLiteral:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "decimalNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.decimalNumber", "link" : "parser\/BnetParserMain$.html#decimalNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "wholeNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.wholeNumber", "link" : "parser\/BnetParserMain$.html#wholeNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "ident", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.ident", "link" : "parser\/BnetParserMain$.html#ident:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/BnetParserMain$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/BnetParserMain$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/BnetParserMain$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/BnetParserMain$.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/BnetParserMain$.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/BnetParserMain$.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.phrase", "link" : "parser\/BnetParserMain$.html#phrase[T](p:RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "parser\/BnetParserMain$.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "parser\/BnetParserMain$.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "parser\/BnetParserMain$.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "parser\/BnetParserMain$.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "skipWhitespace", "tail" : "(): Boolean", "member" : "scala.util.parsing.combinator.RegexParsers.skipWhitespace", "link" : "parser\/BnetParserMain$.html#skipWhitespace:Boolean", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "scala.util.parsing.combinator.RegexParsers.whiteSpace", "link" : "parser\/BnetParserMain$.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "parser\/BnetParserMain$.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) ⇒ List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "parser\/BnetParserMain$.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "parser\/BnetParserMain$.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: ⇒ Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "parser\/BnetParserMain$.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: ⇒ Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "parser\/BnetParserMain$.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, U) ⇒ U], combine: (T, U) ⇒ U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "parser\/BnetParserMain$.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: ⇒ Parser[T], p: ⇒ Parser[U], q: ⇒ Parser[(T, U) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "parser\/BnetParserMain$.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, T) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "parser\/BnetParserMain$.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "parser\/BnetParserMain$.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "parser\/BnetParserMain$.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: ⇒ Parser[T], p0: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "parser\/BnetParserMain$.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "parser\/BnetParserMain$.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "parser\/BnetParserMain$.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "parser\/BnetParserMain$.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: ⇒ Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "parser\/BnetParserMain$.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "parser\/BnetParserMain$.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "parser\/BnetParserMain$.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "parser\/BnetParserMain$.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(arg0: (ES) ⇒ Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "parser\/BnetParserMain$.html#acceptSeq[ES](es:ES)(implicitevidence$2:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "parser\/BnetParserMain$.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) ⇒ Boolean)(err: (Elem) ⇒ String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "parser\/BnetParserMain$.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/BnetParserMain$.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(arg0: (ES) ⇒ List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/BnetParserMain$.html#accept[ES](es:ES)(implicitevidence$1:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/BnetParserMain$.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "parser\/BnetParserMain$.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) ⇒ Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "parser\/BnetParserMain$.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "parser\/BnetParserMain$.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "parser\/BnetParserMain$.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "parser\/BnetParserMain$.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "parser\/BnetParserMain$.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "parser\/BnetParserMain$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "parser\/BnetParserMain$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "parser\/BnetParserMain$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "parser\/BnetParserMain$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "parser\/BnetParserMain$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "parser\/BnetParserMain$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "parser\/BnetParserMain$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/BnetParserMain$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/BnetParserMain$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/BnetParserMain$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "parser\/BnetParserMain$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "parser\/BnetParserMain$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "parser\/BnetParserMain$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "parser\/BnetParserMain$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "parser\/BnetParserMain$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "parser\/BnetParserMain$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "parser\/BnetParserMain$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "parser\/BnetParserMain$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "parser\/BnetParserMain$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "parser.UAIDirectParsing", "shortDescription" : "Object for making a direct read of UAI files", "object" : "parser\/UAIDirectParsing$.html", "members_object" : [{"label" : "numberParameters", "tail" : ": Long", "member" : "parser.UAIDirectParsing.numberParameters", "link" : "parser\/UAIDirectParsing$.html#numberParameters:Long", "kind" : "val"}, {"label" : "info", "tail" : ": (Int, Int, Int, Double, Int, Int)", "member" : "parser.UAIDirectParsing.info", "link" : "parser\/UAIDirectParsing$.html#info:(Int,Int,Int,Double,Int,Int)", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "parser.UAIDirectParsing.bnet", "link" : "parser\/UAIDirectParsing$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "filename", "tail" : ": String", "member" : "parser.UAIDirectParsing.filename", "link" : "parser\/UAIDirectParsing$.html#filename:String", "kind" : "val"}, {"label" : "createPotential", "tail" : "(index: Int, content: List[String]): Int", "member" : "parser.UAIDirectParsing.createPotential", "link" : "parser\/UAIDirectParsing$.html#createPotential(index:Int,content:List[String]):Int", "kind" : "def"}, {"label" : "createPotentials", "tail" : "(content: List[String]): Unit", "member" : "parser.UAIDirectParsing.createPotentials", "link" : "parser\/UAIDirectParsing$.html#createPotentials(content:List[String]):Unit", "kind" : "def"}, {"label" : "createPotentialDomains", "tail" : "(content: List[String]): Unit", "member" : "parser.UAIDirectParsing.createPotentialDomains", "link" : "parser\/UAIDirectParsing$.html#createPotentialDomains(content:List[String]):Unit", "kind" : "def"}, {"label" : "createVariables", "tail" : "(content: List[String]): Map[Int, Variable]", "member" : "parser.UAIDirectParsing.createVariables", "link" : "parser\/UAIDirectParsing$.html#createVariables(content:List[String]):scala.collection.immutable.Map[Int,base.Variable]", "kind" : "def"}, {"label" : "process", "tail" : "(fileName: String): Bnet", "member" : "parser.UAIDirectParsing.process", "link" : "parser\/UAIDirectParsing$.html#process(fileName:String):bnet.Bnet", "kind" : "def"}, {"label" : "potentials", "tail" : ": List[Potential]", "member" : "parser.UAIDirectParsing.potentials", "link" : "parser\/UAIDirectParsing$.html#potentials:List[potential.Potential]", "kind" : "var"}, {"label" : "domains", "tail" : ": List[VariableSet]", "member" : "parser.UAIDirectParsing.domains", "link" : "parser\/UAIDirectParsing$.html#domains:List[base.VariableSet]", "kind" : "var"}, {"label" : "variables", "tail" : ": Map[Int, Variable]", "member" : "parser.UAIDirectParsing.variables", "link" : "parser\/UAIDirectParsing$.html#variables:Map[Int,base.Variable]", "kind" : "var"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "parser\/UAIDirectParsing$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "parser\/UAIDirectParsing$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "parser\/UAIDirectParsing$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "parser\/UAIDirectParsing$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "parser\/UAIDirectParsing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "parser\/UAIDirectParsing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "parser\/UAIDirectParsing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "parser\/UAIDirectParsing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "parser\/UAIDirectParsing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "parser\/UAIDirectParsing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "parser\/UAIDirectParsing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/UAIDirectParsing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/UAIDirectParsing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/UAIDirectParsing$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "parser\/UAIDirectParsing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "parser\/UAIDirectParsing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "parser\/UAIDirectParsing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "parser\/UAIDirectParsing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "parser\/UAIDirectParsing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "parser\/UAIDirectParsing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "parser\/UAIDirectParsing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "parser\/UAIDirectParsing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "parser\/UAIDirectParsing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "parser.UAINetParser", "shortDescription" : "Class for parsing Bayesian networks using the format offiles for UAI competition", "members_class" : [{"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "parser\/UAINetParser.html#OnceParser[+T]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "parser\/UAINetParser.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "parser\/UAINetParser.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "parser\/UAINetParser.html#Success[+T]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "parser\/UAINetParser.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "parser\/UAINetParser.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "parser\/UAINetParser.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "parser\/UAINetParser.html#ParseResult[+T]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "param", "tail" : "(): Parser[Double]", "member" : "parser.UAINetParser.param", "link" : "parser\/UAINetParser.html#param:UAINetParser.this.Parser[Double]", "kind" : "def"}, {"label" : "line", "tail" : "(): Parser[List[Double]]", "member" : "parser.UAINetParser.line", "link" : "parser\/UAINetParser.html#line:UAINetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "parameters", "tail" : "(): Parser[List[Double]]", "member" : "parser.UAINetParser.parameters", "link" : "parser\/UAINetParser.html#parameters:UAINetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "potential", "tail" : "(): Parser[List[Double]]", "member" : "parser.UAINetParser.potential", "link" : "parser\/UAINetParser.html#potential:UAINetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "potentials", "tail" : "(numberRelations: Int): Parser[List[List[Double]]]", "member" : "parser.UAINetParser.potentials", "link" : "parser\/UAINetParser.html#potentials(numberRelations:Int):UAINetParser.this.Parser[List[List[Double]]]", "kind" : "def"}, {"label" : "variable", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.variable", "link" : "parser\/UAINetParser.html#variable:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "variables", "tail" : "(): Parser[List[Int]]", "member" : "parser.UAINetParser.variables", "link" : "parser\/UAINetParser.html#variables:UAINetParser.this.Parser[List[Int]]", "kind" : "def"}, {"label" : "relation", "tail" : "(): Parser[List[Int]]", "member" : "parser.UAINetParser.relation", "link" : "parser\/UAINetParser.html#relation:UAINetParser.this.Parser[List[Int]]", "kind" : "def"}, {"label" : "relations", "tail" : "(numberRelations: Int): Parser[List[List[Int]]]", "member" : "parser.UAINetParser.relations", "link" : "parser\/UAINetParser.html#relations(numberRelations:Int):UAINetParser.this.Parser[List[List[Int]]]", "kind" : "def"}, {"label" : "cardinality", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.cardinality", "link" : "parser\/UAINetParser.html#cardinality:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "cardinalities", "tail" : "(): Parser[List[Int]]", "member" : "parser.UAINetParser.cardinalities", "link" : "parser\/UAINetParser.html#cardinalities:UAINetParser.this.Parser[List[Int]]", "kind" : "def"}, {"label" : "relationsCounter", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.relationsCounter", "link" : "parser\/UAINetParser.html#relationsCounter:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "variablesCounter", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.variablesCounter", "link" : "parser\/UAINetParser.html#variablesCounter:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "modelType", "tail" : "(): Parser[String]", "member" : "parser.UAINetParser.modelType", "link" : "parser\/UAINetParser.html#modelType:UAINetParser.this.Parser[String]", "kind" : "def"}, {"label" : "component", "tail" : "(): Parser[Bnet]", "member" : "parser.UAINetParser.component", "link" : "parser\/UAINetParser.html#component:UAINetParser.this.Parser[bnet.Bnet]", "kind" : "def"}, {"label" : "skipWhitespace", "tail" : ": Boolean", "member" : "parser.UAINetParser.skipWhitespace", "link" : "parser\/UAINetParser.html#skipWhitespace:Boolean", "kind" : "val"}, {"label" : "numberParameters", "tail" : ": Int", "member" : "parser.UAINetParser.numberParameters", "link" : "parser\/UAINetParser.html#numberParameters:Int", "kind" : "var"}, {"label" : "numberRelations", "tail" : ": Int", "member" : "parser.UAINetParser.numberRelations", "link" : "parser\/UAINetParser.html#numberRelations:Int", "kind" : "var"}, {"label" : "numberVariables", "tail" : ": Int", "member" : "parser.UAINetParser.numberVariables", "link" : "parser\/UAINetParser.html#numberVariables:Int", "kind" : "var"}, {"label" : "integer", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.integer", "link" : "parser\/UAINetParser.html#integer:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "decimal", "tail" : "(): Parser[Double]", "member" : "parser.UAINetParser.decimal", "link" : "parser\/UAINetParser.html#decimal:UAINetParser.this.Parser[Double]", "kind" : "def"}, {"member" : "parser.UAINetParser#<init>", "error" : "unsupported entity"}, {"label" : "floatingPointNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.floatingPointNumber", "link" : "parser\/UAINetParser.html#floatingPointNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "stringLiteral", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.stringLiteral", "link" : "parser\/UAINetParser.html#stringLiteral:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "decimalNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.decimalNumber", "link" : "parser\/UAINetParser.html#decimalNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "wholeNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.wholeNumber", "link" : "parser\/UAINetParser.html#wholeNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "ident", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.ident", "link" : "parser\/UAINetParser.html#ident:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/UAINetParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/UAINetParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/UAINetParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/UAINetParser.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/UAINetParser.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/UAINetParser.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.phrase", "link" : "parser\/UAINetParser.html#phrase[T](p:RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "parser\/UAINetParser.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "parser\/UAINetParser.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "parser\/UAINetParser.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "parser\/UAINetParser.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "scala.util.parsing.combinator.RegexParsers.whiteSpace", "link" : "parser\/UAINetParser.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "parser\/UAINetParser.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) ⇒ List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "parser\/UAINetParser.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "parser\/UAINetParser.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: ⇒ Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "parser\/UAINetParser.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: ⇒ Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "parser\/UAINetParser.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, U) ⇒ U], combine: (T, U) ⇒ U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "parser\/UAINetParser.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: ⇒ Parser[T], p: ⇒ Parser[U], q: ⇒ Parser[(T, U) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "parser\/UAINetParser.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, T) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "parser\/UAINetParser.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "parser\/UAINetParser.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "parser\/UAINetParser.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: ⇒ Parser[T], p0: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "parser\/UAINetParser.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "parser\/UAINetParser.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "parser\/UAINetParser.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "parser\/UAINetParser.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: ⇒ Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "parser\/UAINetParser.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "parser\/UAINetParser.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "parser\/UAINetParser.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "parser\/UAINetParser.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(arg0: (ES) ⇒ Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "parser\/UAINetParser.html#acceptSeq[ES](es:ES)(implicitevidence$2:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "parser\/UAINetParser.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) ⇒ Boolean)(err: (Elem) ⇒ String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "parser\/UAINetParser.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/UAINetParser.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(arg0: (ES) ⇒ List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/UAINetParser.html#accept[ES](es:ES)(implicitevidence$1:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/UAINetParser.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "parser\/UAINetParser.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) ⇒ Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "parser\/UAINetParser.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "parser\/UAINetParser.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "parser\/UAINetParser.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "parser\/UAINetParser.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "parser\/UAINetParser.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "parser\/UAINetParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "parser\/UAINetParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "parser\/UAINetParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "parser\/UAINetParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "parser\/UAINetParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "parser\/UAINetParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "parser\/UAINetParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/UAINetParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/UAINetParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/UAINetParser.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "parser\/UAINetParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "parser\/UAINetParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "parser\/UAINetParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "parser\/UAINetParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "parser\/UAINetParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "parser\/UAINetParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "parser\/UAINetParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "parser\/UAINetParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "parser\/UAINetParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "parser\/UAINetParser.html", "kind" : "class"}, {"name" : "parser.UAINetParserMain", "shortDescription" : "Object offering a min method for testing the functionalityof parsing UAI networks", "object" : "parser\/UAINetParserMain$.html", "members_object" : [{"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "parser\/UAINetParserMain$.html#OnceParser[+T]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "parser\/UAINetParserMain$.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "parser\/UAINetParserMain$.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "parser\/UAINetParserMain$.html#Success[+T]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "parser\/UAINetParserMain$.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "parser\/UAINetParserMain$.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "parser\/UAINetParserMain$.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "parser\/UAINetParserMain$.html#ParseResult[+T]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "parser.UAINetParserMain.main", "link" : "parser\/UAINetParserMain$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "param", "tail" : "(): Parser[Double]", "member" : "parser.UAINetParser.param", "link" : "parser\/UAINetParserMain$.html#param:UAINetParser.this.Parser[Double]", "kind" : "def"}, {"label" : "line", "tail" : "(): Parser[List[Double]]", "member" : "parser.UAINetParser.line", "link" : "parser\/UAINetParserMain$.html#line:UAINetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "parameters", "tail" : "(): Parser[List[Double]]", "member" : "parser.UAINetParser.parameters", "link" : "parser\/UAINetParserMain$.html#parameters:UAINetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "potential", "tail" : "(): Parser[List[Double]]", "member" : "parser.UAINetParser.potential", "link" : "parser\/UAINetParserMain$.html#potential:UAINetParser.this.Parser[List[Double]]", "kind" : "def"}, {"label" : "potentials", "tail" : "(numberRelations: Int): Parser[List[List[Double]]]", "member" : "parser.UAINetParser.potentials", "link" : "parser\/UAINetParserMain$.html#potentials(numberRelations:Int):UAINetParser.this.Parser[List[List[Double]]]", "kind" : "def"}, {"label" : "variable", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.variable", "link" : "parser\/UAINetParserMain$.html#variable:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "variables", "tail" : "(): Parser[List[Int]]", "member" : "parser.UAINetParser.variables", "link" : "parser\/UAINetParserMain$.html#variables:UAINetParser.this.Parser[List[Int]]", "kind" : "def"}, {"label" : "relation", "tail" : "(): Parser[List[Int]]", "member" : "parser.UAINetParser.relation", "link" : "parser\/UAINetParserMain$.html#relation:UAINetParser.this.Parser[List[Int]]", "kind" : "def"}, {"label" : "relations", "tail" : "(numberRelations: Int): Parser[List[List[Int]]]", "member" : "parser.UAINetParser.relations", "link" : "parser\/UAINetParserMain$.html#relations(numberRelations:Int):UAINetParser.this.Parser[List[List[Int]]]", "kind" : "def"}, {"label" : "cardinality", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.cardinality", "link" : "parser\/UAINetParserMain$.html#cardinality:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "cardinalities", "tail" : "(): Parser[List[Int]]", "member" : "parser.UAINetParser.cardinalities", "link" : "parser\/UAINetParserMain$.html#cardinalities:UAINetParser.this.Parser[List[Int]]", "kind" : "def"}, {"label" : "relationsCounter", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.relationsCounter", "link" : "parser\/UAINetParserMain$.html#relationsCounter:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "variablesCounter", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.variablesCounter", "link" : "parser\/UAINetParserMain$.html#variablesCounter:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "modelType", "tail" : "(): Parser[String]", "member" : "parser.UAINetParser.modelType", "link" : "parser\/UAINetParserMain$.html#modelType:UAINetParser.this.Parser[String]", "kind" : "def"}, {"label" : "component", "tail" : "(): Parser[Bnet]", "member" : "parser.UAINetParser.component", "link" : "parser\/UAINetParserMain$.html#component:UAINetParser.this.Parser[bnet.Bnet]", "kind" : "def"}, {"label" : "skipWhitespace", "tail" : ": Boolean", "member" : "parser.UAINetParser.skipWhitespace", "link" : "parser\/UAINetParserMain$.html#skipWhitespace:Boolean", "kind" : "val"}, {"label" : "numberParameters", "tail" : ": Int", "member" : "parser.UAINetParser.numberParameters", "link" : "parser\/UAINetParserMain$.html#numberParameters:Int", "kind" : "var"}, {"label" : "numberRelations", "tail" : ": Int", "member" : "parser.UAINetParser.numberRelations", "link" : "parser\/UAINetParserMain$.html#numberRelations:Int", "kind" : "var"}, {"label" : "numberVariables", "tail" : ": Int", "member" : "parser.UAINetParser.numberVariables", "link" : "parser\/UAINetParserMain$.html#numberVariables:Int", "kind" : "var"}, {"label" : "integer", "tail" : "(): Parser[Int]", "member" : "parser.UAINetParser.integer", "link" : "parser\/UAINetParserMain$.html#integer:UAINetParser.this.Parser[Int]", "kind" : "def"}, {"label" : "decimal", "tail" : "(): Parser[Double]", "member" : "parser.UAINetParser.decimal", "link" : "parser\/UAINetParserMain$.html#decimal:UAINetParser.this.Parser[Double]", "kind" : "def"}, {"label" : "floatingPointNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.floatingPointNumber", "link" : "parser\/UAINetParserMain$.html#floatingPointNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "stringLiteral", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.stringLiteral", "link" : "parser\/UAINetParserMain$.html#stringLiteral:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "decimalNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.decimalNumber", "link" : "parser\/UAINetParserMain$.html#decimalNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "wholeNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.wholeNumber", "link" : "parser\/UAINetParserMain$.html#wholeNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "ident", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.ident", "link" : "parser\/UAINetParserMain$.html#ident:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/UAINetParserMain$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/UAINetParserMain$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "parser\/UAINetParserMain$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/UAINetParserMain$.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/UAINetParserMain$.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "parser\/UAINetParserMain$.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.phrase", "link" : "parser\/UAINetParserMain$.html#phrase[T](p:RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "parser\/UAINetParserMain$.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "parser\/UAINetParserMain$.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "parser\/UAINetParserMain$.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "parser\/UAINetParserMain$.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "scala.util.parsing.combinator.RegexParsers.whiteSpace", "link" : "parser\/UAINetParserMain$.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "parser\/UAINetParserMain$.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) ⇒ List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "parser\/UAINetParserMain$.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "parser\/UAINetParserMain$.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: ⇒ Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "parser\/UAINetParserMain$.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: ⇒ Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "parser\/UAINetParserMain$.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, U) ⇒ U], combine: (T, U) ⇒ U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "parser\/UAINetParserMain$.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: ⇒ Parser[T], p: ⇒ Parser[U], q: ⇒ Parser[(T, U) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "parser\/UAINetParserMain$.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, T) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "parser\/UAINetParserMain$.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "parser\/UAINetParserMain$.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "parser\/UAINetParserMain$.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: ⇒ Parser[T], p0: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "parser\/UAINetParserMain$.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "parser\/UAINetParserMain$.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "parser\/UAINetParserMain$.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "parser\/UAINetParserMain$.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: ⇒ Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "parser\/UAINetParserMain$.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "parser\/UAINetParserMain$.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "parser\/UAINetParserMain$.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "parser\/UAINetParserMain$.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(arg0: (ES) ⇒ Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "parser\/UAINetParserMain$.html#acceptSeq[ES](es:ES)(implicitevidence$2:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "parser\/UAINetParserMain$.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) ⇒ Boolean)(err: (Elem) ⇒ String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "parser\/UAINetParserMain$.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/UAINetParserMain$.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(arg0: (ES) ⇒ List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/UAINetParserMain$.html#accept[ES](es:ES)(implicitevidence$1:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "parser\/UAINetParserMain$.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "parser\/UAINetParserMain$.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) ⇒ Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "parser\/UAINetParserMain$.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "parser\/UAINetParserMain$.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "parser\/UAINetParserMain$.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "parser\/UAINetParserMain$.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "parser\/UAINetParserMain$.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "parser\/UAINetParserMain$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "parser\/UAINetParserMain$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "parser\/UAINetParserMain$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "parser\/UAINetParserMain$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "parser\/UAINetParserMain$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "parser\/UAINetParserMain$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "parser\/UAINetParserMain$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/UAINetParserMain$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/UAINetParserMain$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "parser\/UAINetParserMain$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "parser\/UAINetParserMain$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "parser\/UAINetParserMain$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "parser\/UAINetParserMain$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "parser\/UAINetParserMain$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "parser\/UAINetParserMain$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "parser\/UAINetParserMain$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "parser\/UAINetParserMain$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "parser\/UAINetParserMain$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "parser\/UAINetParserMain$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "experiments.singleChecks" : [{"name" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM", "shortDescription" : "Compares results of performing propagations with table,tree and AIM", "object" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html", "members_object" : [{"label" : "resultAIM", "tail" : ": List[Potential]", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.resultAIM", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#resultAIM:List[potential.Potential]", "kind" : "val"}, {"label" : "resultTR", "tail" : ": List[Potential]", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.resultTR", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#resultTR:List[potential.Potential]", "kind" : "val"}, {"label" : "resultTA", "tail" : ": List[Potential]", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.resultTA", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#resultTA:List[potential.Potential]", "kind" : "val"}, {"label" : "engineAIMutable", "tail" : ": VariableElimination", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.engineAIMutable", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#engineAIMutable:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetAI", "tail" : ": Bnet", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.bnetAI", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#bnetAI:bnet.Bnet", "kind" : "val"}, {"label" : "engineTree", "tail" : ": VariableElimination", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.engineTree", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#engineTree:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetTree", "tail" : ": Bnet", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.bnetTree", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#bnetTree:bnet.Bnet", "kind" : "val"}, {"label" : "engineTables", "tail" : ": VariableElimination", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.engineTables", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#engineTables:inference.VariableElimination", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.bnet", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.extension", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.singleChecks.CheckVariableEliminationTableTreeAIM.netName", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#netName:String", "kind" : "var"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/singleChecks\/CheckVariableEliminationTableTreeAIM$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.singleChecks.SingleVariableEliminationMSIM", "shortDescription" : "", "object" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html", "members_object" : [{"label" : "selectedMargOperator", "tail" : ": Array[OperatorType]", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.selectedMargOperator", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#selectedMargOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "selectedCombOperator", "tail" : ": Array[OperatorType]", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.selectedCombOperator", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#selectedCombOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "margAlternatives", "tail" : ": Map[OperatorType, Marginalization]", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.margAlternatives", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#margAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "combAlternatives", "tail" : ": Map[OperatorType, Combination]", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.combAlternatives", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#combAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "engine", "tail" : ": VariableElimination", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.engine", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#engine:inference.VariableElimination", "kind" : "val"}, {"label" : "convertedBnet", "tail" : ": Bnet", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.convertedBnet", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#convertedBnet:bnet.Bnet", "kind" : "val"}, {"label" : "variableIndexes", "tail" : ": List[Int]", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.variableIndexes", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#variableIndexes:List[Int]", "kind" : "val"}, {"label" : "finalNumberVariables", "tail" : ": Int", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.finalNumberVariables", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#finalNumberVariables:Int", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.bnet", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "numberVariables", "tail" : ": Int", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.numberVariables", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#numberVariables:Int", "kind" : "val"}, {"label" : "margAlternative", "tail" : ": Int", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.margAlternative", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#margAlternative:Int", "kind" : "val"}, {"label" : "combAlternative", "tail" : ": Int", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.combAlternative", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#combAlternative:Int", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.extension", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.netName", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#netName:String", "kind" : "var"}, {"label" : "propagate", "tail" : "(engine: VariableElimination, indexes: List[Int]): Unit", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.propagate", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#propagate(engine:inference.VariableElimination,indexes:List[Int]):Unit", "kind" : "def"}, {"label" : "prepareVariableIndexes", "tail" : "(bnet: Bnet, counter: Int): List[Int]", "member" : "experiments.singleChecks.SingleVariableEliminationMSIM.prepareVariableIndexes", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#prepareVariableIndexes(bnet:bnet.Bnet,counter:Int):List[Int]", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/singleChecks\/SingleVariableEliminationMSIM$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "newMethodsDevelopment" : [{"name" : "newMethodsDevelopment.PairValues", "shortDescription" : "Checks ways of making pairs of values and groupingthem according to the result", "object" : "newMethodsDevelopment\/PairValues$.html", "members_object" : [{"label" : "grouped", "tail" : ": Map[Double, List[(Double, Double, Double)]]", "member" : "newMethodsDevelopment.PairValues.grouped", "link" : "newMethodsDevelopment\/PairValues$.html#grouped:scala.collection.immutable.Map[Double,List[(Double,Double,Double)]]", "kind" : "val"}, {"label" : "triplets", "tail" : ": List[(Double, Double, Double)]", "member" : "newMethodsDevelopment.PairValues.triplets", "link" : "newMethodsDevelopment\/PairValues$.html#triplets:List[(Double,Double,Double)]", "kind" : "val"}, {"label" : "c2", "tail" : ": List[Double]", "member" : "newMethodsDevelopment.PairValues.c2", "link" : "newMethodsDevelopment\/PairValues$.html#c2:List[Double]", "kind" : "val"}, {"label" : "c1", "tail" : ": List[Double]", "member" : "newMethodsDevelopment.PairValues.c1", "link" : "newMethodsDevelopment\/PairValues$.html#c1:List[Double]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "newMethodsDevelopment\/PairValues$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "newMethodsDevelopment\/PairValues$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "newMethodsDevelopment\/PairValues$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "newMethodsDevelopment\/PairValues$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "newMethodsDevelopment\/PairValues$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "newMethodsDevelopment\/PairValues$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "newMethodsDevelopment\/PairValues$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "newMethodsDevelopment\/PairValues$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "newMethodsDevelopment\/PairValues$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "newMethodsDevelopment\/PairValues$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "newMethodsDevelopment\/PairValues$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "newMethodsDevelopment\/PairValues$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "newMethodsDevelopment\/PairValues$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "newMethodsDevelopment\/PairValues$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "newMethodsDevelopment\/PairValues$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "newMethodsDevelopment\/PairValues$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "newMethodsDevelopment\/PairValues$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "newMethodsDevelopment\/PairValues$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "newMethodsDevelopment\/PairValues$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "newMethodsDevelopment\/PairValues$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "newMethodsDevelopment\/PairValues$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "newMethodsDevelopment\/PairValues$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "newMethodsDevelopment\/PairValues$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "experiments.access" : [{"name" : "experiments.access.ConfigurationAccessBenchmark", "shortDescription" : "", "object" : "experiments\/access\/ConfigurationAccessBenchmark$.html", "members_object" : [{"label" : "aaimTimes", "tail" : ": ArrayBuffer[Double]", "member" : "experiments.access.ConfigurationAccessBenchmark.aaimTimes", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#aaimTimes:scala.collection.mutable.ArrayBuffer[Double]", "kind" : "val"}, {"label" : "treeTimes", "tail" : ": ArrayBuffer[Double]", "member" : "experiments.access.ConfigurationAccessBenchmark.treeTimes", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#treeTimes:scala.collection.mutable.ArrayBuffer[Double]", "kind" : "val"}, {"label" : "cptTimes", "tail" : ": ArrayBuffer[Double]", "member" : "experiments.access.ConfigurationAccessBenchmark.cptTimes", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#cptTimes:scala.collection.mutable.ArrayBuffer[Double]", "kind" : "val"}, {"label" : "numberPotentials", "tail" : ": Int", "member" : "experiments.access.ConfigurationAccessBenchmark.numberPotentials", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#numberPotentials:Int", "kind" : "val"}, {"label" : "path", "tail" : ": String", "member" : "experiments.access.ConfigurationAccessBenchmark.path", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#path:String", "kind" : "val"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "experiments.access.ConfigurationAccessBenchmark.standardConfig", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/access\/ConfigurationAccessBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.access.ExecutionInfo", "shortDescription" : "private class for storing info about a execution", "members_class" : [{"member" : "experiments.access.ExecutionInfo#<init>", "error" : "unsupported entity"}, {"label" : "min", "tail" : ": Double", "member" : "experiments.access.ExecutionInfo.min", "link" : "experiments\/access\/ExecutionInfo.html#min:Double", "kind" : "val"}, {"label" : "max", "tail" : ": Double", "member" : "experiments.access.ExecutionInfo.max", "link" : "experiments\/access\/ExecutionInfo.html#max:Double", "kind" : "val"}, {"label" : "std", "tail" : ": Double", "member" : "experiments.access.ExecutionInfo.std", "link" : "experiments\/access\/ExecutionInfo.html#std:Double", "kind" : "val"}, {"label" : "mean", "tail" : ": Double", "member" : "experiments.access.ExecutionInfo.mean", "link" : "experiments\/access\/ExecutionInfo.html#mean:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/access\/ExecutionInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/access\/ExecutionInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/access\/ExecutionInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/access\/ExecutionInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/access\/ExecutionInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/access\/ExecutionInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/access\/ExecutionInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/ExecutionInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/ExecutionInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/ExecutionInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/access\/ExecutionInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/access\/ExecutionInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/access\/ExecutionInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/access\/ExecutionInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/access\/ExecutionInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/access\/ExecutionInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/access\/ExecutionInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/access\/ExecutionInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/access\/ExecutionInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "experiments\/access\/ExecutionInfo.html", "kind" : "class"}, {"name" : "experiments.access.IndexAccessBenchmarkPotentials", "shortDescription" : "", "object" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html", "members_object" : [{"label" : "saveResults", "tail" : "(indexCard: Int, indexLevels: Int, indexRep: Int): Unit", "member" : "experiments.access.IndexAccessBenchmarkPotentials.saveResults", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#saveResults(indexCard:Int,indexLevels:Int,indexRep:Int):Unit", "kind" : "def"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "experiments.access.IndexAccessBenchmarkPotentials.standardConfig", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "times", "tail" : ": HashMap[(ValueStoreType, Int, Int), ArrayBuffer[Double]]", "member" : "experiments.access.IndexAccessBenchmarkPotentials.times", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#times:scala.collection.mutable.HashMap[(potential.ValueStoreTypes.ValueStoreType,Int,Int),scala.collection.mutable.ArrayBuffer[Double]]", "kind" : "val"}, {"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.access.IndexAccessBenchmarkPotentials.representations", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "numberPotentials", "tail" : ": Int", "member" : "experiments.access.IndexAccessBenchmarkPotentials.numberPotentials", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#numberPotentials:Int", "kind" : "val"}, {"label" : "levels", "tail" : ": List[Int]", "member" : "experiments.access.IndexAccessBenchmarkPotentials.levels", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#levels:List[Int]", "kind" : "val"}, {"label" : "minCard", "tail" : ": List[Int]", "member" : "experiments.access.IndexAccessBenchmarkPotentials.minCard", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#minCard:List[Int]", "kind" : "val"}, {"label" : "maxCard", "tail" : ": List[Int]", "member" : "experiments.access.IndexAccessBenchmarkPotentials.maxCard", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#maxCard:List[Int]", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.access.IndexAccessBenchmarkPotentials.folder", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#folder:String", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/access\/IndexAccessBenchmarkPotentials$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.access.IndexAccessBnetRepSelectBenchmark", "shortDescription" : "Object for testing index access with different structures", "object" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html", "members_object" : [{"label" : "measure", "tail" : "", "member" : "org.scalameter.DSL.measure", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#measure", "kind" : "object"}, {"label" : "performance", "tail" : "", "member" : "org.scalameter.DSL.performance", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#performance", "kind" : "object"}, {"label" : "Using", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Using", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#Using[T<:<?>]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Scope", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Scope", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#ScopeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "experiments.access.IndexAccessBnetRepSelectBenchmark.main", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "analyzeNet", "tail" : "(netName: String, extension: String, representation: ValueStoreType, numberConfigurations: Long): Unit", "member" : "experiments.access.IndexAccessBnetRepSelectBenchmark.analyzeNet", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#analyzeNet(netName:String,extension:String,representation:potential.ValueStoreTypes.ValueStoreType,numberConfigurations:Long):Unit", "kind" : "def"}, {"label" : "measureTime", "tail" : "(bnet: Bnet, accessSet: List[(Int, Long)]): Double", "member" : "experiments.access.IndexAccessBnetRepSelectBenchmark.measureTime", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#measureTime(bnet:bnet.Bnet,accessSet:List[(Int,Long)]):Double", "kind" : "def"}, {"label" : "prepareAccessSet", "tail" : "(bnet: Bnet, counter: Long): List[(Int, Long)]", "member" : "experiments.access.IndexAccessBnetRepSelectBenchmark.prepareAccessSet", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#prepareAccessSet(bnet:bnet.Bnet,counter:Long):List[(Int,Long)]", "kind" : "def"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "experiments.access.IndexAccessBnetRepSelectBenchmark.standardConfig", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.access.IndexAccessBnetRepSelectBenchmark.representations", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "measurer", "tail" : "(): Measurer[Double]", "member" : "org.scalameter.Bench.ForkedTime.measurer", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#measurer:org.scalameter.Measurer[Double]", "kind" : "def"}, {"label" : "aggregator", "tail" : "(): Aggregator[Double]", "member" : "org.scalameter.Bench.ForkedTime.aggregator", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#aggregator:org.scalameter.Aggregator[Double]", "kind" : "def"}, {"label" : "reporter", "tail" : "(): Reporter[Double]", "member" : "org.scalameter.Bench.Forked.reporter", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#reporter:org.scalameter.Reporter[U]", "kind" : "def"}, {"label" : "persistor", "tail" : "(): Persistor", "member" : "org.scalameter.Bench.Forked.persistor", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#persistor:org.scalameter.Persistor", "kind" : "def"}, {"label" : "executor", "tail" : "(): Executor[Double]", "member" : "org.scalameter.Bench.Forked.executor", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#executor:org.scalameter.Executor[U]", "kind" : "def"}, {"label" : "warmer", "tail" : "(): Warmer", "member" : "org.scalameter.Bench.Forked.warmer", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#warmer:org.scalameter.Warmer", "kind" : "def"}, {"label" : "include", "tail" : "(arg0: ClassTag[T]): Unit", "member" : "org.scalameter.DSL.include", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#include[T<:org.scalameter.BasePerformanceTest[_]](implicitevidence$1:scala.reflect.ClassTag[T]):Unit", "kind" : "def"}, {"label" : "using", "tail" : "(gen: Gen[T]): Using[T]", "member" : "org.scalameter.DSL.using", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#using[T](gen:org.scalameter.Gen[T]):DSL.this.Using[T]", "kind" : "def"}, {"label" : "executeTests", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.executeTests", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#executeTests():Boolean", "kind" : "def"}, {"label" : "rebuildSetupZipper", "tail" : "(): Unit", "member" : "org.scalameter.BasePerformanceTest.rebuildSetupZipper", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#rebuildSetupZipper():Unit", "kind" : "def"}, {"label" : "defaultConfig", "tail" : "(): Context", "member" : "org.scalameter.BasePerformanceTest.defaultConfig", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#defaultConfig:org.scalameter.Context", "kind" : "def"}, {"label" : "isModule", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.isModule", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#isModule:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/access\/IndexAccessBnetRepSelectBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "org.scalameter.BasePerformanceTest.SameType", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "experiments.access.IndexAccessBnetSelectBenchmark", "shortDescription" : "Object for testing index access with different structures", "object" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html", "members_object" : [{"label" : "measure", "tail" : "", "member" : "org.scalameter.DSL.measure", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#measure", "kind" : "object"}, {"label" : "performance", "tail" : "", "member" : "org.scalameter.DSL.performance", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#performance", "kind" : "object"}, {"label" : "Using", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Using", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#Using[T<:<?>]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Scope", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Scope", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#ScopeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.main", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "composeTableFinal", "tail" : "(): String", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.composeTableFinal", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#composeTableFinal():String", "kind" : "def"}, {"label" : "composeLineForNet", "tail" : "(net: String): String", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.composeLineForNet", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#composeLineForNet(net:String):String", "kind" : "def"}, {"label" : "composeHeader", "tail" : "(): String", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.composeHeader", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#composeHeader():String", "kind" : "def"}, {"label" : "generatePaperLatexTable", "tail" : "(): Unit", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.generatePaperLatexTable", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#generatePaperLatexTable:Unit", "kind" : "def"}, {"label" : "analyzeNet", "tail" : "(netName: String, extension: String, numberConfigurations: Long): Unit", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.analyzeNet", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#analyzeNet(netName:String,extension:String,numberConfigurations:Long):Unit", "kind" : "def"}, {"label" : "measureTime", "tail" : "(bnet: Bnet, accessSet: List[(Int, Long)]): Double", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.measureTime", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#measureTime(bnet:bnet.Bnet,accessSet:List[(Int,Long)]):Double", "kind" : "def"}, {"label" : "prepareAccessSet", "tail" : "(bnet: Bnet, counter: Long): List[(Int, Long)]", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.prepareAccessSet", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#prepareAccessSet(bnet:bnet.Bnet,counter:Long):List[(Int,Long)]", "kind" : "def"}, {"label" : "singleAnalysis", "tail" : "(netname: String, extension: String, numberConfigurations: Long): Unit", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.singleAnalysis", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#singleAnalysis(netname:String,extension:String,numberConfigurations:Long):Unit", "kind" : "def"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.standardConfig", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "numberIndexes", "tail" : ": HashMap[String, Long]", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.numberIndexes", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#numberIndexes:scala.collection.mutable.HashMap[String,Long]", "kind" : "val"}, {"label" : "times", "tail" : ": HashMap[String, HashMap[potential.ValueStoreTypes.Value, Double]]", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.times", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#times:scala.collection.mutable.HashMap[String,scala.collection.mutable.HashMap[potential.ValueStoreTypes.Value,Double]]", "kind" : "val"}, {"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.access.IndexAccessBnetSelectBenchmark.representations", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "measurer", "tail" : "(): Measurer[Double]", "member" : "org.scalameter.Bench.ForkedTime.measurer", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#measurer:org.scalameter.Measurer[Double]", "kind" : "def"}, {"label" : "aggregator", "tail" : "(): Aggregator[Double]", "member" : "org.scalameter.Bench.ForkedTime.aggregator", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#aggregator:org.scalameter.Aggregator[Double]", "kind" : "def"}, {"label" : "reporter", "tail" : "(): Reporter[Double]", "member" : "org.scalameter.Bench.Forked.reporter", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#reporter:org.scalameter.Reporter[U]", "kind" : "def"}, {"label" : "persistor", "tail" : "(): Persistor", "member" : "org.scalameter.Bench.Forked.persistor", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#persistor:org.scalameter.Persistor", "kind" : "def"}, {"label" : "executor", "tail" : "(): Executor[Double]", "member" : "org.scalameter.Bench.Forked.executor", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#executor:org.scalameter.Executor[U]", "kind" : "def"}, {"label" : "warmer", "tail" : "(): Warmer", "member" : "org.scalameter.Bench.Forked.warmer", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#warmer:org.scalameter.Warmer", "kind" : "def"}, {"label" : "include", "tail" : "(arg0: ClassTag[T]): Unit", "member" : "org.scalameter.DSL.include", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#include[T<:org.scalameter.BasePerformanceTest[_]](implicitevidence$1:scala.reflect.ClassTag[T]):Unit", "kind" : "def"}, {"label" : "using", "tail" : "(gen: Gen[T]): Using[T]", "member" : "org.scalameter.DSL.using", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#using[T](gen:org.scalameter.Gen[T]):DSL.this.Using[T]", "kind" : "def"}, {"label" : "executeTests", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.executeTests", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#executeTests():Boolean", "kind" : "def"}, {"label" : "rebuildSetupZipper", "tail" : "(): Unit", "member" : "org.scalameter.BasePerformanceTest.rebuildSetupZipper", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#rebuildSetupZipper():Unit", "kind" : "def"}, {"label" : "defaultConfig", "tail" : "(): Context", "member" : "org.scalameter.BasePerformanceTest.defaultConfig", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#defaultConfig:org.scalameter.Context", "kind" : "def"}, {"label" : "isModule", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.isModule", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#isModule:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/access\/IndexAccessBnetSelectBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "org.scalameter.BasePerformanceTest.SameType", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "experiments.access.IndexAccessNoScalameter", "shortDescription" : "Object for getting cpu time of a process without usingscalameter", "object" : "experiments\/access\/IndexAccessNoScalameter$.html", "members_object" : [{"label" : "repetitions", "tail" : ": Int", "member" : "experiments.access.IndexAccessNoScalameter.repetitions", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#repetitions:Int", "kind" : "val"}, {"label" : "netnames", "tail" : ": List[String]", "member" : "experiments.access.IndexAccessNoScalameter.netnames", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#netnames:List[String]", "kind" : "val"}, {"label" : "computeRatios", "tail" : "(netName: String): String", "member" : "experiments.access.IndexAccessNoScalameter.computeRatios", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#computeRatios(netName:String):String", "kind" : "def"}, {"label" : "storeMeasure", "tail" : "(bnet: Bnet, representation: potential.ValueStoreTypes.Value, measure: ExecutionInfo): HashMap[_ >: String with potential.ValueStoreTypes.Value <: Comparable[_ >: String with potential.ValueStoreTypes.Value <: Comparable[_ >: String with potential.ValueStoreTypes.Value <: Comparable[_ >: String with potential.ValueStoreTypes.Value <: Serializable] with Serializable] with Serializable] with Serializable, _ >: HashMap[potential.ValueStoreTypes.Value, ExecutionInfo] with ExecutionInfo <: AnyRef]", "member" : "experiments.access.IndexAccessNoScalameter.storeMeasure", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#storeMeasure(bnet:bnet.Bnet,representation:potential.ValueStoreTypes.Value,measure:experiments.access.ExecutionInfo):scala.collection.mutable.HashMap[_>:Stringwithpotential.ValueStoreTypes.Value<:Comparable[_>:Stringwithpotential.ValueStoreTypes.Value<:Comparable[_>:Stringwithpotential.ValueStoreTypes.Value<:Comparable[_>:Stringwithpotential.ValueStoreTypes.Value<:java.io.Serializable]withjava.io.Serializable]withjava.io.Serializable]withjava.io.Serializable,_>:scala.collection.mutable.HashMap[potential.ValueStoreTypes.Value,experiments.access.ExecutionInfo]withexperiments.access.ExecutionInfo<:Object]", "kind" : "def"}, {"label" : "evaluateExecutionTime", "tail" : "(bnet: Bnet, accessSet: List[(Int, Long)]): Unit", "member" : "experiments.access.IndexAccessNoScalameter.evaluateExecutionTime", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#evaluateExecutionTime(bnet:bnet.Bnet,accessSet:List[(Int,Long)]):Unit", "kind" : "def"}, {"label" : "evaluateRepresentation", "tail" : "(bnet: Bnet, representation: potential.ValueStoreTypes.Value, repetitions: Int, accessSet: List[(Int, Long)]): Unit", "member" : "experiments.access.IndexAccessNoScalameter.evaluateRepresentation", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#evaluateRepresentation(bnet:bnet.Bnet,representation:potential.ValueStoreTypes.Value,repetitions:Int,accessSet:List[(Int,Long)]):Unit", "kind" : "def"}, {"label" : "prepareAccessSet", "tail" : "(bnet: Bnet): List[(Int, Long)]", "member" : "experiments.access.IndexAccessNoScalameter.prepareAccessSet", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#prepareAccessSet(bnet:bnet.Bnet):List[(Int,Long)]", "kind" : "def"}, {"label" : "minNumberOfConfigurations", "tail" : ": Int", "member" : "experiments.access.IndexAccessNoScalameter.minNumberOfConfigurations", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#minNumberOfConfigurations:Int", "kind" : "val"}, {"label" : "maxNumberOfConfigurations", "tail" : ": Int", "member" : "experiments.access.IndexAccessNoScalameter.maxNumberOfConfigurations", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#maxNumberOfConfigurations:Int", "kind" : "val"}, {"label" : "numberIndexes", "tail" : ": HashMap[String, Long]", "member" : "experiments.access.IndexAccessNoScalameter.numberIndexes", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#numberIndexes:scala.collection.mutable.HashMap[String,Long]", "kind" : "val"}, {"label" : "times", "tail" : ": HashMap[String, HashMap[potential.ValueStoreTypes.Value, ExecutionInfo]]", "member" : "experiments.access.IndexAccessNoScalameter.times", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#times:scala.collection.mutable.HashMap[String,scala.collection.mutable.HashMap[potential.ValueStoreTypes.Value,experiments.access.ExecutionInfo]]", "kind" : "val"}, {"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.access.IndexAccessNoScalameter.representations", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/access\/IndexAccessNoScalameter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/access\/IndexAccessNoScalameter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.access.IndexAccessSingleNetRegression", "shortDescription" : "", "object" : "experiments\/access\/IndexAccessSingleNetRegression$.html", "members_object" : [{"label" : "measure", "tail" : "", "member" : "org.scalameter.DSL.measure", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#measure", "kind" : "object"}, {"label" : "performance", "tail" : "", "member" : "org.scalameter.DSL.performance", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#performance", "kind" : "object"}, {"label" : "Using", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Using", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#Using[T<:<?>]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Scope", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Scope", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#ScopeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "accessSet", "tail" : ": Gen[List[(Int, Long)]]", "member" : "experiments.access.IndexAccessSingleNetRegression.accessSet", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#accessSet:org.scalameter.Gen[List[(Int,Long)]]", "kind" : "val"}, {"label" : "dimensions", "tail" : ": Gen[Long]", "member" : "experiments.access.IndexAccessSingleNetRegression.dimensions", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#dimensions:org.scalameter.Gen[Long]", "kind" : "val"}, {"label" : "numberConfigurations", "tail" : ": Long", "member" : "experiments.access.IndexAccessSingleNetRegression.numberConfigurations", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#numberConfigurations:Long", "kind" : "val"}, {"label" : "totalNumberConfigurations", "tail" : ": Long", "member" : "experiments.access.IndexAccessSingleNetRegression.totalNumberConfigurations", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#totalNumberConfigurations:Long", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "experiments.access.IndexAccessSingleNetRegression.bnet", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.access.IndexAccessSingleNetRegression.netName", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#netName:String", "kind" : "val"}, {"label" : "minNumberOfConfigurations", "tail" : ": Int", "member" : "experiments.access.IndexAccessSingleNetRegression.minNumberOfConfigurations", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#minNumberOfConfigurations:Int", "kind" : "val"}, {"label" : "maxNumberOfConfigurations", "tail" : ": Int", "member" : "experiments.access.IndexAccessSingleNetRegression.maxNumberOfConfigurations", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#maxNumberOfConfigurations:Int", "kind" : "val"}, {"label" : "persistor", "tail" : "(): SerializationPersistor", "member" : "experiments.access.IndexAccessSingleNetRegression.persistor", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#persistor:org.scalameter.persistence.SerializationPersistor", "kind" : "def"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "experiments.access.IndexAccessSingleNetRegression.standardConfig", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "numberIndexes", "tail" : ": HashMap[String, Long]", "member" : "experiments.access.IndexAccessSingleNetRegression.numberIndexes", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#numberIndexes:scala.collection.mutable.HashMap[String,Long]", "kind" : "val"}, {"label" : "times", "tail" : ": HashMap[String, HashMap[potential.ValueStoreTypes.Value, Double]]", "member" : "experiments.access.IndexAccessSingleNetRegression.times", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#times:scala.collection.mutable.HashMap[String,scala.collection.mutable.HashMap[potential.ValueStoreTypes.Value,Double]]", "kind" : "val"}, {"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.access.IndexAccessSingleNetRegression.representations", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "reporter", "tail" : "(): Reporter[Double]", "member" : "org.scalameter.Bench.Regression.reporter", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#reporter:org.scalameter.Reporter[Double]", "kind" : "def"}, {"label" : "executor", "tail" : "(): Executor[Double]", "member" : "org.scalameter.Bench.Regression.executor", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#executor:org.scalameter.Executor[Double]", "kind" : "def"}, {"label" : "measurer", "tail" : "(): Measurer[Double]", "member" : "org.scalameter.Bench.Regression.measurer", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#measurer:org.scalameter.Measurer[Double]", "kind" : "def"}, {"label" : "aggregator", "tail" : "(): Aggregator[Double]", "member" : "org.scalameter.Bench.Regression.aggregator", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#aggregator:org.scalameter.Aggregator[Double]", "kind" : "def"}, {"label" : "warmer", "tail" : "(): Warmer", "member" : "org.scalameter.Bench.Regression.warmer", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#warmer:org.scalameter.Warmer", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.scalameter.Bench.main", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "include", "tail" : "(arg0: ClassTag[T]): Unit", "member" : "org.scalameter.DSL.include", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#include[T<:org.scalameter.BasePerformanceTest[_]](implicitevidence$1:scala.reflect.ClassTag[T]):Unit", "kind" : "def"}, {"label" : "using", "tail" : "(gen: Gen[T]): Using[T]", "member" : "org.scalameter.DSL.using", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#using[T](gen:org.scalameter.Gen[T]):DSL.this.Using[T]", "kind" : "def"}, {"label" : "executeTests", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.executeTests", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#executeTests():Boolean", "kind" : "def"}, {"label" : "rebuildSetupZipper", "tail" : "(): Unit", "member" : "org.scalameter.BasePerformanceTest.rebuildSetupZipper", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#rebuildSetupZipper():Unit", "kind" : "def"}, {"label" : "defaultConfig", "tail" : "(): Context", "member" : "org.scalameter.BasePerformanceTest.defaultConfig", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#defaultConfig:org.scalameter.Context", "kind" : "def"}, {"label" : "isModule", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.isModule", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#isModule:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/access\/IndexAccessSingleNetRegression$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "org.scalameter.BasePerformanceTest.SameType", "error" : "unsupported entity"}], "kind" : "object"}, {"name" : "experiments.access.IndexAccessSingleNoScalaMeter", "shortDescription" : "Object for getting cpu time of a process", "object" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html", "members_object" : [{"label" : "netnames", "tail" : ": List[String]", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.netnames", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#netnames:List[String]", "kind" : "val"}, {"label" : "netnames2", "tail" : ": List[String]", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.netnames2", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#netnames2:List[String]", "kind" : "val"}, {"label" : "computeRatios", "tail" : "(netName: String): String", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.computeRatios", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#computeRatios(netName:String):String", "kind" : "def"}, {"label" : "storeMeasure", "tail" : "(bnet: Bnet, representation: potential.ValueStoreTypes.Value, time: Double): HashMap[_ >: String with potential.ValueStoreTypes.Value <: Comparable[_ >: String with potential.ValueStoreTypes.Value <: Comparable[_ >: String with potential.ValueStoreTypes.Value <: Comparable[_ >: String with potential.ValueStoreTypes.Value <: Serializable] with Serializable] with Serializable] with Serializable, _ >: HashMap[potential.ValueStoreTypes.Value, Double] with Double]", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.storeMeasure", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#storeMeasure(bnet:bnet.Bnet,representation:potential.ValueStoreTypes.Value,time:Double):scala.collection.mutable.HashMap[_>:Stringwithpotential.ValueStoreTypes.Value<:Comparable[_>:Stringwithpotential.ValueStoreTypes.Value<:Comparable[_>:Stringwithpotential.ValueStoreTypes.Value<:Comparable[_>:Stringwithpotential.ValueStoreTypes.Value<:java.io.Serializable]withjava.io.Serializable]withjava.io.Serializable]withjava.io.Serializable,_>:scala.collection.mutable.HashMap[potential.ValueStoreTypes.Value,Double]withDouble]", "kind" : "def"}, {"label" : "evaluateExecutionTime", "tail" : "(bnet: Bnet): Unit", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.evaluateExecutionTime", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#evaluateExecutionTime(bnet:bnet.Bnet):Unit", "kind" : "def"}, {"label" : "evaluateRepresentation", "tail" : "(bnet: Bnet, representation: potential.ValueStoreTypes.Value): Unit", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.evaluateRepresentation", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#evaluateRepresentation(bnet:bnet.Bnet,representation:potential.ValueStoreTypes.Value):Unit", "kind" : "def"}, {"label" : "minNumberOfConfigurations", "tail" : ": Int", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.minNumberOfConfigurations", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#minNumberOfConfigurations:Int", "kind" : "val"}, {"label" : "maxNumberOfConfigurations", "tail" : ": Int", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.maxNumberOfConfigurations", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#maxNumberOfConfigurations:Int", "kind" : "val"}, {"label" : "numberIndexes", "tail" : ": HashMap[String, Long]", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.numberIndexes", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#numberIndexes:scala.collection.mutable.HashMap[String,Long]", "kind" : "val"}, {"label" : "times", "tail" : ": HashMap[String, HashMap[potential.ValueStoreTypes.Value, Double]]", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.times", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#times:scala.collection.mutable.HashMap[String,scala.collection.mutable.HashMap[potential.ValueStoreTypes.Value,Double]]", "kind" : "val"}, {"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.access.IndexAccessSingleNoScalaMeter.representations", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/access\/IndexAccessSingleNoScalaMeter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "benchmarkTest.operationsEvaluation" : [{"name" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation", "shortDescription" : "Object to perform comparisons in the application ofVariableElimination algorithm on MIM representationselecting network, extension, alternatives for combinationand marginalization and seed for variables selection", "object" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html", "members_object" : [{"label" : "time2", "tail" : ": Long", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.time2", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#time2:Long", "kind" : "var"}, {"label" : "time1", "tail" : ": Long", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.time1", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#time1:Long", "kind" : "var"}, {"label" : "selectedMargOperator", "tail" : ": Array[OperatorType]", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.selectedMargOperator", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#selectedMargOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "selectedCombOperator", "tail" : ": Array[OperatorType]", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.selectedCombOperator", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#selectedCombOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "margAlternatives", "tail" : ": Map[OperatorType, Marginalization]", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.margAlternatives", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#margAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "combAlternatives", "tail" : ": Map[OperatorType, Combination]", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.combAlternatives", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#combAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "engine", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.engine", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#engine:inference.VariableElimination", "kind" : "var"}, {"label" : "variableIndexes", "tail" : ": List[Int]", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.variableIndexes", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#variableIndexes:List[Int]", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.bnet", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "filename", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.filename", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#filename:String", "kind" : "val"}, {"label" : "numberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.numberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#numberVariables:Int", "kind" : "val"}, {"label" : "seed", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.seed", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#seed:Int", "kind" : "val"}, {"label" : "margAlternative", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.margAlternative", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#margAlternative:Int", "kind" : "val"}, {"label" : "combAlternative", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.combAlternative", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#combAlternative:Int", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.extension", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.netName", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#netName:String", "kind" : "var"}, {"label" : "propagate", "tail" : "(engine: VariableElimination, indexes: List[Int]): Unit", "member" : "benchmarkTest.operationsEvaluation.VEMISelectSingleEstimation.propagate", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#propagate(engine:inference.VariableElimination,indexes:List[Int]):Unit", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VEMISelectSingleEstimation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect", "shortDescription" : "Evaluates Variable Elimination algorithm with MLIM representationand selecting network, extension and alternatives for combinationand marginalization operations", "object" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html", "members_object" : [{"label" : "time", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.time", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#time:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "selectedMargOperator", "tail" : ": Array[OperatorType]", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.selectedMargOperator", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#selectedMargOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "selectedCombOperator", "tail" : ": Array[OperatorType]", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.selectedCombOperator", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#selectedCombOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "margAlternatives", "tail" : ": Map[OperatorType, Marginalization]", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.margAlternatives", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#margAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "combAlternatives", "tail" : ": Map[OperatorType, Combination]", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.combAlternatives", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#combAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "engine", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.engine", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#engine:inference.VariableElimination", "kind" : "val"}, {"label" : "convertedBnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.convertedBnet", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#convertedBnet:bnet.Bnet", "kind" : "val"}, {"label" : "variableIndexes", "tail" : ": List[Int]", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.variableIndexes", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#variableIndexes:List[Int]", "kind" : "val"}, {"label" : "finalNumberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.finalNumberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#finalNumberVariables:Int", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.bnet", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "numberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.numberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#numberVariables:Int", "kind" : "val"}, {"label" : "margAlternative", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.margAlternative", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#margAlternative:Int", "kind" : "val"}, {"label" : "combAlternative", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.combAlternative", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#combAlternative:Int", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.extension", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.netName", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#netName:String", "kind" : "var"}, {"label" : "propagate", "tail" : "(engine: VariableElimination, indexes: List[Int]): Unit", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.propagate", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#propagate(engine:inference.VariableElimination,indexes:List[Int]):Unit", "kind" : "def"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "benchmarkTest.operationsEvaluation.VEMLIMOptSelect.standardConfig", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VEMLIMOptSelect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation", "shortDescription" : "Object to perform comparisons in the application ofVariableElimination algorithm on MIM representationselecting network, extension, alternatives for combinationand marginalization and seed for variables selection", "object" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html", "members_object" : [{"label" : "time2", "tail" : ": Long", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.time2", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#time2:Long", "kind" : "var"}, {"label" : "time1", "tail" : ": Long", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.time1", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#time1:Long", "kind" : "var"}, {"label" : "engine", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.engine", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#engine:inference.VariableElimination", "kind" : "var"}, {"label" : "variableIndexes", "tail" : ": List[Int]", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.variableIndexes", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#variableIndexes:List[Int]", "kind" : "val"}, {"label" : "finalNumberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.finalNumberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#finalNumberVariables:Int", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.bnet", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "numberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.numberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#numberVariables:Int", "kind" : "val"}, {"label" : "seed", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.seed", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#seed:Int", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.extension", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.netName", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#netName:String", "kind" : "var"}, {"label" : "propagate", "tail" : "(engine: VariableElimination, indexes: List[Int]): Unit", "member" : "benchmarkTest.operationsEvaluation.VETableSelectSingleEstimation.propagate", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#propagate(engine:inference.VariableElimination,indexes:List[Int]):Unit", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableSelectSingleEstimation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark", "shortDescription" : "Object to perform comparisons in the application ofVariableElimination algorithm on a given network andASIM using different alternatives for combinationand marginalization operations", "object" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html", "members_object" : [{"label" : "aimutTimeAlt4Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt4Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt4Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt4Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt4Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt4Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt4Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt4Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt4Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt4Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt4Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt4Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt3Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt3Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt3Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt3Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt3Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt3Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt3Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt3Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt3Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt3Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt3Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt3Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt2Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt2Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt2Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt2Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt2Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt2Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt2Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt2Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt2Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt2Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt2Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt2Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt1Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt1Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt1Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt1Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt1Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt1Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt1Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt1Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt1Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt1Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeAlt1Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeAlt1Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeDefDef", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.aimutTimeDefDef", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#aimutTimeDefDef:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "treeTime", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.treeTime", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#treeTime:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "cptTime", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.cptTime", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#cptTime:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "engineASIMutable", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.engineASIMutable", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#engineASIMutable:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetMapIndices", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.bnetMapIndices", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#bnetMapIndices:bnet.Bnet", "kind" : "val"}, {"label" : "engineTree", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.engineTree", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#engineTree:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetTree", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.bnetTree", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#bnetTree:bnet.Bnet", "kind" : "val"}, {"label" : "engineTables", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.engineTables", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#engineTables:inference.VariableElimination", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.bnet", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.extension", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.netName", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#netName:String", "kind" : "var"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeASIMBenchmark.standardConfig", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeASIMBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark", "shortDescription" : "Object to perform comparisons in the application ofVariableElimination algorithm on a given network andusing different alternatives for AIIM alternativesfor combination and marginalization", "object" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html", "members_object" : [{"label" : "aimutTimeAlt7Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt7Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt7Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt7Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt7Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt7Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt7Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt7Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt7Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt7Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt7Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt7Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt6Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt6Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt6Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt6Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt6Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt6Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt6Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt6Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt6Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt6Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt6Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt6Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt5Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt5Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt5Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt5Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt5Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt5Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt5Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt5Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt5Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt5Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt5Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt5Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt4Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt4Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt4Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt4Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt4Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt4Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt4Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt4Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt4Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt4Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt4Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt4Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt3Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt3Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt3Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt3Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt3Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt3Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt3Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt3Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt3Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt3Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt3Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt3Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt2Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt2Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt2Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt2Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt2Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt2Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt2Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt2Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt2Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt2Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt2Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt2Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt1Alt3", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt1Alt3", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt1Alt3:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt1Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt1Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt1Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt1Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt1Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt1Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeAlt1Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeAlt1Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeAlt1Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "aimutTimeDefDef", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.aimutTimeDefDef", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#aimutTimeDefDef:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "treeTime", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.treeTime", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#treeTime:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "cptTime", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.cptTime", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#cptTime:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "engineAIMutable", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.engineAIMutable", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#engineAIMutable:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetMapIndices", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.bnetMapIndices", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#bnetMapIndices:bnet.Bnet", "kind" : "val"}, {"label" : "engineTree", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.engineTree", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#engineTree:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetTree", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.bnetTree", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#bnetTree:bnet.Bnet", "kind" : "val"}, {"label" : "engineTables", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.engineTables", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#engineTables:inference.VariableElimination", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.bnet", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.extension", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.netName", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#netName:String", "kind" : "var"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIBenchmark.standardConfig", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark", "shortDescription" : "Object to perform comparisons in the application ofVariableElimination algorithm on MIM representationselecting network, extension, alternatives for combinationand marginalization and seed for variables selection", "object" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html", "members_object" : [{"label" : "time", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.time", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#time:org.scalameter.Quantity[Double]", "kind" : "var"}, {"label" : "selectedMargOperator", "tail" : ": Array[OperatorType]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.selectedMargOperator", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#selectedMargOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "selectedCombOperator", "tail" : ": Array[OperatorType]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.selectedCombOperator", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#selectedCombOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "margAlternatives", "tail" : ": Map[OperatorType, Marginalization]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.margAlternatives", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#margAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "combAlternatives", "tail" : ": Map[OperatorType, Combination]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.combAlternatives", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#combAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "engine", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.engine", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#engine:inference.VariableElimination", "kind" : "var"}, {"label" : "bnetMapIndices", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.bnetMapIndices", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#bnetMapIndices:bnet.Bnet", "kind" : "val"}, {"label" : "variableIndexes", "tail" : ": List[Int]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.variableIndexes", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#variableIndexes:List[Int]", "kind" : "val"}, {"label" : "finalNumberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.finalNumberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#finalNumberVariables:Int", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.bnet", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "numberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.numberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#numberVariables:Int", "kind" : "val"}, {"label" : "seed", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.seed", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#seed:Int", "kind" : "val"}, {"label" : "margAlternative", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.margAlternative", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#margAlternative:Int", "kind" : "val"}, {"label" : "combAlternative", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.combAlternative", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#combAlternative:Int", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.extension", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.netName", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#netName:String", "kind" : "var"}, {"label" : "propagate", "tail" : "(engine: VariableElimination, indexes: List[Int]): Unit", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.propagate", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#propagate(engine:inference.VariableElimination,indexes:List[Int]):Unit", "kind" : "def"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMIMOptSelectBenchmark.standardConfig", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMIMOptSelectBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark", "shortDescription" : "Object to perform comparisons in the application ofVariableElimination algorithm on a given network andusing MLIM representation.", "object" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html", "members_object" : [{"label" : "selectedMargOperator", "tail" : ": Array[OperatorType]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.selectedMargOperator", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#selectedMargOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "selectedCombOperator", "tail" : ": Array[OperatorType]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.selectedCombOperator", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#selectedCombOperator:Array[potential.OperatorType.OperatorType]", "kind" : "val"}, {"label" : "margAlternatives", "tail" : ": Map[OperatorType, Marginalization]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.margAlternatives", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#margAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "combAlternatives", "tail" : ": Map[OperatorType, Combination]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.combAlternatives", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#combAlternatives:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "bnetMapIndices", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.bnetMapIndices", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#bnetMapIndices:bnet.Bnet", "kind" : "val"}, {"label" : "bnetTree", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.bnetTree", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#bnetTree:bnet.Bnet", "kind" : "val"}, {"label" : "time", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.time", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#time:org.scalameter.Quantity[Double]", "kind" : "var"}, {"label" : "engine", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.engine", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#engine:inference.VariableElimination", "kind" : "var"}, {"label" : "variableIndexes", "tail" : ": List[Int]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.variableIndexes", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#variableIndexes:List[Int]", "kind" : "val"}, {"label" : "finalNumberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.finalNumberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#finalNumberVariables:Int", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.bnet", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "numberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.numberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#numberVariables:Int", "kind" : "val"}, {"label" : "seed", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.seed", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#seed:Int", "kind" : "val"}, {"label" : "margAlternative", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.margAlternative", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#margAlternative:Int", "kind" : "val"}, {"label" : "combAlternative", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.combAlternative", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#combAlternative:Int", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.extension", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.netName", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#netName:String", "kind" : "var"}, {"label" : "propagate", "tail" : "(engine: VariableElimination, indexes: List[Int]): Unit", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.propagate", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#propagate(engine:inference.VariableElimination,indexes:List[Int]):Unit", "kind" : "def"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMLIMOptSelectBenchmark.standardConfig", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMLIMOptSelectBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark", "shortDescription" : "Object to perform comparisons in the application ofVariableElimination algorithm on a given network andusing different representations for potentials", "object" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html", "members_object" : [{"label" : "msimutTimeAlt5Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt5Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt5Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt5Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt5Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt5Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt5Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt5Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt5Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt4Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt4Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt4Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt4Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt4Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt4Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt4Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt4Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt4Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt3Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt3Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt3Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt3Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt3Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt3Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt3Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt3Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt3Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt2Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt2Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt2Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt2Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt2Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt2Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt2Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt2Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt2Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt1Alt2", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt1Alt2", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt1Alt2:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt1Alt1", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt1Alt1", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt1Alt1:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeAlt1Def", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeAlt1Def", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeAlt1Def:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "msimutTimeDefDef", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.msimutTimeDefDef", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#msimutTimeDefDef:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "treeTime", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.treeTime", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#treeTime:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "cptTime", "tail" : ": Quantity[Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.cptTime", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#cptTime:org.scalameter.Quantity[Double]", "kind" : "val"}, {"label" : "engineMSIMutable", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.engineMSIMutable", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#engineMSIMutable:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetMapIndices", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.bnetMapIndices", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#bnetMapIndices:bnet.Bnet", "kind" : "val"}, {"label" : "engineTree", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.engineTree", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#engineTree:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetTree", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.bnetTree", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#bnetTree:bnet.Bnet", "kind" : "val"}, {"label" : "engineTables", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.engineTables", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#engineTables:inference.VariableElimination", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.bnet", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.extension", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.netName", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#netName:String", "kind" : "var"}, {"label" : "standardConfig", "tail" : ": MeasureBuilder[Unit, Double]", "member" : "benchmarkTest.operationsEvaluation.VETableTreeMSIMBenchmark.standardConfig", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#standardConfig:org.scalameter.MeasureBuilder[Unit,Double]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETableTreeMSIMBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation", "shortDescription" : "Object to perform comparisons in the application ofVariableElimination algorithm on MIM representationselecting network, extension, alternatives for combinationand marginalization and seed for variables selection", "object" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html", "members_object" : [{"label" : "time2", "tail" : ": Long", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.time2", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#time2:Long", "kind" : "var"}, {"label" : "time1", "tail" : ": Long", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.time1", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#time1:Long", "kind" : "var"}, {"label" : "engine", "tail" : ": VariableElimination", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.engine", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#engine:inference.VariableElimination", "kind" : "var"}, {"label" : "bnetTree", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.bnetTree", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#bnetTree:bnet.Bnet", "kind" : "val"}, {"label" : "variableIndexes", "tail" : ": List[Int]", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.variableIndexes", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#variableIndexes:List[Int]", "kind" : "val"}, {"label" : "finalNumberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.finalNumberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#finalNumberVariables:Int", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.bnet", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "numberVariables", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.numberVariables", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#numberVariables:Int", "kind" : "val"}, {"label" : "seed", "tail" : ": Int", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.seed", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#seed:Int", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.extension", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.netName", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#netName:String", "kind" : "var"}, {"label" : "propagate", "tail" : "(engine: VariableElimination, indexes: List[Int]): Unit", "member" : "benchmarkTest.operationsEvaluation.VETreeSelectSingleEstimation.propagate", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#propagate(engine:inference.VariableElimination,indexes:List[Int]):Unit", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/operationsEvaluation\/VETreeSelectSingleEstimation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "inference" : [{"name" : "inference.QualitativeVariableElimination", "shortDescription" : "Class for estimating the cost of propagating for a net", "members_class" : [{"label" : "showTopMaxCosts", "tail" : "(percentage: Double): String", "member" : "inference.QualitativeVariableElimination.showTopMaxCosts", "link" : "inference\/QualitativeVariableElimination.html#showTopMaxCosts(percentage:Double):String", "kind" : "def"}, {"label" : "showMaxCosts", "tail" : "(): String", "member" : "inference.QualitativeVariableElimination.showMaxCosts", "link" : "inference\/QualitativeVariableElimination.html#showMaxCosts:String", "kind" : "def"}, {"label" : "propagate", "tail" : "(variableName: String): Unit", "member" : "inference.QualitativeVariableElimination.propagate", "link" : "inference\/QualitativeVariableElimination.html#propagate(variableName:String):Unit", "kind" : "def"}, {"label" : "propagate", "tail" : "(): Unit", "member" : "inference.QualitativeVariableElimination.propagate", "link" : "inference\/QualitativeVariableElimination.html#propagate():Unit", "kind" : "def"}, {"label" : "costs", "tail" : ": Map[String, List[Double]]", "member" : "inference.QualitativeVariableElimination.costs", "link" : "inference\/QualitativeVariableElimination.html#costs:scala.collection.mutable.Map[String,List[Double]]", "kind" : "val"}, {"label" : "relevantPotentials", "tail" : ": List[Potential]", "member" : "inference.QualitativeVariableElimination.relevantPotentials", "link" : "inference\/QualitativeVariableElimination.html#relevantPotentials:List[potential.Potential]", "kind" : "var"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "inference.QualitativeVariableElimination.bnet", "link" : "inference\/QualitativeVariableElimination.html#bnet:bnet.Bnet", "kind" : "val"}, {"member" : "inference.QualitativeVariableElimination#<init>", "error" : "unsupported entity"}, {"label" : "extension", "tail" : ": String", "member" : "inference.QualitativeVariableElimination.extension", "link" : "inference\/QualitativeVariableElimination.html#extension:String", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "inference.QualitativeVariableElimination.netName", "link" : "inference\/QualitativeVariableElimination.html#netName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "inference\/QualitativeVariableElimination.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "inference\/QualitativeVariableElimination.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "inference\/QualitativeVariableElimination.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "inference\/QualitativeVariableElimination.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "inference\/QualitativeVariableElimination.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "inference\/QualitativeVariableElimination.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "inference\/QualitativeVariableElimination.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "inference\/QualitativeVariableElimination.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "inference\/QualitativeVariableElimination.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "inference\/QualitativeVariableElimination.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "inference\/QualitativeVariableElimination.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "inference\/QualitativeVariableElimination.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "inference\/QualitativeVariableElimination.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "inference\/QualitativeVariableElimination.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "inference\/QualitativeVariableElimination.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "inference\/QualitativeVariableElimination.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "inference\/QualitativeVariableElimination.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "inference\/QualitativeVariableElimination.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "inference\/QualitativeVariableElimination.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "inference\/QualitativeVariableElimination.html", "kind" : "class"}, {"name" : "inference.VariableElimination", "shortDescription" : "Class for executing a simplified version of variable eliminationinference algorithm", "members_class" : [{"label" : "getPotentialsWithoutVariable", "tail" : "(variable: Variable, potentials: List[Potential]): List[Potential]", "member" : "inference.VariableElimination.getPotentialsWithoutVariable", "link" : "inference\/VariableElimination.html#getPotentialsWithoutVariable(variable:base.Variable,potentials:List[potential.Potential]):List[potential.Potential]", "kind" : "def"}, {"label" : "getPotentialsForVariable", "tail" : "(variable: Variable, potentials: List[Potential]): List[Potential]", "member" : "inference.VariableElimination.getPotentialsForVariable", "link" : "inference\/VariableElimination.html#getPotentialsForVariable(variable:base.Variable,potentials:List[potential.Potential]):List[potential.Potential]", "kind" : "def"}, {"label" : "getPotentialsForVariable", "tail" : "(variable: Variable): List[Potential]", "member" : "inference.VariableElimination.getPotentialsForVariable", "link" : "inference\/VariableElimination.html#getPotentialsForVariable(variable:base.Variable):List[potential.Potential]", "kind" : "def"}, {"label" : "marginalize", "tail" : "(target: Variable, variableToRemove: Variable, potential: Potential): Potential", "member" : "inference.VariableElimination.marginalize", "link" : "inference\/VariableElimination.html#marginalize(target:base.Variable,variableToRemove:base.Variable,potential:potential.Potential):potential.Potential", "kind" : "def"}, {"label" : "combine", "tail" : "(target: Variable, potential1: Potential, potential2: Potential): Potential", "member" : "inference.VariableElimination.combine", "link" : "inference\/VariableElimination.html#combine(target:base.Variable,potential1:potential.Potential,potential2:potential.Potential):potential.Potential", "kind" : "def"}, {"label" : "removeVariable", "tail" : "(target: Variable, variableToRemove: Variable, potentials: List[Potential], irrelevantPotentials: List[Potential]): List[Potential]", "member" : "inference.VariableElimination.removeVariable", "link" : "inference\/VariableElimination.html#removeVariable(target:base.Variable,variableToRemove:base.Variable,potentials:List[potential.Potential],irrelevantPotentials:List[potential.Potential]):List[potential.Potential]", "kind" : "def"}, {"label" : "setFunctions", "tail" : "(combType: OperatorType, margType: OperatorType): Unit", "member" : "inference.VariableElimination.setFunctions", "link" : "inference\/VariableElimination.html#setFunctions(combType:potential.OperatorType.OperatorType,margType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "propagate", "tail" : "(variableName: String): Potential", "member" : "inference.VariableElimination.propagate", "link" : "inference\/VariableElimination.html#propagate(variableName:String):potential.Potential", "kind" : "def"}, {"label" : "propagate", "tail" : "(): List[Potential]", "member" : "inference.VariableElimination.propagate", "link" : "inference\/VariableElimination.html#propagate:List[potential.Potential]", "kind" : "def"}, {"member" : "inference.VariableElimination#<init>", "error" : "unsupported entity"}, {"label" : "debugInfo", "tail" : ": Boolean", "member" : "inference.VariableElimination.debugInfo", "link" : "inference\/VariableElimination.html#debugInfo:Boolean", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "inference.VariableElimination.bnet", "link" : "inference\/VariableElimination.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "inference\/VariableElimination.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "inference\/VariableElimination.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "inference\/VariableElimination.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "inference\/VariableElimination.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "inference\/VariableElimination.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "inference\/VariableElimination.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "inference\/VariableElimination.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "inference\/VariableElimination.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "inference\/VariableElimination.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "inference\/VariableElimination.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "inference\/VariableElimination.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "inference\/VariableElimination.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "inference\/VariableElimination.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "inference\/VariableElimination.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "inference\/VariableElimination.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "inference\/VariableElimination.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "inference\/VariableElimination.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "inference\/VariableElimination.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "inference\/VariableElimination.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "inference\/VariableElimination.html", "kind" : "class"}, {"name" : "inference.VariableEliminationTest", "shortDescription" : "", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "inference\/VariableEliminationTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "inference\/VariableEliminationTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "inference\/VariableEliminationTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "inference\/VariableEliminationTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "marginalizers", "tail" : ": List[potential.OperatorType.Value]", "member" : "inference.VariableEliminationTest.marginalizers", "link" : "inference\/VariableEliminationTest.html#marginalizers:List[potential.OperatorType.Value]", "kind" : "var"}, {"label" : "combiners", "tail" : ": List[potential.OperatorType.Value]", "member" : "inference.VariableEliminationTest.combiners", "link" : "inference\/VariableEliminationTest.html#combiners:List[potential.OperatorType.Value]", "kind" : "var"}, {"label" : "compareResults", "tail" : "(refPots: List[Potential], altPots: List[Potential]): Boolean", "member" : "inference.VariableEliminationTest.compareResults", "link" : "inference\/VariableEliminationTest.html#compareResults(refPots:List[potential.Potential],altPots:List[potential.Potential]):Boolean", "kind" : "def"}, {"label" : "mlimEngine", "tail" : ": VariableElimination", "member" : "inference.VariableEliminationTest.mlimEngine", "link" : "inference\/VariableEliminationTest.html#mlimEngine:inference.VariableElimination", "kind" : "val"}, {"label" : "asimEngine", "tail" : ": VariableElimination", "member" : "inference.VariableEliminationTest.asimEngine", "link" : "inference\/VariableEliminationTest.html#asimEngine:inference.VariableElimination", "kind" : "val"}, {"label" : "aimEngine", "tail" : ": VariableElimination", "member" : "inference.VariableEliminationTest.aimEngine", "link" : "inference\/VariableEliminationTest.html#aimEngine:inference.VariableElimination", "kind" : "val"}, {"label" : "treeEngine", "tail" : ": VariableElimination", "member" : "inference.VariableEliminationTest.treeEngine", "link" : "inference\/VariableEliminationTest.html#treeEngine:inference.VariableElimination", "kind" : "val"}, {"label" : "refSolution", "tail" : ": List[Potential]", "member" : "inference.VariableEliminationTest.refSolution", "link" : "inference\/VariableEliminationTest.html#refSolution:List[potential.Potential]", "kind" : "val"}, {"label" : "refEngine", "tail" : ": VariableElimination", "member" : "inference.VariableEliminationTest.refEngine", "link" : "inference\/VariableEliminationTest.html#refEngine:inference.VariableElimination", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "inference.VariableEliminationTest.bnet", "link" : "inference\/VariableEliminationTest.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "inference.VariableEliminationTest.extension", "link" : "inference\/VariableEliminationTest.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "inference.VariableEliminationTest.netName", "link" : "inference\/VariableEliminationTest.html#netName:String", "kind" : "var"}, {"member" : "inference.VariableEliminationTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "inference\/VariableEliminationTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "inference\/VariableEliminationTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "inference\/VariableEliminationTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "inference\/VariableEliminationTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "inference\/VariableEliminationTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "inference\/VariableEliminationTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "inference\/VariableEliminationTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "inference\/VariableEliminationTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "inference\/VariableEliminationTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "inference\/VariableEliminationTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "inference\/VariableEliminationTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "inference\/VariableEliminationTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "inference\/VariableEliminationTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "inference\/VariableEliminationTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "inference\/VariableEliminationTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "inference\/VariableEliminationTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "inference\/VariableEliminationTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "inference\/VariableEliminationTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "inference\/VariableEliminationTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "inference\/VariableEliminationTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "inference\/VariableEliminationTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "inference\/VariableEliminationTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "inference\/VariableEliminationTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "inference\/VariableEliminationTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "inference\/VariableEliminationTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "inference\/VariableEliminationTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "inference\/VariableEliminationTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "inference\/VariableEliminationTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "inference\/VariableEliminationTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "inference\/VariableEliminationTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "inference\/VariableEliminationTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "inference\/VariableEliminationTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "inference\/VariableEliminationTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "inference\/VariableEliminationTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "inference\/VariableEliminationTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "inference\/VariableEliminationTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "inference\/VariableEliminationTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "inference\/VariableEliminationTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "inference\/VariableEliminationTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "inference\/VariableEliminationTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "inference\/VariableEliminationTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "inference\/VariableEliminationTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "inference\/VariableEliminationTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "inference\/VariableEliminationTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "inference\/VariableEliminationTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "inference\/VariableEliminationTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "inference\/VariableEliminationTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "inference\/VariableEliminationTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "inference\/VariableEliminationTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "inference\/VariableEliminationTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "inference\/VariableEliminationTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "inference\/VariableEliminationTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "inference\/VariableEliminationTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "inference\/VariableEliminationTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "inference\/VariableEliminationTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "inference\/VariableEliminationTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "inference\/VariableEliminationTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "inference\/VariableEliminationTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "inference\/VariableEliminationTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "inference\/VariableEliminationTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "inference\/VariableEliminationTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "inference\/VariableEliminationTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "inference\/VariableEliminationTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "inference\/VariableEliminationTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "inference\/VariableEliminationTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "inference\/VariableEliminationTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "inference\/VariableEliminationTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "inference\/VariableEliminationTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "inference\/VariableEliminationTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "inference\/VariableEliminationTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "inference\/VariableEliminationTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "inference\/VariableEliminationTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "inference\/VariableEliminationTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "inference\/VariableEliminationTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "inference\/VariableEliminationTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "inference\/VariableEliminationTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "inference\/VariableEliminationTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "inference\/VariableEliminationTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "inference\/VariableEliminationTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "inference\/VariableEliminationTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "inference\/VariableEliminationTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "inference\/VariableEliminationTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "inference\/VariableEliminationTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "inference\/VariableEliminationTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "inference\/VariableEliminationTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "inference\/VariableEliminationTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "inference\/VariableEliminationTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "inference\/VariableEliminationTest.html", "kind" : "class"}], "base" : [{"name" : "base.Configuration", "shortDescription" : " Class for representing a given assignment of values to a set of variables.", "object" : "base\/Configuration$.html", "members_class" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "base\/Configuration.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "base.Configuration.getMemorySize", "link" : "base\/Configuration.html#getMemorySize:Long", "kind" : "def"}, {"label" : "getVariableValue", "tail" : "(variable: Variable): Int", "member" : "base.Configuration.getVariableValue", "link" : "base\/Configuration.html#getVariableValue(variable:base.Variable):Int", "kind" : "def"}, {"label" : "getVariableValue", "tail" : "(variable: Variable, index: Long): Int", "member" : "base.Configuration.getVariableValue", "link" : "base\/Configuration.html#getVariableValue(variable:base.Variable,index:Long):Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "base.Configuration.toString", "link" : "base\/Configuration.html#toString():String", "kind" : "def"}, {"label" : "computeIndex", "tail" : "(): Long", "member" : "base.Configuration.computeIndex", "link" : "base\/Configuration.html#computeIndex:Long", "kind" : "def"}, {"label" : "setValues", "tail" : "(newValues: Array[Int]): Configuration", "member" : "base.Configuration.setValues", "link" : "base\/Configuration.html#setValues(newValues:Array[Int]):base.Configuration", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Long]", "member" : "base.Configuration.iterator", "link" : "base\/Configuration.html#iterator:Iterator[Long]", "kind" : "def"}, {"label" : "weights", "tail" : ": Array[Long]", "member" : "base.Configuration.weights", "link" : "base\/Configuration.html#weights:Array[Long]", "kind" : "val"}, {"member" : "base.Configuration#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": Vector[Int]", "member" : "base.Configuration.values", "link" : "base\/Configuration.html#values:Vector[Int]", "kind" : "val"}, {"label" : "domain", "tail" : ": VariableSet", "member" : "base.Configuration.domain", "link" : "base\/Configuration.html#domain:base.VariableSet", "kind" : "val"}, {"label" : "seq", "tail" : "(): Iterable[Long]", "member" : "scala.collection.Iterable.seq", "link" : "base\/Configuration.html#seq:Iterable[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Iterable]", "member" : "scala.collection.Iterable.companion", "link" : "base\/Configuration.html#companion:scala.collection.generic.GenericCompanion[Iterable]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IterableView[Long, Iterable[Long]]", "member" : "scala.collection.IterableLike.view", "link" : "base\/Configuration.html#view(from:Int,until:Int):scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): IterableView[Long, Iterable[Long]]", "member" : "scala.collection.IterableLike.view", "link" : "base\/Configuration.html#view:scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "base\/Configuration.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Long]", "member" : "scala.collection.IterableLike.toStream", "link" : "base\/Configuration.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "base\/Configuration.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[Iterable[Long], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "base\/Configuration.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[Iterable[Long], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "base\/Configuration.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[Iterable[Long], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "base\/Configuration.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "base\/Configuration.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Iterable[Long]", "member" : "scala.collection.IterableLike.dropRight", "link" : "base\/Configuration.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Iterable[Long]", "member" : "scala.collection.IterableLike.takeRight", "link" : "base\/Configuration.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Iterable[Long]]", "member" : "scala.collection.IterableLike.sliding", "link" : "base\/Configuration.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Iterable[Long]]", "member" : "scala.collection.IterableLike.sliding", "link" : "base\/Configuration.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Iterable[Long]]", "member" : "scala.collection.IterableLike.grouped", "link" : "base\/Configuration.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Long) ⇒ Boolean): Iterable[Long]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "base\/Configuration.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterable[Long]", "member" : "scala.collection.IterableLike.drop", "link" : "base\/Configuration.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterable[Long]", "member" : "scala.collection.IterableLike.take", "link" : "base\/Configuration.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterable[Long]", "member" : "scala.collection.IterableLike.slice", "link" : "base\/Configuration.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): Long", "member" : "scala.collection.IterableLike.head", "link" : "base\/Configuration.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Long]", "member" : "scala.collection.IterableLike.toIterator", "link" : "base\/Configuration.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Long]", "member" : "scala.collection.IterableLike.toIterable", "link" : "base\/Configuration.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Long, B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "base\/Configuration.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Long, B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "base\/Configuration.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableLike.isEmpty", "link" : "base\/Configuration.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Long) ⇒ Boolean): Option[Long]", "member" : "scala.collection.IterableLike.find", "link" : "base\/Configuration.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Long) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "base\/Configuration.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Long) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "base\/Configuration.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Long) ⇒ U): Unit", "member" : "scala.collection.IterableLike.foreach", "link" : "base\/Configuration.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Iterable[Long]): Iterable[Long]", "member" : "scala.collection.IterableLike.toCollection", "link" : "base\/Configuration.html#toCollection(repr:Repr):Iterable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Iterable[Long]", "member" : "scala.collection.IterableLike.thisCollection", "link" : "base\/Configuration.html#thisCollection:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Long) ⇒ GenTraversableOnce[B]): Iterable[Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "base\/Configuration.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Long) ⇒ GenTraversableOnce[B]): Iterable[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "base\/Configuration.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Long) ⇒ (A1, A2, A3)): (Iterable[A1], Iterable[A2], Iterable[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "base\/Configuration.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Long) ⇒ (A1, A2)): (Iterable[A1], Iterable[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "base\/Configuration.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "base\/Configuration.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[Long, Iterable[Long]]", "member" : "scala.collection.generic.GenericTraversableTemplate.newBuilder", "link" : "base\/Configuration.html#newBuilder:scala.collection.mutable.Builder[A,CC[A]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Long) ⇒ Boolean): FilterMonadic[Long, Iterable[Long]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "base\/Configuration.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "base\/Configuration.html#stringPrefix:String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Long, Col[Long]]): Col[Long]", "member" : "scala.collection.TraversableLike.to", "link" : "base\/Configuration.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Long]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "base\/Configuration.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Iterable[Long]]", "member" : "scala.collection.TraversableLike.inits", "link" : "base\/Configuration.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Iterable[Long]]", "member" : "scala.collection.TraversableLike.tails", "link" : "base\/Configuration.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Iterable[Long], Iterable[Long])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "base\/Configuration.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Long) ⇒ Boolean): (Iterable[Long], Iterable[Long])", "member" : "scala.collection.TraversableLike.span", "link" : "base\/Configuration.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Long) ⇒ Boolean): Iterable[Long]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "base\/Configuration.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Iterable[Long]", "member" : "scala.collection.TraversableLike.init", "link" : "base\/Configuration.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Long]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "base\/Configuration.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Long", "member" : "scala.collection.TraversableLike.last", "link" : "base\/Configuration.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): Iterable[Long]", "member" : "scala.collection.TraversableLike.tail", "link" : "base\/Configuration.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Long]", "member" : "scala.collection.TraversableLike.headOption", "link" : "base\/Configuration.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Long, B) ⇒ B)(bf: CanBuildFrom[Iterable[Long], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "base\/Configuration.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Long) ⇒ B)(bf: CanBuildFrom[Iterable[Long], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "base\/Configuration.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Iterable[Long], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "base\/Configuration.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Long) ⇒ K): Map[K, Iterable[Long]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "base\/Configuration.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Long) ⇒ Boolean): (Iterable[Long], Iterable[Long])", "member" : "scala.collection.TraversableLike.partition", "link" : "base\/Configuration.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Long, B])(bf: CanBuildFrom[Iterable[Long], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "base\/Configuration.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Long) ⇒ Boolean): Iterable[Long]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "base\/Configuration.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Long) ⇒ Boolean): Iterable[Long]", "member" : "scala.collection.TraversableLike.filter", "link" : "base\/Configuration.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Long) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Iterable[Long], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "base\/Configuration.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Long) ⇒ B)(bf: CanBuildFrom[Iterable[Long], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "base\/Configuration.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Iterable[Long], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "base\/Configuration.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Iterable[Long], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "base\/Configuration.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Iterable[Long], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "base\/Configuration.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "base\/Configuration.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[Long, ParIterable[Long]]", "member" : "scala.collection.TraversableLike.parCombiner", "link" : "base\/Configuration.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParIterable[A]]", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "base\/Configuration.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Iterable[Long]", "member" : "scala.collection.TraversableLike.repr", "link" : "base\/Configuration.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "base\/Configuration.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParIterable[Long]", "member" : "scala.collection.Parallelizable.par", "link" : "base\/Configuration.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "base\/Configuration.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "base\/Configuration.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "base\/Configuration.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "base\/Configuration.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "base\/Configuration.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "base\/Configuration.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Long, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "base\/Configuration.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Long]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "base\/Configuration.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "base\/Configuration.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "base\/Configuration.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Long]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "base\/Configuration.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Long]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "base\/Configuration.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Long]", "member" : "scala.collection.TraversableOnce.toList", "link" : "base\/Configuration.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "base\/Configuration.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "base\/Configuration.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "base\/Configuration.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "base\/Configuration.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Long) ⇒ B)(cmp: Ordering[B]): Long", "member" : "scala.collection.TraversableOnce.minBy", "link" : "base\/Configuration.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Long) ⇒ B)(cmp: Ordering[B]): Long", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "base\/Configuration.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Long", "member" : "scala.collection.TraversableOnce.max", "link" : "base\/Configuration.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Long", "member" : "scala.collection.TraversableOnce.min", "link" : "base\/Configuration.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "base\/Configuration.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "base\/Configuration.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Long) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "base\/Configuration.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "base\/Configuration.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "base\/Configuration.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "base\/Configuration.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Long, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "base\/Configuration.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Long) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "base\/Configuration.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Long) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "base\/Configuration.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Long) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "base\/Configuration.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Long, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "base\/Configuration.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Long) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "base\/Configuration.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Long, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "base\/Configuration.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Long) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "base\/Configuration.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "base\/Configuration.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "base\/Configuration.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Long]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "base\/Configuration.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "base\/Configuration.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/Configuration.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/Configuration.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/Configuration.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/Configuration.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/Configuration.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/Configuration.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/Configuration.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Configuration.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Configuration.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Configuration.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/Configuration.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/Configuration.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/Configuration.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "base\/Configuration.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "base\/Configuration.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/Configuration.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/Configuration.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/Configuration.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "computeIndex", "tail" : "(variables: VariableSet, newValues: Array[Int]): Long", "member" : "base.Configuration.computeIndex", "link" : "base\/Configuration$.html#computeIndex(variables:base.VariableSet,newValues:Array[Int]):Long", "kind" : "def"}, {"label" : "computeVariableValue", "tail" : "(variable: Variable, domain: VariableSet, index: Long): Int", "member" : "base.Configuration.computeVariableValue", "link" : "base\/Configuration$.html#computeVariableValue(variable:base.Variable,domain:base.VariableSet,index:Long):Int", "kind" : "def"}, {"label" : "computeVariableValue", "tail" : "(variables: VariableSet, varIndex: Int, index: Long): Int", "member" : "base.Configuration.computeVariableValue", "link" : "base\/Configuration$.html#computeVariableValue(variables:base.VariableSet,varIndex:Int,index:Long):Int", "kind" : "def"}, {"label" : "computeCoordinates", "tail" : "(variables: VariableSet, index: Long): Array[Int]", "member" : "base.Configuration.computeCoordinates", "link" : "base\/Configuration$.html#computeCoordinates(variables:base.VariableSet,index:Long):Array[Int]", "kind" : "def"}, {"label" : "computeIndex", "tail" : "(complete: VariableSet, values: Array[Int], partial: VariableSet): Long", "member" : "base.Configuration.computeIndex", "link" : "base\/Configuration$.html#computeIndex(complete:base.VariableSet,values:Array[Int],partial:base.VariableSet):Long", "kind" : "def"}, {"label" : "projection", "tail" : "(complete: VariableSet, refValues: Array[Int], partial: VariableSet): Array[Int]", "member" : "base.Configuration.projection", "link" : "base\/Configuration$.html#projection(complete:base.VariableSet,refValues:Array[Int],partial:base.VariableSet):Array[Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(domain: VariableSet, index: Long): Configuration", "member" : "base.Configuration.apply", "link" : "base\/Configuration$.html#apply(domain:base.VariableSet,index:Long):base.Configuration", "kind" : "def"}, {"label" : "apply", "tail" : "(domain: VariableSet, values: Vector[Int]): Configuration", "member" : "base.Configuration.apply", "link" : "base\/Configuration$.html#apply(domain:base.VariableSet,values:Vector[Int]):base.Configuration", "kind" : "def"}, {"label" : "apply", "tail" : "(domain: VariableSet): Configuration", "member" : "base.Configuration.apply", "link" : "base\/Configuration$.html#apply(domain:base.VariableSet):base.Configuration", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/Configuration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/Configuration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/Configuration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/Configuration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/Configuration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/Configuration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/Configuration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Configuration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Configuration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Configuration$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/Configuration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/Configuration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "base\/Configuration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/Configuration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "base\/Configuration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "base\/Configuration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/Configuration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/Configuration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/Configuration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "base\/Configuration.html", "kind" : "class"}, {"name" : "base.ConfigurationTest", "shortDescription" : "Class for testing the methods of Configuration class.", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "base\/ConfigurationTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "base\/ConfigurationTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "base\/ConfigurationTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "base\/ConfigurationTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "configuration", "tail" : ": Configuration", "member" : "base.ConfigurationTest.configuration", "link" : "base\/ConfigurationTest.html#configuration:base.Configuration", "kind" : "val"}, {"label" : "variableSet", "tail" : ": VariableSet", "member" : "base.ConfigurationTest.variableSet", "link" : "base\/ConfigurationTest.html#variableSet:base.VariableSet", "kind" : "val"}, {"label" : "variable5", "tail" : ": Variable", "member" : "base.ConfigurationTest.variable5", "link" : "base\/ConfigurationTest.html#variable5:base.Variable", "kind" : "val"}, {"label" : "variable4", "tail" : ": Variable", "member" : "base.ConfigurationTest.variable4", "link" : "base\/ConfigurationTest.html#variable4:base.Variable", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "base.ConfigurationTest.variable3", "link" : "base\/ConfigurationTest.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "base.ConfigurationTest.variable2", "link" : "base\/ConfigurationTest.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "base.ConfigurationTest.variable1", "link" : "base\/ConfigurationTest.html#variable1:base.Variable", "kind" : "val"}, {"member" : "base.ConfigurationTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "base\/ConfigurationTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "base\/ConfigurationTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "base\/ConfigurationTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "base\/ConfigurationTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "base\/ConfigurationTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "base\/ConfigurationTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "base\/ConfigurationTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "base\/ConfigurationTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "base\/ConfigurationTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "base\/ConfigurationTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "base\/ConfigurationTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "base\/ConfigurationTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "base\/ConfigurationTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "base\/ConfigurationTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "base\/ConfigurationTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "base\/ConfigurationTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "base\/ConfigurationTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "base\/ConfigurationTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "base\/ConfigurationTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "base\/ConfigurationTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "base\/ConfigurationTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "base\/ConfigurationTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "base\/ConfigurationTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "base\/ConfigurationTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "base\/ConfigurationTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "base\/ConfigurationTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "base\/ConfigurationTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "base\/ConfigurationTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "base\/ConfigurationTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "base\/ConfigurationTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/ConfigurationTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/ConfigurationTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/ConfigurationTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/ConfigurationTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/ConfigurationTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/ConfigurationTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/ConfigurationTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/ConfigurationTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "base\/ConfigurationTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "base\/ConfigurationTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "base\/ConfigurationTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "base\/ConfigurationTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "base\/ConfigurationTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "base\/ConfigurationTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "base\/ConfigurationTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "base\/ConfigurationTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "base\/ConfigurationTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "base\/ConfigurationTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "base\/ConfigurationTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "base\/ConfigurationTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "base\/ConfigurationTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "base\/ConfigurationTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "base\/ConfigurationTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "base\/ConfigurationTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "base\/ConfigurationTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "base\/ConfigurationTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "base\/ConfigurationTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "base\/ConfigurationTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "base\/ConfigurationTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "base\/ConfigurationTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "base\/ConfigurationTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "base\/ConfigurationTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/ConfigurationTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/ConfigurationTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/ConfigurationTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/ConfigurationTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/ConfigurationTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/ConfigurationTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "base\/ConfigurationTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/ConfigurationTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/ConfigurationTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/ConfigurationTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/ConfigurationTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/ConfigurationTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/ConfigurationTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/ConfigurationTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/ConfigurationTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/ConfigurationTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/ConfigurationTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/ConfigurationTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/ConfigurationTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/ConfigurationTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "base\/ConfigurationTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "base\/ConfigurationTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/ConfigurationTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/ConfigurationTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/ConfigurationTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "base\/ConfigurationTest.html", "kind" : "class"}, {"name" : "base.ExperimentConfigurationTest", "shortDescription" : "Class for testing the methods of Configuration class.", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "base\/ExperimentConfigurationTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "base\/ExperimentConfigurationTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "base\/ExperimentConfigurationTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "base\/ExperimentConfigurationTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "configuration", "tail" : ": Configuration", "member" : "base.ExperimentConfigurationTest.configuration", "link" : "base\/ExperimentConfigurationTest.html#configuration:base.Configuration", "kind" : "val"}, {"label" : "variableSet", "tail" : ": VariableSet", "member" : "base.ExperimentConfigurationTest.variableSet", "link" : "base\/ExperimentConfigurationTest.html#variableSet:base.VariableSet", "kind" : "val"}, {"label" : "variable5", "tail" : ": Variable", "member" : "base.ExperimentConfigurationTest.variable5", "link" : "base\/ExperimentConfigurationTest.html#variable5:base.Variable", "kind" : "val"}, {"label" : "variable4", "tail" : ": Variable", "member" : "base.ExperimentConfigurationTest.variable4", "link" : "base\/ExperimentConfigurationTest.html#variable4:base.Variable", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "base.ExperimentConfigurationTest.variable3", "link" : "base\/ExperimentConfigurationTest.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "base.ExperimentConfigurationTest.variable2", "link" : "base\/ExperimentConfigurationTest.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "base.ExperimentConfigurationTest.variable1", "link" : "base\/ExperimentConfigurationTest.html#variable1:base.Variable", "kind" : "val"}, {"member" : "base.ExperimentConfigurationTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "base\/ExperimentConfigurationTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "base\/ExperimentConfigurationTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "base\/ExperimentConfigurationTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "base\/ExperimentConfigurationTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "base\/ExperimentConfigurationTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "base\/ExperimentConfigurationTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "base\/ExperimentConfigurationTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "base\/ExperimentConfigurationTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "base\/ExperimentConfigurationTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "base\/ExperimentConfigurationTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "base\/ExperimentConfigurationTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "base\/ExperimentConfigurationTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "base\/ExperimentConfigurationTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "base\/ExperimentConfigurationTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "base\/ExperimentConfigurationTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "base\/ExperimentConfigurationTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "base\/ExperimentConfigurationTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "base\/ExperimentConfigurationTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "base\/ExperimentConfigurationTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "base\/ExperimentConfigurationTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "base\/ExperimentConfigurationTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "base\/ExperimentConfigurationTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "base\/ExperimentConfigurationTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "base\/ExperimentConfigurationTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "base\/ExperimentConfigurationTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "base\/ExperimentConfigurationTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "base\/ExperimentConfigurationTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "base\/ExperimentConfigurationTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "base\/ExperimentConfigurationTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "base\/ExperimentConfigurationTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/ExperimentConfigurationTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/ExperimentConfigurationTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/ExperimentConfigurationTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/ExperimentConfigurationTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/ExperimentConfigurationTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/ExperimentConfigurationTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/ExperimentConfigurationTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/ExperimentConfigurationTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "base\/ExperimentConfigurationTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "base\/ExperimentConfigurationTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "base\/ExperimentConfigurationTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "base\/ExperimentConfigurationTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "base\/ExperimentConfigurationTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "base\/ExperimentConfigurationTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "base\/ExperimentConfigurationTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "base\/ExperimentConfigurationTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "base\/ExperimentConfigurationTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "base\/ExperimentConfigurationTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "base\/ExperimentConfigurationTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "base\/ExperimentConfigurationTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "base\/ExperimentConfigurationTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "base\/ExperimentConfigurationTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "base\/ExperimentConfigurationTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "base\/ExperimentConfigurationTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "base\/ExperimentConfigurationTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "base\/ExperimentConfigurationTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "base\/ExperimentConfigurationTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "base\/ExperimentConfigurationTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "base\/ExperimentConfigurationTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "base\/ExperimentConfigurationTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "base\/ExperimentConfigurationTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "base\/ExperimentConfigurationTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/ExperimentConfigurationTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/ExperimentConfigurationTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/ExperimentConfigurationTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/ExperimentConfigurationTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/ExperimentConfigurationTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/ExperimentConfigurationTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "base\/ExperimentConfigurationTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/ExperimentConfigurationTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/ExperimentConfigurationTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/ExperimentConfigurationTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/ExperimentConfigurationTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/ExperimentConfigurationTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/ExperimentConfigurationTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/ExperimentConfigurationTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/ExperimentConfigurationTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/ExperimentConfigurationTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/ExperimentConfigurationTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/ExperimentConfigurationTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/ExperimentConfigurationTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/ExperimentConfigurationTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "base\/ExperimentConfigurationTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "base\/ExperimentConfigurationTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/ExperimentConfigurationTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/ExperimentConfigurationTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/ExperimentConfigurationTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "base\/ExperimentConfigurationTest.html", "kind" : "class"}, {"name" : "base.Variable", "shortDescription" : "Class for representing DISCRETE variables", "object" : "base\/Variable$.html", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "base.Variable.hashCode", "link" : "base\/Variable.html#hashCode():Int", "kind" : "def"}, {"label" : "getMemorySize", "tail" : "(): Int", "member" : "base.Variable.getMemorySize", "link" : "base\/Variable.html#getMemorySize:Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "base.Variable.equals", "link" : "base\/Variable.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "base.Variable.toString", "link" : "base\/Variable.html#toString():String", "kind" : "def"}, {"label" : "getNumberStates", "tail" : "(): Int", "member" : "base.Variable.getNumberStates", "link" : "base\/Variable.html#getNumberStates:Int", "kind" : "def"}, {"member" : "base.Variable#<init>", "error" : "unsupported entity"}, {"label" : "states", "tail" : ": List[String]", "member" : "base.Variable.states", "link" : "base\/Variable.html#states:List[String]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "base.Variable.name", "link" : "base\/Variable.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/Variable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/Variable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/Variable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/Variable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/Variable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/Variable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/Variable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Variable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Variable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Variable.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/Variable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/Variable.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/Variable.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/Variable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/Variable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/Variable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "generateWithRandomCardinality", "tail" : "(index: Int, maxCardinality: Int): Variable", "member" : "base.Variable.generateWithRandomCardinality", "link" : "base\/Variable$.html#generateWithRandomCardinality(index:Int,maxCardinality:Int):base.Variable", "kind" : "def"}, {"label" : "generate", "tail" : "(index: Int, numStates: Int): Variable", "member" : "base.Variable.generate", "link" : "base\/Variable$.html#generate(index:Int,numStates:Int):base.Variable", "kind" : "def"}, {"label" : "readObject", "tail" : "(fileName: String): Variable", "member" : "base.Variable.readObject", "link" : "base\/Variable$.html#readObject(fileName:String):base.Variable", "kind" : "def"}, {"label" : "writeObject", "tail" : "(fileName: String, variable: Variable): Unit", "member" : "base.Variable.writeObject", "link" : "base\/Variable$.html#writeObject(fileName:String,variable:base.Variable):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(id: Int, numberStates: Int): Variable", "member" : "base.Variable.apply", "link" : "base\/Variable$.html#apply(id:Int,numberStates:Int):base.Variable", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, states: List[String]): Variable", "member" : "base.Variable.apply", "link" : "base\/Variable$.html#apply(name:String,states:List[String]):base.Variable", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/Variable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/Variable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/Variable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/Variable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/Variable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/Variable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/Variable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Variable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Variable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/Variable$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/Variable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/Variable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "base\/Variable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/Variable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "base\/Variable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "base\/Variable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/Variable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/Variable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/Variable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "base\/Variable.html", "kind" : "class"}, {"name" : "base.VariableSet", "shortDescription" : "Class for storing list of variables acting as the domain of apotential or configuration (for example)", "object" : "base\/VariableSet$.html", "members_class" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "base\/VariableSet.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "getAccumulatedCardinals", "tail" : "(): List[Long]", "member" : "base.VariableSet.getAccumulatedCardinals", "link" : "base\/VariableSet.html#getAccumulatedCardinals:List[Long]", "kind" : "def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "base.VariableSet.getMemorySize", "link" : "base\/VariableSet.html#getMemorySize:Long", "kind" : "def"}, {"label" : "computeRelativeWeights", "tail" : "(source: VariableSet): Array[Long]", "member" : "base.VariableSet.computeRelativeWeights", "link" : "base\/VariableSet.html#computeRelativeWeights(source:base.VariableSet):Array[Long]", "kind" : "def"}, {"label" : "removeVariable", "tail" : "(variable: Variable): VariableSet", "member" : "base.VariableSet.removeVariable", "link" : "base\/VariableSet.html#removeVariable(variable:base.Variable):base.VariableSet", "kind" : "def"}, {"label" : "difference", "tail" : "(other: VariableSet): VariableSet", "member" : "base.VariableSet.difference", "link" : "base\/VariableSet.html#difference(other:base.VariableSet):base.VariableSet", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: VariableSet): VariableSet", "member" : "base.VariableSet.intersection", "link" : "base\/VariableSet.html#intersection(other:base.VariableSet):base.VariableSet", "kind" : "def"}, {"label" : "union", "tail" : "(other: VariableSet): VariableSet", "member" : "base.VariableSet.union", "link" : "base\/VariableSet.html#union(other:base.VariableSet):base.VariableSet", "kind" : "def"}, {"label" : "simpleToString", "tail" : "(): String", "member" : "base.VariableSet.simpleToString", "link" : "base\/VariableSet.html#simpleToString:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "base.VariableSet.toString", "link" : "base\/VariableSet.html#toString():String", "kind" : "def"}, {"label" : "contains", "tail" : "(variable: Variable): Boolean", "member" : "base.VariableSet.contains", "link" : "base\/VariableSet.html#contains(variable:base.Variable):Boolean", "kind" : "def"}, {"label" : "getSize", "tail" : "(): Int", "member" : "base.VariableSet.getSize", "link" : "base\/VariableSet.html#getSize:Int", "kind" : "def"}, {"label" : "getIndex", "tail" : "(variable: Variable): Int", "member" : "base.VariableSet.getIndex", "link" : "base\/VariableSet.html#getIndex(variable:base.Variable):Int", "kind" : "def"}, {"label" : "getVariable", "tail" : "(name: String): Variable", "member" : "base.VariableSet.getVariable", "link" : "base\/VariableSet.html#getVariable(name:String):base.Variable", "kind" : "def"}, {"label" : "getVariable", "tail" : "(index: Int): Variable", "member" : "base.VariableSet.getVariable", "link" : "base\/VariableSet.html#getVariable(index:Int):base.Variable", "kind" : "def"}, {"label" : "possibleValues", "tail" : ": Long", "member" : "base.VariableSet.possibleValues", "link" : "base\/VariableSet.html#possibleValues:Long", "kind" : "val"}, {"label" : "cardinals", "tail" : ": Array[Int]", "member" : "base.VariableSet.cardinals", "link" : "base\/VariableSet.html#cardinals:Array[Int]", "kind" : "val"}, {"label" : "weights", "tail" : ": Array[Long]", "member" : "base.VariableSet.weights", "link" : "base\/VariableSet.html#weights:Array[Long]", "kind" : "val"}, {"label" : "mapVariableIndex", "tail" : ": Map[Variable, Int]", "member" : "base.VariableSet.mapVariableIndex", "link" : "base\/VariableSet.html#mapVariableIndex:Map[base.Variable,Int]", "kind" : "val"}, {"label" : "mapIndexVariable", "tail" : ": Map[Int, Variable]", "member" : "base.VariableSet.mapIndexVariable", "link" : "base\/VariableSet.html#mapIndexVariable:Map[Int,base.Variable]", "kind" : "val"}, {"label" : "iterator", "tail" : "(): Iterator[Variable]", "member" : "base.VariableSet.iterator", "link" : "base\/VariableSet.html#iterator:Iterator[base.Variable]", "kind" : "def"}, {"member" : "base.VariableSet#<init>", "error" : "unsupported entity"}, {"label" : "variableList", "tail" : ": List[Variable]", "member" : "base.VariableSet.variableList", "link" : "base\/VariableSet.html#variableList:List[base.Variable]", "kind" : "val"}, {"label" : "seq", "tail" : "(): Iterable[Variable]", "member" : "scala.collection.Iterable.seq", "link" : "base\/VariableSet.html#seq:Iterable[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Iterable]", "member" : "scala.collection.Iterable.companion", "link" : "base\/VariableSet.html#companion:scala.collection.generic.GenericCompanion[Iterable]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IterableView[Variable, Iterable[Variable]]", "member" : "scala.collection.IterableLike.view", "link" : "base\/VariableSet.html#view(from:Int,until:Int):scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): IterableView[Variable, Iterable[Variable]]", "member" : "scala.collection.IterableLike.view", "link" : "base\/VariableSet.html#view:scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "base\/VariableSet.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Variable]", "member" : "scala.collection.IterableLike.toStream", "link" : "base\/VariableSet.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "base\/VariableSet.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[Iterable[Variable], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "base\/VariableSet.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[Iterable[Variable], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "base\/VariableSet.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[Iterable[Variable], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "base\/VariableSet.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "base\/VariableSet.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Iterable[Variable]", "member" : "scala.collection.IterableLike.dropRight", "link" : "base\/VariableSet.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Iterable[Variable]", "member" : "scala.collection.IterableLike.takeRight", "link" : "base\/VariableSet.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Iterable[Variable]]", "member" : "scala.collection.IterableLike.sliding", "link" : "base\/VariableSet.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Iterable[Variable]]", "member" : "scala.collection.IterableLike.sliding", "link" : "base\/VariableSet.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Iterable[Variable]]", "member" : "scala.collection.IterableLike.grouped", "link" : "base\/VariableSet.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Variable) ⇒ Boolean): Iterable[Variable]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "base\/VariableSet.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterable[Variable]", "member" : "scala.collection.IterableLike.drop", "link" : "base\/VariableSet.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterable[Variable]", "member" : "scala.collection.IterableLike.take", "link" : "base\/VariableSet.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterable[Variable]", "member" : "scala.collection.IterableLike.slice", "link" : "base\/VariableSet.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): Variable", "member" : "scala.collection.IterableLike.head", "link" : "base\/VariableSet.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Variable]", "member" : "scala.collection.IterableLike.toIterator", "link" : "base\/VariableSet.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Variable]", "member" : "scala.collection.IterableLike.toIterable", "link" : "base\/VariableSet.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Variable, B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "base\/VariableSet.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Variable, B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "base\/VariableSet.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableLike.isEmpty", "link" : "base\/VariableSet.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Variable) ⇒ Boolean): Option[Variable]", "member" : "scala.collection.IterableLike.find", "link" : "base\/VariableSet.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Variable) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "base\/VariableSet.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Variable) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "base\/VariableSet.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Variable) ⇒ U): Unit", "member" : "scala.collection.IterableLike.foreach", "link" : "base\/VariableSet.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Iterable[Variable]): Iterable[Variable]", "member" : "scala.collection.IterableLike.toCollection", "link" : "base\/VariableSet.html#toCollection(repr:Repr):Iterable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Iterable[Variable]", "member" : "scala.collection.IterableLike.thisCollection", "link" : "base\/VariableSet.html#thisCollection:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Variable) ⇒ GenTraversableOnce[B]): Iterable[Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "base\/VariableSet.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Variable) ⇒ GenTraversableOnce[B]): Iterable[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "base\/VariableSet.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Variable) ⇒ (A1, A2, A3)): (Iterable[A1], Iterable[A2], Iterable[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "base\/VariableSet.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Variable) ⇒ (A1, A2)): (Iterable[A1], Iterable[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "base\/VariableSet.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "base\/VariableSet.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[Variable, Iterable[Variable]]", "member" : "scala.collection.generic.GenericTraversableTemplate.newBuilder", "link" : "base\/VariableSet.html#newBuilder:scala.collection.mutable.Builder[A,CC[A]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Variable) ⇒ Boolean): FilterMonadic[Variable, Iterable[Variable]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "base\/VariableSet.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "base\/VariableSet.html#stringPrefix:String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Variable, Col[Variable]]): Col[Variable]", "member" : "scala.collection.TraversableLike.to", "link" : "base\/VariableSet.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Variable]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "base\/VariableSet.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Iterable[Variable]]", "member" : "scala.collection.TraversableLike.inits", "link" : "base\/VariableSet.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Iterable[Variable]]", "member" : "scala.collection.TraversableLike.tails", "link" : "base\/VariableSet.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Iterable[Variable], Iterable[Variable])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "base\/VariableSet.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Variable) ⇒ Boolean): (Iterable[Variable], Iterable[Variable])", "member" : "scala.collection.TraversableLike.span", "link" : "base\/VariableSet.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Variable) ⇒ Boolean): Iterable[Variable]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "base\/VariableSet.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Iterable[Variable]", "member" : "scala.collection.TraversableLike.init", "link" : "base\/VariableSet.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Variable]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "base\/VariableSet.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Variable", "member" : "scala.collection.TraversableLike.last", "link" : "base\/VariableSet.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): Iterable[Variable]", "member" : "scala.collection.TraversableLike.tail", "link" : "base\/VariableSet.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Variable]", "member" : "scala.collection.TraversableLike.headOption", "link" : "base\/VariableSet.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Variable, B) ⇒ B)(bf: CanBuildFrom[Iterable[Variable], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "base\/VariableSet.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Variable) ⇒ B)(bf: CanBuildFrom[Iterable[Variable], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "base\/VariableSet.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Iterable[Variable], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "base\/VariableSet.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Variable) ⇒ K): Map[K, Iterable[Variable]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "base\/VariableSet.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Variable) ⇒ Boolean): (Iterable[Variable], Iterable[Variable])", "member" : "scala.collection.TraversableLike.partition", "link" : "base\/VariableSet.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Variable, B])(bf: CanBuildFrom[Iterable[Variable], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "base\/VariableSet.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Variable) ⇒ Boolean): Iterable[Variable]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "base\/VariableSet.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Variable) ⇒ Boolean): Iterable[Variable]", "member" : "scala.collection.TraversableLike.filter", "link" : "base\/VariableSet.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Variable) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Iterable[Variable], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "base\/VariableSet.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Variable) ⇒ B)(bf: CanBuildFrom[Iterable[Variable], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "base\/VariableSet.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Iterable[Variable], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "base\/VariableSet.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Iterable[Variable], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "base\/VariableSet.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Iterable[Variable], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "base\/VariableSet.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "base\/VariableSet.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[Variable, ParIterable[Variable]]", "member" : "scala.collection.TraversableLike.parCombiner", "link" : "base\/VariableSet.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParIterable[A]]", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "base\/VariableSet.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Iterable[Variable]", "member" : "scala.collection.TraversableLike.repr", "link" : "base\/VariableSet.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "base\/VariableSet.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParIterable[Variable]", "member" : "scala.collection.Parallelizable.par", "link" : "base\/VariableSet.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "base\/VariableSet.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "base\/VariableSet.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "base\/VariableSet.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "base\/VariableSet.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "base\/VariableSet.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "base\/VariableSet.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Variable, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "base\/VariableSet.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Variable]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "base\/VariableSet.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "base\/VariableSet.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "base\/VariableSet.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Variable]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "base\/VariableSet.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Variable]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "base\/VariableSet.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Variable]", "member" : "scala.collection.TraversableOnce.toList", "link" : "base\/VariableSet.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "base\/VariableSet.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "base\/VariableSet.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "base\/VariableSet.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "base\/VariableSet.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Variable) ⇒ B)(cmp: Ordering[B]): Variable", "member" : "scala.collection.TraversableOnce.minBy", "link" : "base\/VariableSet.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Variable) ⇒ B)(cmp: Ordering[B]): Variable", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "base\/VariableSet.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Variable", "member" : "scala.collection.TraversableOnce.max", "link" : "base\/VariableSet.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Variable", "member" : "scala.collection.TraversableOnce.min", "link" : "base\/VariableSet.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "base\/VariableSet.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "base\/VariableSet.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Variable) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "base\/VariableSet.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "base\/VariableSet.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "base\/VariableSet.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "base\/VariableSet.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Variable, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "base\/VariableSet.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Variable) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "base\/VariableSet.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Variable) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "base\/VariableSet.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Variable) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "base\/VariableSet.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Variable, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "base\/VariableSet.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Variable) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "base\/VariableSet.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Variable, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "base\/VariableSet.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Variable) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "base\/VariableSet.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "base\/VariableSet.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "base\/VariableSet.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Variable]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "base\/VariableSet.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "base\/VariableSet.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/VariableSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/VariableSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/VariableSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/VariableSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/VariableSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/VariableSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/VariableSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableSet.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/VariableSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/VariableSet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/VariableSet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "base\/VariableSet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "base\/VariableSet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/VariableSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/VariableSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/VariableSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "getRandomSelection", "tail" : "(set: VariableSet, size: Int): VariableSet", "member" : "base.VariableSet.getRandomSelection", "link" : "base\/VariableSet$.html#getRandomSelection(set:base.VariableSet,size:Int):base.VariableSet", "kind" : "def"}, {"label" : "generateRandomSet", "tail" : "(maxCardinality: Int, minGlobalCardinality: Long, maxGlobalCardinality: Long): VariableSet", "member" : "base.VariableSet.generateRandomSet", "link" : "base\/VariableSet$.html#generateRandomSet(maxCardinality:Int,minGlobalCardinality:Long,maxGlobalCardinality:Long):base.VariableSet", "kind" : "def"}, {"label" : "generateRandomSet", "tail" : "(numberVariables: Int, maxCardinality: Int): VariableSet", "member" : "base.VariableSet.generateRandomSet", "link" : "base\/VariableSet$.html#generateRandomSet(numberVariables:Int,maxCardinality:Int):base.VariableSet", "kind" : "def"}, {"label" : "readObject", "tail" : "(fileName: String): VariableSet", "member" : "base.VariableSet.readObject", "link" : "base\/VariableSet$.html#readObject(fileName:String):base.VariableSet", "kind" : "def"}, {"label" : "writeObject", "tail" : "(fileName: String, variableSet: VariableSet): Unit", "member" : "base.VariableSet.writeObject", "link" : "base\/VariableSet$.html#writeObject(fileName:String,variableSet:base.VariableSet):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(variableList: List[Variable]): VariableSet", "member" : "base.VariableSet.apply", "link" : "base\/VariableSet$.html#apply(variableList:List[base.Variable]):base.VariableSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/VariableSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/VariableSet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/VariableSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/VariableSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/VariableSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/VariableSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/VariableSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/VariableSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/VariableSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "base\/VariableSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/VariableSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "base\/VariableSet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "base\/VariableSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/VariableSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/VariableSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/VariableSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "base\/VariableSet.html", "kind" : "class"}, {"name" : "base.VariableSetTest", "shortDescription" : "Class for making unit tests on VariableSet class", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "base\/VariableSetTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "base\/VariableSetTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "base\/VariableSetTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "base\/VariableSetTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "variableSet3", "tail" : ": VariableSet", "member" : "base.VariableSetTest.variableSet3", "link" : "base\/VariableSetTest.html#variableSet3:base.VariableSet", "kind" : "val"}, {"label" : "variable26", "tail" : ": Variable", "member" : "base.VariableSetTest.variable26", "link" : "base\/VariableSetTest.html#variable26:base.Variable", "kind" : "val"}, {"label" : "variable25", "tail" : ": Variable", "member" : "base.VariableSetTest.variable25", "link" : "base\/VariableSetTest.html#variable25:base.Variable", "kind" : "val"}, {"label" : "variable24", "tail" : ": Variable", "member" : "base.VariableSetTest.variable24", "link" : "base\/VariableSetTest.html#variable24:base.Variable", "kind" : "val"}, {"label" : "variable23", "tail" : ": Variable", "member" : "base.VariableSetTest.variable23", "link" : "base\/VariableSetTest.html#variable23:base.Variable", "kind" : "val"}, {"label" : "variable22", "tail" : ": Variable", "member" : "base.VariableSetTest.variable22", "link" : "base\/VariableSetTest.html#variable22:base.Variable", "kind" : "val"}, {"label" : "variable21", "tail" : ": Variable", "member" : "base.VariableSetTest.variable21", "link" : "base\/VariableSetTest.html#variable21:base.Variable", "kind" : "val"}, {"label" : "union", "tail" : ": VariableSet", "member" : "base.VariableSetTest.union", "link" : "base\/VariableSetTest.html#union:base.VariableSet", "kind" : "val"}, {"label" : "variableSet2", "tail" : ": VariableSet", "member" : "base.VariableSetTest.variableSet2", "link" : "base\/VariableSetTest.html#variableSet2:base.VariableSet", "kind" : "val"}, {"label" : "variableSet1", "tail" : ": VariableSet", "member" : "base.VariableSetTest.variableSet1", "link" : "base\/VariableSetTest.html#variableSet1:base.VariableSet", "kind" : "val"}, {"label" : "variable5", "tail" : ": Variable", "member" : "base.VariableSetTest.variable5", "link" : "base\/VariableSetTest.html#variable5:base.Variable", "kind" : "val"}, {"label" : "variable4", "tail" : ": Variable", "member" : "base.VariableSetTest.variable4", "link" : "base\/VariableSetTest.html#variable4:base.Variable", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "base.VariableSetTest.variable3", "link" : "base\/VariableSetTest.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "base.VariableSetTest.variable2", "link" : "base\/VariableSetTest.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "base.VariableSetTest.variable1", "link" : "base\/VariableSetTest.html#variable1:base.Variable", "kind" : "val"}, {"member" : "base.VariableSetTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "base\/VariableSetTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "base\/VariableSetTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "base\/VariableSetTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "base\/VariableSetTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "base\/VariableSetTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "base\/VariableSetTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "base\/VariableSetTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "base\/VariableSetTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "base\/VariableSetTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "base\/VariableSetTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "base\/VariableSetTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "base\/VariableSetTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "base\/VariableSetTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "base\/VariableSetTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "base\/VariableSetTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "base\/VariableSetTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "base\/VariableSetTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "base\/VariableSetTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "base\/VariableSetTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "base\/VariableSetTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "base\/VariableSetTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "base\/VariableSetTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "base\/VariableSetTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "base\/VariableSetTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "base\/VariableSetTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "base\/VariableSetTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "base\/VariableSetTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "base\/VariableSetTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "base\/VariableSetTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "base\/VariableSetTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/VariableSetTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/VariableSetTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/VariableSetTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/VariableSetTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/VariableSetTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/VariableSetTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/VariableSetTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/VariableSetTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "base\/VariableSetTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "base\/VariableSetTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "base\/VariableSetTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "base\/VariableSetTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "base\/VariableSetTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "base\/VariableSetTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "base\/VariableSetTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "base\/VariableSetTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "base\/VariableSetTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "base\/VariableSetTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "base\/VariableSetTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "base\/VariableSetTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "base\/VariableSetTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "base\/VariableSetTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "base\/VariableSetTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "base\/VariableSetTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "base\/VariableSetTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "base\/VariableSetTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "base\/VariableSetTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "base\/VariableSetTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "base\/VariableSetTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "base\/VariableSetTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "base\/VariableSetTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "base\/VariableSetTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/VariableSetTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/VariableSetTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/VariableSetTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/VariableSetTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/VariableSetTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/VariableSetTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "base\/VariableSetTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/VariableSetTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/VariableSetTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/VariableSetTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/VariableSetTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/VariableSetTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/VariableSetTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/VariableSetTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableSetTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableSetTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableSetTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/VariableSetTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/VariableSetTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/VariableSetTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "base\/VariableSetTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "base\/VariableSetTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/VariableSetTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/VariableSetTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/VariableSetTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "base\/VariableSetTest.html", "kind" : "class"}, {"name" : "base.VariableTest", "shortDescription" : "Simple test for Variable class", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "base\/VariableTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "base\/VariableTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "base\/VariableTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "base\/VariableTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "variable", "tail" : ": Variable", "member" : "base.VariableTest.variable", "link" : "base\/VariableTest.html#variable:base.Variable", "kind" : "val"}, {"member" : "base.VariableTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "base\/VariableTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "base\/VariableTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "base\/VariableTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "base\/VariableTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "base\/VariableTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "base\/VariableTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "base\/VariableTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "base\/VariableTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "base\/VariableTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "base\/VariableTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "base\/VariableTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "base\/VariableTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "base\/VariableTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "base\/VariableTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "base\/VariableTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "base\/VariableTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "base\/VariableTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "base\/VariableTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "base\/VariableTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "base\/VariableTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "base\/VariableTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "base\/VariableTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "base\/VariableTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "base\/VariableTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "base\/VariableTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "base\/VariableTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "base\/VariableTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "base\/VariableTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "base\/VariableTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "base\/VariableTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/VariableTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/VariableTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/VariableTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "base\/VariableTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/VariableTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/VariableTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/VariableTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "base\/VariableTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "base\/VariableTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "base\/VariableTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "base\/VariableTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "base\/VariableTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "base\/VariableTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "base\/VariableTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "base\/VariableTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "base\/VariableTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "base\/VariableTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "base\/VariableTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "base\/VariableTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "base\/VariableTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "base\/VariableTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "base\/VariableTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "base\/VariableTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "base\/VariableTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "base\/VariableTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "base\/VariableTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "base\/VariableTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "base\/VariableTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "base\/VariableTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "base\/VariableTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "base\/VariableTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "base\/VariableTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/VariableTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/VariableTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/VariableTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/VariableTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "base\/VariableTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "base\/VariableTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "base\/VariableTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "base\/VariableTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "base\/VariableTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "base\/VariableTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "base\/VariableTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "base\/VariableTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "base\/VariableTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "base\/VariableTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "base\/VariableTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "base\/VariableTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "base\/VariableTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "base\/VariableTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "base\/VariableTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "base\/VariableTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "base\/VariableTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "base\/VariableTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "base\/VariableTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "base\/VariableTest.html", "kind" : "class"}], "sbt" : [], "benchmarkTest" : [{"name" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark", "shortDescription" : "Object to perform comparisons in the application ofVariableElimination algorithm on a given network andusing different representations for potentials", "object" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html", "members_object" : [{"label" : "measure", "tail" : "", "member" : "org.scalameter.DSL.measure", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#measure", "kind" : "object"}, {"label" : "performance", "tail" : "", "member" : "org.scalameter.DSL.performance", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#performance", "kind" : "object"}, {"label" : "Using", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Using", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#Using[T<:<?>]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Scope", "tail" : "", "member" : "org.scalameter.BasePerformanceTest.Scope", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#ScopeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ranges", "tail" : ": Gen[Range]", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.ranges", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#ranges:org.scalameter.api.Gen[Range]", "kind" : "val"}, {"label" : "engineAIMutable", "tail" : ": VariableElimination", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.engineAIMutable", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#engineAIMutable:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetMapIndices", "tail" : ": Bnet", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.bnetMapIndices", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#bnetMapIndices:bnet.Bnet", "kind" : "val"}, {"label" : "engineTree", "tail" : ": VariableElimination", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.engineTree", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#engineTree:inference.VariableElimination", "kind" : "val"}, {"label" : "bnetTree", "tail" : ": Bnet", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.bnetTree", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#bnetTree:bnet.Bnet", "kind" : "val"}, {"label" : "engineTables", "tail" : ": VariableElimination", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.engineTables", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#engineTables:inference.VariableElimination", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.bnet", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.extension", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#extension:String", "kind" : "var"}, {"label" : "netName", "tail" : ": String", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.netName", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#netName:String", "kind" : "var"}, {"label" : "persistor", "tail" : ": SerializationPersistor", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.persistor", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#persistor:org.scalameter.persistence.SerializationPersistor", "kind" : "lazy val"}, {"label" : "executor", "tail" : ": SeparateJvmsExecutor[Double]", "member" : "benchmarkTest.VETableTreeAIMOfflineReportBenchmark.executor", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#executor:org.scalameter.execution.SeparateJvmsExecutor[Double]", "kind" : "lazy val"}, {"label" : "online", "tail" : "(): Boolean", "member" : "org.scalameter.Bench.OfflineReport.online", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#online:Boolean", "kind" : "def"}, {"label" : "historian", "tail" : "(): Historian", "member" : "org.scalameter.Bench.OfflineReport.historian", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#historian:org.scalameter.reporting.RegressionReporter.Historian", "kind" : "def"}, {"label" : "tester", "tail" : "(): Tester", "member" : "org.scalameter.Bench.OfflineReport.tester", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#tester:org.scalameter.reporting.RegressionReporter.Tester", "kind" : "def"}, {"label" : "reporter", "tail" : "(): Reporter[Double]", "member" : "org.scalameter.Bench.HTMLReport.reporter", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#reporter:org.scalameter.Reporter[Double]", "kind" : "def"}, {"label" : "measurer", "tail" : "(): Measurer[Double]", "member" : "org.scalameter.Bench.HTMLReport.measurer", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#measurer:org.scalameter.Measurer[Double]", "kind" : "def"}, {"label" : "aggregator", "tail" : "(): Aggregator[Double]", "member" : "org.scalameter.Bench.HTMLReport.aggregator", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#aggregator:org.scalameter.Aggregator[Double]", "kind" : "def"}, {"label" : "warmer", "tail" : "(): Warmer", "member" : "org.scalameter.Bench.Persisted.warmer", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#warmer:org.scalameter.Warmer", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.scalameter.Bench.main", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "include", "tail" : "(arg0: ClassTag[T]): Unit", "member" : "org.scalameter.DSL.include", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#include[T<:org.scalameter.BasePerformanceTest[_]](implicitevidence$1:scala.reflect.ClassTag[T]):Unit", "kind" : "def"}, {"label" : "using", "tail" : "(gen: Gen[T]): Using[T]", "member" : "org.scalameter.DSL.using", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#using[T](gen:org.scalameter.Gen[T]):DSL.this.Using[T]", "kind" : "def"}, {"label" : "executeTests", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.executeTests", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#executeTests():Boolean", "kind" : "def"}, {"label" : "rebuildSetupZipper", "tail" : "(): Unit", "member" : "org.scalameter.BasePerformanceTest.rebuildSetupZipper", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#rebuildSetupZipper():Unit", "kind" : "def"}, {"label" : "defaultConfig", "tail" : "(): Context", "member" : "org.scalameter.BasePerformanceTest.defaultConfig", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#defaultConfig:org.scalameter.Context", "kind" : "def"}, {"label" : "isModule", "tail" : "(): Boolean", "member" : "org.scalameter.BasePerformanceTest.isModule", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#isModule:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "benchmarkTest\/VETableTreeAIMOfflineReportBenchmark$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "org.scalameter.BasePerformanceTest.SameType", "error" : "unsupported entity"}], "kind" : "object"}], "experiments.serializeNets" : [{"name" : "experiments.serializeNets.ReadSerializeNets", "shortDescription" : "", "object" : "experiments\/serializeNets\/ReadSerializeNets$.html", "members_object" : [{"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "experiments.serializeNets.ReadSerializeNets.representations", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"label" : "extension", "tail" : ": String", "member" : "experiments.serializeNets.ReadSerializeNets.extension", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#extension:String", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "experiments.serializeNets.ReadSerializeNets.netName", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#netName:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "experiments.serializeNets.ReadSerializeNets.folder", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#folder:String", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/serializeNets\/ReadSerializeNets$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "experiments.serializeNets.SerializeNets", "shortDescription" : "", "object" : "experiments\/serializeNets\/SerializeNets$.html", "members_object" : [{"label" : "extension", "tail" : ": String", "member" : "experiments.serializeNets.SerializeNets.extension", "link" : "experiments\/serializeNets\/SerializeNets$.html#extension:String", "kind" : "val"}, {"label" : "netNames", "tail" : ": List[String]", "member" : "experiments.serializeNets.SerializeNets.netNames", "link" : "experiments\/serializeNets\/SerializeNets$.html#netNames:List[String]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "experiments\/serializeNets\/SerializeNets$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "experiments\/serializeNets\/SerializeNets$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "experiments\/serializeNets\/SerializeNets$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "experiments\/serializeNets\/SerializeNets$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "experiments\/serializeNets\/SerializeNets$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "experiments\/serializeNets\/SerializeNets$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "experiments\/serializeNets\/SerializeNets$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "experiments\/serializeNets\/SerializeNets$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "experiments\/serializeNets\/SerializeNets$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "experiments\/serializeNets\/SerializeNets$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "experiments\/serializeNets\/SerializeNets$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/serializeNets\/SerializeNets$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/serializeNets\/SerializeNets$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "experiments\/serializeNets\/SerializeNets$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "experiments\/serializeNets\/SerializeNets$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "experiments\/serializeNets\/SerializeNets$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "experiments\/serializeNets\/SerializeNets$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "experiments\/serializeNets\/SerializeNets$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "experiments\/serializeNets\/SerializeNets$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "experiments\/serializeNets\/SerializeNets$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "experiments\/serializeNets\/SerializeNets$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "experiments\/serializeNets\/SerializeNets$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "experiments\/serializeNets\/SerializeNets$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "graph" : [{"name" : "graph.Graph", "shortDescription" : "Class for representing a graph related to a Bayesiannetwork.", "object" : "graph\/Graph$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "graph.Graph.toString", "link" : "graph\/Graph.html#toString():String", "kind" : "def"}, {"label" : "relevantVariables", "tail" : "(j: List[Variable], k: List[Variable]): List[Variable]", "member" : "graph.Graph.relevantVariables", "link" : "graph\/Graph.html#relevantVariables(j:List[base.Variable],k:List[base.Variable]):List[base.Variable]", "kind" : "def"}, {"member" : "graph.Graph#<init>", "error" : "unsupported entity"}, {"label" : "mapVariableNode", "tail" : ": Map[Variable, Node]", "member" : "graph.Graph.mapVariableNode", "link" : "graph\/Graph.html#mapVariableNode:Map[base.Variable,graph.Node]", "kind" : "val"}, {"label" : "nodes", "tail" : ": List[Node]", "member" : "graph.Graph.nodes", "link" : "graph\/Graph.html#nodes:List[graph.Node]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "graph.Graph.name", "link" : "graph\/Graph.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "graph\/Graph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "graph\/Graph.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "graph\/Graph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "graph\/Graph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "graph\/Graph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "graph\/Graph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "graph\/Graph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "graph\/Graph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "graph\/Graph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "graph\/Graph.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "graph\/Graph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "graph\/Graph.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "graph\/Graph.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "graph\/Graph.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "graph\/Graph.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "graph\/Graph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "graph\/Graph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "graph\/Graph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(bnet: Bnet): Graph", "member" : "graph.Graph.apply", "link" : "graph\/Graph$.html#apply(bnet:bnet.Bnet):graph.Graph", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "graph\/Graph$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "graph\/Graph$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "graph\/Graph$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "graph\/Graph$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "graph\/Graph$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "graph\/Graph$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "graph\/Graph$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "graph\/Graph$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "graph\/Graph$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "graph\/Graph$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "graph\/Graph$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "graph\/Graph$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "graph\/Graph$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "graph\/Graph$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "graph\/Graph$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "graph\/Graph$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "graph\/Graph$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "graph\/Graph$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "graph\/Graph$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "graph\/Graph.html", "kind" : "class"}, {"name" : "graph.Node", "shortDescription" : "Class for representing a node of the graph (internal class)", "members_class" : [{"label" : "resetFlags", "tail" : "(): Unit", "member" : "graph.Node.resetFlags", "link" : "graph\/Node.html#resetFlags():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "graph.Node.toString", "link" : "graph\/Node.html#toString():String", "kind" : "def"}, {"label" : "scheduled", "tail" : ": Boolean", "member" : "graph.Node.scheduled", "link" : "graph\/Node.html#scheduled:Boolean", "kind" : "var"}, {"label" : "fromParent", "tail" : ": Boolean", "member" : "graph.Node.fromParent", "link" : "graph\/Node.html#fromParent:Boolean", "kind" : "var"}, {"label" : "visited", "tail" : ": Boolean", "member" : "graph.Node.visited", "link" : "graph\/Node.html#visited:Boolean", "kind" : "var"}, {"label" : "down", "tail" : ": Boolean", "member" : "graph.Node.down", "link" : "graph\/Node.html#down:Boolean", "kind" : "var"}, {"label" : "top", "tail" : ": Boolean", "member" : "graph.Node.top", "link" : "graph\/Node.html#top:Boolean", "kind" : "var"}, {"label" : "inK", "tail" : ": Boolean", "member" : "graph.Node.inK", "link" : "graph\/Node.html#inK:Boolean", "kind" : "var"}, {"label" : "inJ", "tail" : ": Boolean", "member" : "graph.Node.inJ", "link" : "graph\/Node.html#inJ:Boolean", "kind" : "var"}, {"member" : "graph.Node#<init>", "error" : "unsupported entity"}, {"label" : "children", "tail" : ": List[Variable]", "member" : "graph.Node.children", "link" : "graph\/Node.html#children:List[base.Variable]", "kind" : "val"}, {"label" : "parents", "tail" : ": List[Variable]", "member" : "graph.Node.parents", "link" : "graph\/Node.html#parents:List[base.Variable]", "kind" : "val"}, {"label" : "variable", "tail" : ": Variable", "member" : "graph.Node.variable", "link" : "graph\/Node.html#variable:base.Variable", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "graph\/Node.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "graph\/Node.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "graph\/Node.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "graph\/Node.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "graph\/Node.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "graph\/Node.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "graph\/Node.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "graph\/Node.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "graph\/Node.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "graph\/Node.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "graph\/Node.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "graph\/Node.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "graph\/Node.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "graph\/Node.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "graph\/Node.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "graph\/Node.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "graph\/Node.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "graph\/Node.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "graph\/Node.html", "kind" : "class"}], "potential.valueBased" : [{"name" : "potential.valueBased.VDGLStore", "shortDescription" : "Class for storing values using the following structure:dictionary of entries where each entry contains:- key: one of the different values of the potential- value: list of grains containing indices where the         value acting as key is stored", "object" : "potential\/valueBased\/VDGLStore$.html", "members_object" : [{"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDGLStore.marginalizeDefault", "link" : "potential\/valueBased\/VDGLStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDGLStore.combineDefault", "link" : "potential\/valueBased\/VDGLStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "fromIndicesToGrains", "tail" : "(indices: Array[Long]): List[Grain]", "member" : "potential.valueBased.VDGLStore.fromIndicesToGrains", "link" : "potential\/valueBased\/VDGLStore$.html#fromIndicesToGrains(indices:Array[Long]):List[potential.grain.Grain]", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, value: Double, grainList: GrainList): VDGLStore", "member" : "potential.valueBased.VDGLStore.apply", "link" : "potential\/valueBased\/VDGLStore$.html#apply(variables:base.VariableSet,value:Double,grainList:potential.grain.GrainList):potential.valueBased.VDGLStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): VDGLStore", "member" : "potential.valueBased.VDGLStore.apply", "link" : "potential\/valueBased\/VDGLStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.valueBased.VDGLStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDGLStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDGLStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDGLStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDGLStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDGLStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDGLStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDGLStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDGLStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDGLStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDGLStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDGLStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDGLStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDGLStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDGLStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDGLStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDGLStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDGLStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGLStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGLStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGLStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDGLStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDGLStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/valueBased\/VDGLStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDGLStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/valueBased\/VDGLStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/valueBased\/VDGLStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDGLStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDGLStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDGLStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "potential.valueBased.VDGLStore.toString", "link" : "potential\/valueBased\/VDGLStore.html#toString:String", "kind" : "def"}, {"label" : "getGrainsInfo", "tail" : "(): (Int, Long, Double)", "member" : "potential.valueBased.VDGLStore.getGrainsInfo", "link" : "potential\/valueBased\/VDGLStore.html#getGrainsInfo:(Int,Long,Double)", "kind" : "def"}, {"label" : "getNumberGrains", "tail" : "(): Int", "member" : "potential.valueBased.VDGLStore.getNumberGrains", "link" : "potential\/valueBased\/VDGLStore.html#getNumberGrains:Int", "kind" : "def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.valueBased.VDGLStore.getMemorySize", "link" : "potential\/valueBased\/VDGLStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.valueBased.VDGLStore.getSize", "link" : "potential\/valueBased\/VDGLStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDGLStore.getValuesProportions", "link" : "potential\/valueBased\/VDGLStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.valueBased.VDGLStore.getZerosProportion", "link" : "potential\/valueBased\/VDGLStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.valueBased.VDGLStore.getIndices", "link" : "potential\/valueBased\/VDGLStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.valueBased.VDGLStore.getIndicesForValue", "link" : "potential\/valueBased\/VDGLStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getCompleteListValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDGLStore.getCompleteListValues", "link" : "potential\/valueBased\/VDGLStore.html#getCompleteListValues:List[Double]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDGLStore.getDifferentValues", "link" : "potential\/valueBased\/VDGLStore.html#getDifferentValues():List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDGLStore.getListValues", "link" : "potential\/valueBased\/VDGLStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): VDGLStore", "member" : "potential.valueBased.VDGLStore.addValueForRepresentation", "link" : "potential\/valueBased\/VDGLStore.html#addValueForRepresentation(value:Double,index:Long):potential.valueBased.VDGLStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.valueBased.VDGLStore.getValue", "link" : "potential\/valueBased\/VDGLStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.valueBased.VDGLStore.getVariables", "link" : "potential\/valueBased\/VDGLStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.valueBased.VDGLStore.kind", "link" : "potential\/valueBased\/VDGLStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.valueBased.VDGLStore#<init>", "error" : "unsupported entity"}, {"label" : "map", "tail" : ": Map[Double, GrainList]", "member" : "potential.valueBased.VDGLStore.map", "link" : "potential\/valueBased\/VDGLStore.html#map:Map[Double,potential.grain.GrainList]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.valueBased.VDGLStore.variables", "link" : "potential\/valueBased\/VDGLStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/valueBased\/VDGLStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/valueBased\/VDGLStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/valueBased\/VDGLStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/valueBased\/VDGLStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/valueBased\/VDGLStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/valueBased\/VDGLStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/valueBased\/VDGLStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/valueBased\/VDGLStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDGLStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDGLStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDGLStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDGLStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDGLStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/valueBased\/VDGLStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDGLStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDGLStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDGLStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDGLStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDGLStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDGLStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDGLStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDGLStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDGLStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDGLStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDGLStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDGLStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGLStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGLStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGLStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDGLStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDGLStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDGLStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDGLStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDGLStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDGLStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/valueBased\/VDGLStore.html", "kind" : "case class"}, {"name" : "potential.valueBased.VDGSStore", "shortDescription" : "Class for storing values using the following structure:dictionary with values as keys and set of grains as values", "object" : "potential\/valueBased\/VDGSStore$.html", "members_object" : [{"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDGSStore.marginalizeDefault", "link" : "potential\/valueBased\/VDGSStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDGSStore.combineDefault", "link" : "potential\/valueBased\/VDGSStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "fromIndicesToGrains", "tail" : "(indices: Array[Long]): TreeSet[Grain]", "member" : "potential.valueBased.VDGSStore.fromIndicesToGrains", "link" : "potential\/valueBased\/VDGSStore$.html#fromIndicesToGrains(indices:Array[Long]):scala.collection.immutable.TreeSet[potential.grain.Grain]", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): VDGSStore", "member" : "potential.valueBased.VDGSStore.apply", "link" : "potential\/valueBased\/VDGSStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.valueBased.VDGSStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDGSStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDGSStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDGSStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDGSStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDGSStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDGSStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDGSStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDGSStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDGSStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDGSStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDGSStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDGSStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDGSStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDGSStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDGSStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDGSStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDGSStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGSStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGSStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGSStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDGSStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDGSStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/valueBased\/VDGSStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDGSStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/valueBased\/VDGSStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/valueBased\/VDGSStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDGSStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDGSStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDGSStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getNumberGrains", "tail" : "(): Int", "member" : "potential.valueBased.VDGSStore.getNumberGrains", "link" : "potential\/valueBased\/VDGSStore.html#getNumberGrains:Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.valueBased.VDGSStore.toString", "link" : "potential\/valueBased\/VDGSStore.html#toString:String", "kind" : "def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.valueBased.VDGSStore.getMemorySize", "link" : "potential\/valueBased\/VDGSStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.valueBased.VDGSStore.getSize", "link" : "potential\/valueBased\/VDGSStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDGSStore.getValuesProportions", "link" : "potential\/valueBased\/VDGSStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.valueBased.VDGSStore.getZerosProportion", "link" : "potential\/valueBased\/VDGSStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.valueBased.VDGSStore.getIndices", "link" : "potential\/valueBased\/VDGSStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.valueBased.VDGSStore.getIndicesForValue", "link" : "potential\/valueBased\/VDGSStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDGSStore.getListValues", "link" : "potential\/valueBased\/VDGSStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDGSStore.getDifferentValues", "link" : "potential\/valueBased\/VDGSStore.html#getDifferentValues():List[Double]", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): VDGSStore", "member" : "potential.valueBased.VDGSStore.addValueForRepresentation", "link" : "potential\/valueBased\/VDGSStore.html#addValueForRepresentation(value:Double,index:Long):potential.valueBased.VDGSStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.valueBased.VDGSStore.getValue", "link" : "potential\/valueBased\/VDGSStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.valueBased.VDGSStore.getVariables", "link" : "potential\/valueBased\/VDGSStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.valueBased.VDGSStore.kind", "link" : "potential\/valueBased\/VDGSStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.valueBased.VDGSStore#<init>", "error" : "unsupported entity"}, {"label" : "map", "tail" : ": Map[Double, GrainSet]", "member" : "potential.valueBased.VDGSStore.map", "link" : "potential\/valueBased\/VDGSStore.html#map:Map[Double,potential.grain.GrainSet]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.valueBased.VDGSStore.variables", "link" : "potential\/valueBased\/VDGSStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/valueBased\/VDGSStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/valueBased\/VDGSStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/valueBased\/VDGSStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/valueBased\/VDGSStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/valueBased\/VDGSStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/valueBased\/VDGSStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/valueBased\/VDGSStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/valueBased\/VDGSStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDGSStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDGSStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDGSStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDGSStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDGSStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/valueBased\/VDGSStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDGSStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDGSStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDGSStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDGSStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDGSStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDGSStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDGSStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDGSStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDGSStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDGSStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDGSStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDGSStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGSStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGSStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDGSStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDGSStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDGSStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDGSStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDGSStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDGSStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDGSStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/valueBased\/VDGSStore.html", "kind" : "case class"}, {"name" : "potential.valueBased.VDILIStore", "shortDescription" : "Class for storing values using the following structure:dictionary with entries composed by:- key: each one of the different values- value: immutable list of indices where the value isstored", "object" : "potential\/valueBased\/VDILIStore$.html", "members_object" : [{"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDILIStore.marginalizeDefault", "link" : "potential\/valueBased\/VDILIStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDILIStore.combineDefault", "link" : "potential\/valueBased\/VDILIStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): VDILIStore", "member" : "potential.valueBased.VDILIStore.apply", "link" : "potential\/valueBased\/VDILIStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.valueBased.VDILIStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDILIStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDILIStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDILIStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDILIStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDILIStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDILIStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDILIStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDILIStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDILIStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDILIStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDILIStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDILIStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDILIStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDILIStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDILIStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDILIStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDILIStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILIStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILIStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILIStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDILIStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDILIStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/valueBased\/VDILIStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDILIStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/valueBased\/VDILIStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/valueBased\/VDILIStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDILIStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDILIStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDILIStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.valueBased.VDILIStore.getMemorySize", "link" : "potential\/valueBased\/VDILIStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.valueBased.VDILIStore.toString", "link" : "potential\/valueBased\/VDILIStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.valueBased.VDILIStore.getSize", "link" : "potential\/valueBased\/VDILIStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDILIStore.getValuesProportions", "link" : "potential\/valueBased\/VDILIStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.valueBased.VDILIStore.getZerosProportion", "link" : "potential\/valueBased\/VDILIStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.valueBased.VDILIStore.getIndices", "link" : "potential\/valueBased\/VDILIStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.valueBased.VDILIStore.getIndicesForValue", "link" : "potential\/valueBased\/VDILIStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getCompleteListValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDILIStore.getCompleteListValues", "link" : "potential\/valueBased\/VDILIStore.html#getCompleteListValues:List[Double]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDILIStore.getDifferentValues", "link" : "potential\/valueBased\/VDILIStore.html#getDifferentValues():List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDILIStore.getListValues", "link" : "potential\/valueBased\/VDILIStore.html#getListValues():List[Double]", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): VDILIStore", "member" : "potential.valueBased.VDILIStore.addValueForRepresentation", "link" : "potential\/valueBased\/VDILIStore.html#addValueForRepresentation(value:Double,index:Long):potential.valueBased.VDILIStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.valueBased.VDILIStore.getValue", "link" : "potential\/valueBased\/VDILIStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.valueBased.VDILIStore.kind", "link" : "potential\/valueBased\/VDILIStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.valueBased.VDILIStore#<init>", "error" : "unsupported entity"}, {"label" : "map", "tail" : ": Map[Double, List[Long]]", "member" : "potential.valueBased.VDILIStore.map", "link" : "potential\/valueBased\/VDILIStore.html#map:Map[Double,List[Long]]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.valueBased.VDILIStore.variables", "link" : "potential\/valueBased\/VDILIStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/valueBased\/VDILIStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/valueBased\/VDILIStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/valueBased\/VDILIStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/valueBased\/VDILIStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/valueBased\/VDILIStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/valueBased\/VDILIStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/valueBased\/VDILIStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/valueBased\/VDILIStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/valueBased\/VDILIStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDILIStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDILIStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDILIStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDILIStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDILIStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/valueBased\/VDILIStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDILIStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDILIStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDILIStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDILIStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDILIStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDILIStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDILIStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDILIStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDILIStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDILIStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDILIStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDILIStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILIStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILIStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILIStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDILIStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDILIStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDILIStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDILIStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDILIStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDILIStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/valueBased\/VDILIStore.html", "kind" : "case class"}, {"name" : "potential.valueBased.VDILMStore", "shortDescription" : "Class for storing values using the structure:", "object" : "potential\/valueBased\/VDILMStore$.html", "members_object" : [{"label" : "marginalizeAlt2", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDILMStore.marginalizeAlt2", "link" : "potential\/valueBased\/VDILMStore$.html#marginalizeAlt2(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeAlt1", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDILMStore.marginalizeAlt1", "link" : "potential\/valueBased\/VDILMStore$.html#marginalizeAlt1(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDILMStore.marginalizeDefault", "link" : "potential\/valueBased\/VDILMStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt4", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDILMStore.combineAlt4", "link" : "potential\/valueBased\/VDILMStore$.html#combineAlt4(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt3", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDILMStore.combineAlt3", "link" : "potential\/valueBased\/VDILMStore$.html#combineAlt3(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt2", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDILMStore.combineAlt2", "link" : "potential\/valueBased\/VDILMStore$.html#combineAlt2(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt1", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDILMStore.combineAlt1", "link" : "potential\/valueBased\/VDILMStore$.html#combineAlt1(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDILMStore.combineDefault", "link" : "potential\/valueBased\/VDILMStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet): VDILMStore", "member" : "potential.valueBased.VDILMStore.apply", "link" : "potential\/valueBased\/VDILMStore$.html#apply(variables:base.VariableSet):potential.valueBased.VDILMStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): VDILMStore", "member" : "potential.valueBased.VDILMStore.apply", "link" : "potential\/valueBased\/VDILMStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.valueBased.VDILMStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDILMStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDILMStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDILMStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDILMStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDILMStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDILMStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDILMStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDILMStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDILMStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDILMStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDILMStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDILMStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDILMStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDILMStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDILMStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDILMStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDILMStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILMStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILMStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILMStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDILMStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDILMStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/valueBased\/VDILMStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDILMStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/valueBased\/VDILMStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/valueBased\/VDILMStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDILMStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDILMStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDILMStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.valueBased.VDILMStore.getMemorySize", "link" : "potential\/valueBased\/VDILMStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.valueBased.VDILMStore.toString", "link" : "potential\/valueBased\/VDILMStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.valueBased.VDILMStore.getSize", "link" : "potential\/valueBased\/VDILMStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDILMStore.getValuesProportions", "link" : "potential\/valueBased\/VDILMStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.valueBased.VDILMStore.getZerosProportion", "link" : "potential\/valueBased\/VDILMStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.valueBased.VDILMStore.getIndices", "link" : "potential\/valueBased\/VDILMStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.valueBased.VDILMStore.getIndicesForValue", "link" : "potential\/valueBased\/VDILMStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDILMStore.getDifferentValues", "link" : "potential\/valueBased\/VDILMStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDILMStore.getListValues", "link" : "potential\/valueBased\/VDILMStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "addNonCheckValueForRepresentation", "tail" : "(value: Double, indexes: ArrayBuffer[Long]): VDILMStore", "member" : "potential.valueBased.VDILMStore.addNonCheckValueForRepresentation", "link" : "potential\/valueBased\/VDILMStore.html#addNonCheckValueForRepresentation(value:Double,indexes:scala.collection.mutable.ArrayBuffer[Long]):potential.valueBased.VDILMStore", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): VDILMStore", "member" : "potential.valueBased.VDILMStore.addValueForRepresentation", "link" : "potential\/valueBased\/VDILMStore.html#addValueForRepresentation(value:Double,index:Long):potential.valueBased.VDILMStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.valueBased.VDILMStore.getValue", "link" : "potential\/valueBased\/VDILMStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.valueBased.VDILMStore.kind", "link" : "potential\/valueBased\/VDILMStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.valueBased.VDILMStore#<init>", "error" : "unsupported entity"}, {"label" : "map", "tail" : ": Map[Double, List[Long]]", "member" : "potential.valueBased.VDILMStore.map", "link" : "potential\/valueBased\/VDILMStore.html#map:scala.collection.mutable.Map[Double,List[Long]]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.valueBased.VDILMStore.variables", "link" : "potential\/valueBased\/VDILMStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/valueBased\/VDILMStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/valueBased\/VDILMStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/valueBased\/VDILMStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/valueBased\/VDILMStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/valueBased\/VDILMStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/valueBased\/VDILMStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/valueBased\/VDILMStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/valueBased\/VDILMStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/valueBased\/VDILMStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDILMStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDILMStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDILMStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDILMStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDILMStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/valueBased\/VDILMStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDILMStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDILMStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDILMStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDILMStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDILMStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDILMStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDILMStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDILMStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDILMStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDILMStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDILMStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDILMStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILMStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILMStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDILMStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDILMStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDILMStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDILMStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDILMStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDILMStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDILMStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/valueBased\/VDILMStore.html", "kind" : "case class"}, {"name" : "potential.valueBased.VDISIStore", "shortDescription" : "Class for storing values using the following structure:dictionary with pairs (value - set (immutable) of indiceswhere the value is stored", "object" : "potential\/valueBased\/VDISIStore$.html", "members_object" : [{"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDISIStore.marginalizeDefault", "link" : "potential\/valueBased\/VDISIStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDISIStore.combineDefault", "link" : "potential\/valueBased\/VDISIStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): VDISIStore", "member" : "potential.valueBased.VDISIStore.apply", "link" : "potential\/valueBased\/VDISIStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.valueBased.VDISIStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDISIStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDISIStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDISIStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDISIStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDISIStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDISIStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDISIStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDISIStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDISIStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDISIStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDISIStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDISIStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDISIStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDISIStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDISIStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDISIStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDISIStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISIStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISIStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISIStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDISIStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDISIStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/valueBased\/VDISIStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDISIStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/valueBased\/VDISIStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/valueBased\/VDISIStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDISIStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDISIStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDISIStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.valueBased.VDISIStore.getMemorySize", "link" : "potential\/valueBased\/VDISIStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.valueBased.VDISIStore.toString", "link" : "potential\/valueBased\/VDISIStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.valueBased.VDISIStore.getSize", "link" : "potential\/valueBased\/VDISIStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDISIStore.getValuesProportions", "link" : "potential\/valueBased\/VDISIStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.valueBased.VDISIStore.getZerosProportion", "link" : "potential\/valueBased\/VDISIStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.valueBased.VDISIStore.getIndices", "link" : "potential\/valueBased\/VDISIStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.valueBased.VDISIStore.getIndicesForValue", "link" : "potential\/valueBased\/VDISIStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDISIStore.getListValues", "link" : "potential\/valueBased\/VDISIStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDISIStore.getDifferentValues", "link" : "potential\/valueBased\/VDISIStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): VDISIStore", "member" : "potential.valueBased.VDISIStore.addValueForRepresentation", "link" : "potential\/valueBased\/VDISIStore.html#addValueForRepresentation(value:Double,index:Long):potential.valueBased.VDISIStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.valueBased.VDISIStore.getValue", "link" : "potential\/valueBased\/VDISIStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.valueBased.VDISIStore.kind", "link" : "potential\/valueBased\/VDISIStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.valueBased.VDISIStore#<init>", "error" : "unsupported entity"}, {"label" : "map", "tail" : ": Map[Double, Set[Long]]", "member" : "potential.valueBased.VDISIStore.map", "link" : "potential\/valueBased\/VDISIStore.html#map:Map[Double,Set[Long]]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.valueBased.VDISIStore.variables", "link" : "potential\/valueBased\/VDISIStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/valueBased\/VDISIStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/valueBased\/VDISIStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/valueBased\/VDISIStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/valueBased\/VDISIStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/valueBased\/VDISIStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/valueBased\/VDISIStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/valueBased\/VDISIStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/valueBased\/VDISIStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/valueBased\/VDISIStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDISIStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDISIStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDISIStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDISIStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDISIStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/valueBased\/VDISIStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDISIStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDISIStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDISIStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDISIStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDISIStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDISIStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDISIStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDISIStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDISIStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDISIStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDISIStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDISIStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISIStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISIStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISIStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDISIStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDISIStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDISIStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDISIStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDISIStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDISIStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/valueBased\/VDISIStore.html", "kind" : "case class"}, {"name" : "potential.valueBased.VDISMStore", "shortDescription" : "Class for storing values with the following structure:dictionary with pairs (value - set of mutable indiceswhere the value is stored)", "object" : "potential\/valueBased\/VDISMStore$.html", "members_object" : [{"label" : "marginalizeAlt2", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDISMStore.marginalizeAlt2", "link" : "potential\/valueBased\/VDISMStore$.html#marginalizeAlt2(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeAlt1", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDISMStore.marginalizeAlt1", "link" : "potential\/valueBased\/VDISMStore$.html#marginalizeAlt1(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.valueBased.VDISMStore.marginalizeDefault", "link" : "potential\/valueBased\/VDISMStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt5", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDISMStore.combineAlt5", "link" : "potential\/valueBased\/VDISMStore$.html#combineAlt5(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt4", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDISMStore.combineAlt4", "link" : "potential\/valueBased\/VDISMStore$.html#combineAlt4(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt3", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDISMStore.combineAlt3", "link" : "potential\/valueBased\/VDISMStore$.html#combineAlt3(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt2", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDISMStore.combineAlt2", "link" : "potential\/valueBased\/VDISMStore$.html#combineAlt2(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt1", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDISMStore.combineAlt1", "link" : "potential\/valueBased\/VDISMStore$.html#combineAlt1(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.valueBased.VDISMStore.combineDefault", "link" : "potential\/valueBased\/VDISMStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet): VDISMStore", "member" : "potential.valueBased.VDISMStore.apply", "link" : "potential\/valueBased\/VDISMStore$.html#apply(variables:base.VariableSet):potential.valueBased.VDISMStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Map[Double, Set[Long]]): VDISMStore", "member" : "potential.valueBased.VDISMStore.apply", "link" : "potential\/valueBased\/VDISMStore$.html#apply(variables:base.VariableSet,values:scala.collection.mutable.Map[Double,Set[Long]]):potential.valueBased.VDISMStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): VDISMStore", "member" : "potential.valueBased.VDISMStore.apply", "link" : "potential\/valueBased\/VDISMStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.valueBased.VDISMStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDISMStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDISMStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDISMStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDISMStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDISMStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDISMStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDISMStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDISMStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDISMStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDISMStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDISMStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDISMStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDISMStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDISMStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDISMStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDISMStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDISMStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISMStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISMStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISMStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDISMStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDISMStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/valueBased\/VDISMStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDISMStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/valueBased\/VDISMStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/valueBased\/VDISMStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDISMStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDISMStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDISMStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.valueBased.VDISMStore.getMemorySize", "link" : "potential\/valueBased\/VDISMStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.valueBased.VDISMStore.toString", "link" : "potential\/valueBased\/VDISMStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.valueBased.VDISMStore.getSize", "link" : "potential\/valueBased\/VDISMStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDISMStore.getValuesProportions", "link" : "potential\/valueBased\/VDISMStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.valueBased.VDISMStore.getZerosProportion", "link" : "potential\/valueBased\/VDISMStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.valueBased.VDISMStore.getIndices", "link" : "potential\/valueBased\/VDISMStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.valueBased.VDISMStore.getIndicesForValue", "link" : "potential\/valueBased\/VDISMStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDISMStore.getListValues", "link" : "potential\/valueBased\/VDISMStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.valueBased.VDISMStore.getDifferentValues", "link" : "potential\/valueBased\/VDISMStore.html#getDifferentValues():List[Double]", "kind" : "def"}, {"label" : "addValueForRepresentation", "tail" : "(value: Double, index: Long): VDISMStore", "member" : "potential.valueBased.VDISMStore.addValueForRepresentation", "link" : "potential\/valueBased\/VDISMStore.html#addValueForRepresentation(value:Double,index:Long):potential.valueBased.VDISMStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.valueBased.VDISMStore.getValue", "link" : "potential\/valueBased\/VDISMStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.valueBased.VDISMStore.kind", "link" : "potential\/valueBased\/VDISMStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.valueBased.VDISMStore#<init>", "error" : "unsupported entity"}, {"label" : "map", "tail" : ": Map[Double, Set[Long]]", "member" : "potential.valueBased.VDISMStore.map", "link" : "potential\/valueBased\/VDISMStore.html#map:scala.collection.mutable.Map[Double,Set[Long]]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.valueBased.VDISMStore.variables", "link" : "potential\/valueBased\/VDISMStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/valueBased\/VDISMStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/valueBased\/VDISMStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/valueBased\/VDISMStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/valueBased\/VDISMStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/valueBased\/VDISMStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/valueBased\/VDISMStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/valueBased\/VDISMStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/valueBased\/VDISMStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/valueBased\/VDISMStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/valueBased\/VDISMStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/valueBased\/VDISMStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/valueBased\/VDISMStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/valueBased\/VDISMStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/valueBased\/VDISMStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/valueBased\/VDISMStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/valueBased\/VDISMStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/valueBased\/VDISMStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/valueBased\/VDISMStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/valueBased\/VDISMStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/valueBased\/VDISMStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/valueBased\/VDISMStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/valueBased\/VDISMStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/valueBased\/VDISMStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/valueBased\/VDISMStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/valueBased\/VDISMStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/valueBased\/VDISMStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/valueBased\/VDISMStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISMStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISMStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/valueBased\/VDISMStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/valueBased\/VDISMStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/valueBased\/VDISMStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/valueBased\/VDISMStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/valueBased\/VDISMStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/valueBased\/VDISMStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/valueBased\/VDISMStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/valueBased\/VDISMStore.html", "kind" : "case class"}], "potential" : [{"name" : "potential.CombinationMSIMTest", "shortDescription" : "", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "potential\/CombinationMSIMTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "potential\/CombinationMSIMTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "potential\/CombinationMSIMTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "potential\/CombinationMSIMTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "store8", "tail" : ": Potential", "member" : "potential.CombinationMSIMTest.store8", "link" : "potential\/CombinationMSIMTest.html#store8:potential.Potential", "kind" : "val"}, {"label" : "store7", "tail" : ": Potential", "member" : "potential.CombinationMSIMTest.store7", "link" : "potential\/CombinationMSIMTest.html#store7:potential.Potential", "kind" : "val"}, {"label" : "marginalizers", "tail" : ": List[OperatorType.Value]", "member" : "potential.CombinationMSIMTest.marginalizers", "link" : "potential\/CombinationMSIMTest.html#marginalizers:List[potential.OperatorType.Value]", "kind" : "var"}, {"label" : "combiners", "tail" : ": List[OperatorType.Value]", "member" : "potential.CombinationMSIMTest.combiners", "link" : "potential\/CombinationMSIMTest.html#combiners:List[potential.OperatorType.Value]", "kind" : "var"}, {"label" : "store2", "tail" : ": Potential", "member" : "potential.CombinationMSIMTest.store2", "link" : "potential\/CombinationMSIMTest.html#store2:potential.Potential", "kind" : "val"}, {"label" : "store1", "tail" : ": Potential", "member" : "potential.CombinationMSIMTest.store1", "link" : "potential\/CombinationMSIMTest.html#store1:potential.Potential", "kind" : "val"}, {"label" : "resultTable", "tail" : ": Potential", "member" : "potential.CombinationMSIMTest.resultTable", "link" : "potential\/CombinationMSIMTest.html#resultTable:potential.Potential", "kind" : "val"}, {"label" : "potential2Table", "tail" : ": Potential", "member" : "potential.CombinationMSIMTest.potential2Table", "link" : "potential\/CombinationMSIMTest.html#potential2Table:potential.Potential", "kind" : "val"}, {"label" : "potential1Table", "tail" : ": Potential", "member" : "potential.CombinationMSIMTest.potential1Table", "link" : "potential\/CombinationMSIMTest.html#potential1Table:potential.Potential", "kind" : "val"}, {"label" : "storeTable2", "tail" : ": TableStore", "member" : "potential.CombinationMSIMTest.storeTable2", "link" : "potential\/CombinationMSIMTest.html#storeTable2:potential.TableStore", "kind" : "val"}, {"label" : "storeTable1", "tail" : ": TableStore", "member" : "potential.CombinationMSIMTest.storeTable1", "link" : "potential\/CombinationMSIMTest.html#storeTable1:potential.TableStore", "kind" : "val"}, {"label" : "valuesPot2", "tail" : ": Array[Double]", "member" : "potential.CombinationMSIMTest.valuesPot2", "link" : "potential\/CombinationMSIMTest.html#valuesPot2:Array[Double]", "kind" : "val"}, {"label" : "valuesPot1", "tail" : ": Array[Double]", "member" : "potential.CombinationMSIMTest.valuesPot1", "link" : "potential\/CombinationMSIMTest.html#valuesPot1:Array[Double]", "kind" : "val"}, {"label" : "variableSet2", "tail" : ": VariableSet", "member" : "potential.CombinationMSIMTest.variableSet2", "link" : "potential\/CombinationMSIMTest.html#variableSet2:base.VariableSet", "kind" : "val"}, {"label" : "variableSet1", "tail" : ": VariableSet", "member" : "potential.CombinationMSIMTest.variableSet1", "link" : "potential\/CombinationMSIMTest.html#variableSet1:base.VariableSet", "kind" : "val"}, {"label" : "variable4", "tail" : ": Variable", "member" : "potential.CombinationMSIMTest.variable4", "link" : "potential\/CombinationMSIMTest.html#variable4:base.Variable", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "potential.CombinationMSIMTest.variable3", "link" : "potential\/CombinationMSIMTest.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "potential.CombinationMSIMTest.variable2", "link" : "potential\/CombinationMSIMTest.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "potential.CombinationMSIMTest.variable1", "link" : "potential\/CombinationMSIMTest.html#variable1:base.Variable", "kind" : "val"}, {"label" : "cores", "tail" : ": Int", "member" : "potential.CombinationMSIMTest.cores", "link" : "potential\/CombinationMSIMTest.html#cores:Int", "kind" : "val"}, {"member" : "potential.CombinationMSIMTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "potential\/CombinationMSIMTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "potential\/CombinationMSIMTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "potential\/CombinationMSIMTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "potential\/CombinationMSIMTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "potential\/CombinationMSIMTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "potential\/CombinationMSIMTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "potential\/CombinationMSIMTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "potential\/CombinationMSIMTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "potential\/CombinationMSIMTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "potential\/CombinationMSIMTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "potential\/CombinationMSIMTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "potential\/CombinationMSIMTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "potential\/CombinationMSIMTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "potential\/CombinationMSIMTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "potential\/CombinationMSIMTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "potential\/CombinationMSIMTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "potential\/CombinationMSIMTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "potential\/CombinationMSIMTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "potential\/CombinationMSIMTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "potential\/CombinationMSIMTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "potential\/CombinationMSIMTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "potential\/CombinationMSIMTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "potential\/CombinationMSIMTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/CombinationMSIMTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/CombinationMSIMTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "potential\/CombinationMSIMTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "potential\/CombinationMSIMTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "potential\/CombinationMSIMTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "potential\/CombinationMSIMTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "potential\/CombinationMSIMTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/CombinationMSIMTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/CombinationMSIMTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/CombinationMSIMTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/CombinationMSIMTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/CombinationMSIMTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/CombinationMSIMTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/CombinationMSIMTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/CombinationMSIMTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/CombinationMSIMTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/CombinationMSIMTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "potential\/CombinationMSIMTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "potential\/CombinationMSIMTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "potential\/CombinationMSIMTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "potential\/CombinationMSIMTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "potential\/CombinationMSIMTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "potential\/CombinationMSIMTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/CombinationMSIMTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/CombinationMSIMTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/CombinationMSIMTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "potential\/CombinationMSIMTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/CombinationMSIMTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "potential\/CombinationMSIMTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "potential\/CombinationMSIMTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "potential\/CombinationMSIMTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "potential\/CombinationMSIMTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "potential\/CombinationMSIMTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "potential\/CombinationMSIMTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "potential\/CombinationMSIMTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "potential\/CombinationMSIMTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "potential\/CombinationMSIMTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "potential\/CombinationMSIMTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "potential\/CombinationMSIMTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/CombinationMSIMTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/CombinationMSIMTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/CombinationMSIMTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/CombinationMSIMTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/CombinationMSIMTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/CombinationMSIMTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "potential\/CombinationMSIMTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/CombinationMSIMTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/CombinationMSIMTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/CombinationMSIMTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/CombinationMSIMTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/CombinationMSIMTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/CombinationMSIMTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/CombinationMSIMTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/CombinationMSIMTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/CombinationMSIMTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/CombinationMSIMTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/CombinationMSIMTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/CombinationMSIMTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/CombinationMSIMTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/CombinationMSIMTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/CombinationMSIMTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/CombinationMSIMTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/CombinationMSIMTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/CombinationMSIMTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/CombinationMSIMTest.html", "kind" : "class"}, {"name" : "potential.CombinationTest", "shortDescription" : "", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "potential\/CombinationTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "potential\/CombinationTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "potential\/CombinationTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "potential\/CombinationTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "store6", "tail" : ": Potential", "member" : "potential.CombinationTest.store6", "link" : "potential\/CombinationTest.html#store6:potential.Potential", "kind" : "val"}, {"label" : "store5", "tail" : ": Potential", "member" : "potential.CombinationTest.store5", "link" : "potential\/CombinationTest.html#store5:potential.Potential", "kind" : "val"}, {"label" : "store4", "tail" : ": Potential", "member" : "potential.CombinationTest.store4", "link" : "potential\/CombinationTest.html#store4:potential.Potential", "kind" : "val"}, {"label" : "store3", "tail" : ": Potential", "member" : "potential.CombinationTest.store3", "link" : "potential\/CombinationTest.html#store3:potential.Potential", "kind" : "val"}, {"label" : "marginalizers", "tail" : ": List[OperatorType.Value]", "member" : "potential.CombinationTest.marginalizers", "link" : "potential\/CombinationTest.html#marginalizers:List[potential.OperatorType.Value]", "kind" : "var"}, {"label" : "combiners", "tail" : ": List[OperatorType.Value]", "member" : "potential.CombinationTest.combiners", "link" : "potential\/CombinationTest.html#combiners:List[potential.OperatorType.Value]", "kind" : "var"}, {"label" : "store2", "tail" : ": Potential", "member" : "potential.CombinationTest.store2", "link" : "potential\/CombinationTest.html#store2:potential.Potential", "kind" : "val"}, {"label" : "store1", "tail" : ": Potential", "member" : "potential.CombinationTest.store1", "link" : "potential\/CombinationTest.html#store1:potential.Potential", "kind" : "val"}, {"label" : "resultTable", "tail" : ": Potential", "member" : "potential.CombinationTest.resultTable", "link" : "potential\/CombinationTest.html#resultTable:potential.Potential", "kind" : "val"}, {"label" : "potential2Table", "tail" : ": Potential", "member" : "potential.CombinationTest.potential2Table", "link" : "potential\/CombinationTest.html#potential2Table:potential.Potential", "kind" : "val"}, {"label" : "potential1Table", "tail" : ": Potential", "member" : "potential.CombinationTest.potential1Table", "link" : "potential\/CombinationTest.html#potential1Table:potential.Potential", "kind" : "val"}, {"label" : "storeTable2", "tail" : ": TableStore", "member" : "potential.CombinationTest.storeTable2", "link" : "potential\/CombinationTest.html#storeTable2:potential.TableStore", "kind" : "val"}, {"label" : "storeTable1", "tail" : ": TableStore", "member" : "potential.CombinationTest.storeTable1", "link" : "potential\/CombinationTest.html#storeTable1:potential.TableStore", "kind" : "val"}, {"label" : "valuesPot2", "tail" : ": Array[Double]", "member" : "potential.CombinationTest.valuesPot2", "link" : "potential\/CombinationTest.html#valuesPot2:Array[Double]", "kind" : "val"}, {"label" : "valuesPot1", "tail" : ": Array[Double]", "member" : "potential.CombinationTest.valuesPot1", "link" : "potential\/CombinationTest.html#valuesPot1:Array[Double]", "kind" : "val"}, {"label" : "variableSet2", "tail" : ": VariableSet", "member" : "potential.CombinationTest.variableSet2", "link" : "potential\/CombinationTest.html#variableSet2:base.VariableSet", "kind" : "val"}, {"label" : "variableSet1", "tail" : ": VariableSet", "member" : "potential.CombinationTest.variableSet1", "link" : "potential\/CombinationTest.html#variableSet1:base.VariableSet", "kind" : "val"}, {"label" : "variable4", "tail" : ": Variable", "member" : "potential.CombinationTest.variable4", "link" : "potential\/CombinationTest.html#variable4:base.Variable", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "potential.CombinationTest.variable3", "link" : "potential\/CombinationTest.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "potential.CombinationTest.variable2", "link" : "potential\/CombinationTest.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "potential.CombinationTest.variable1", "link" : "potential\/CombinationTest.html#variable1:base.Variable", "kind" : "val"}, {"label" : "cores", "tail" : ": Int", "member" : "potential.CombinationTest.cores", "link" : "potential\/CombinationTest.html#cores:Int", "kind" : "val"}, {"member" : "potential.CombinationTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "potential\/CombinationTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "potential\/CombinationTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "potential\/CombinationTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "potential\/CombinationTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "potential\/CombinationTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "potential\/CombinationTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "potential\/CombinationTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "potential\/CombinationTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "potential\/CombinationTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "potential\/CombinationTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "potential\/CombinationTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "potential\/CombinationTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "potential\/CombinationTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "potential\/CombinationTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "potential\/CombinationTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "potential\/CombinationTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "potential\/CombinationTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "potential\/CombinationTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "potential\/CombinationTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "potential\/CombinationTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "potential\/CombinationTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "potential\/CombinationTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "potential\/CombinationTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/CombinationTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/CombinationTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "potential\/CombinationTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "potential\/CombinationTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "potential\/CombinationTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "potential\/CombinationTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "potential\/CombinationTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/CombinationTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/CombinationTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/CombinationTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/CombinationTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/CombinationTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/CombinationTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/CombinationTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/CombinationTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/CombinationTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/CombinationTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "potential\/CombinationTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "potential\/CombinationTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "potential\/CombinationTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "potential\/CombinationTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "potential\/CombinationTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "potential\/CombinationTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/CombinationTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/CombinationTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/CombinationTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "potential\/CombinationTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/CombinationTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "potential\/CombinationTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "potential\/CombinationTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "potential\/CombinationTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "potential\/CombinationTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "potential\/CombinationTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "potential\/CombinationTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "potential\/CombinationTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "potential\/CombinationTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "potential\/CombinationTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "potential\/CombinationTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "potential\/CombinationTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/CombinationTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/CombinationTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/CombinationTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/CombinationTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/CombinationTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/CombinationTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "potential\/CombinationTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/CombinationTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/CombinationTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/CombinationTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/CombinationTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/CombinationTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/CombinationTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/CombinationTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/CombinationTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/CombinationTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/CombinationTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/CombinationTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/CombinationTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/CombinationTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/CombinationTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/CombinationTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/CombinationTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/CombinationTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/CombinationTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/CombinationTest.html", "kind" : "class"}, {"name" : "potential.Combiner", "members_trait" : [{"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/Combiner.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/Combiner.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/Combiner.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/Combiner.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/Combiner.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/Combiner.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/Combiner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/Combiner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/Combiner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/Combiner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/Combiner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/Combiner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/Combiner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Combiner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Combiner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Combiner.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/Combiner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/Combiner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/Combiner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/Combiner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/Combiner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/Combiner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/Combiner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/Combiner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/Combiner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Trait offering the functions required for implementingcombination strategies in a general way", "trait" : "potential\/Combiner.html", "kind" : "trait"}, {"name" : "potential.ConversionTest", "shortDescription" : "", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "potential\/ConversionTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "potential\/ConversionTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "potential\/ConversionTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "potential\/ConversionTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "potential.ConversionTest.bnet", "link" : "potential\/ConversionTest.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "netName", "tail" : ": String", "member" : "potential.ConversionTest.netName", "link" : "potential\/ConversionTest.html#netName:String", "kind" : "val"}, {"label" : "folder", "tail" : ": String", "member" : "potential.ConversionTest.folder", "link" : "potential\/ConversionTest.html#folder:String", "kind" : "val"}, {"member" : "potential.ConversionTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "potential\/ConversionTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "potential\/ConversionTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "potential\/ConversionTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "potential\/ConversionTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "potential\/ConversionTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "potential\/ConversionTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "potential\/ConversionTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "potential\/ConversionTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "potential\/ConversionTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "potential\/ConversionTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "potential\/ConversionTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "potential\/ConversionTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "potential\/ConversionTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "potential\/ConversionTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "potential\/ConversionTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "potential\/ConversionTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "potential\/ConversionTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "potential\/ConversionTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "potential\/ConversionTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "potential\/ConversionTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "potential\/ConversionTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "potential\/ConversionTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "potential\/ConversionTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/ConversionTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/ConversionTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "potential\/ConversionTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "potential\/ConversionTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "potential\/ConversionTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "potential\/ConversionTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "potential\/ConversionTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/ConversionTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/ConversionTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/ConversionTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/ConversionTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/ConversionTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/ConversionTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/ConversionTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/ConversionTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/ConversionTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/ConversionTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "potential\/ConversionTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "potential\/ConversionTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "potential\/ConversionTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "potential\/ConversionTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "potential\/ConversionTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "potential\/ConversionTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/ConversionTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/ConversionTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/ConversionTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "potential\/ConversionTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/ConversionTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "potential\/ConversionTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "potential\/ConversionTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "potential\/ConversionTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "potential\/ConversionTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "potential\/ConversionTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "potential\/ConversionTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "potential\/ConversionTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "potential\/ConversionTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "potential\/ConversionTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "potential\/ConversionTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "potential\/ConversionTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/ConversionTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/ConversionTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/ConversionTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/ConversionTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/ConversionTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/ConversionTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "potential\/ConversionTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/ConversionTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/ConversionTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/ConversionTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/ConversionTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/ConversionTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/ConversionTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/ConversionTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ConversionTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ConversionTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ConversionTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/ConversionTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/ConversionTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/ConversionTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/ConversionTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/ConversionTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/ConversionTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/ConversionTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/ConversionTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/ConversionTest.html", "kind" : "class"}, {"name" : "potential.DefaultValueComputer", "members_trait" : [{"label" : "getDefaultValue", "tail" : "(): Double", "member" : "potential.DefaultValueComputer.getDefaultValue", "link" : "potential\/DefaultValueComputer.html#getDefaultValue:Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/DefaultValueComputer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/DefaultValueComputer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/DefaultValueComputer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/DefaultValueComputer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/DefaultValueComputer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/DefaultValueComputer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/DefaultValueComputer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/DefaultValueComputer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/DefaultValueComputer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/DefaultValueComputer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/DefaultValueComputer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/DefaultValueComputer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/DefaultValueComputer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/DefaultValueComputer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/DefaultValueComputer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/DefaultValueComputer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/DefaultValueComputer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/DefaultValueComputer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/DefaultValueComputer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getType", "tail" : "(): DefaultValueComputerType.DefaultValueComputerType", "member" : "potential.DefaultValueComputer.getType", "link" : "potential\/DefaultValueComputer.html#getType:potential.DefaultValueComputerType.DefaultValueComputerType", "kind" : "abstract def"}, {"label" : "computeDefaultValue", "tail" : "(values: Seq[Double]): Double", "member" : "potential.DefaultValueComputer.computeDefaultValue", "link" : "potential\/DefaultValueComputer.html#computeDefaultValue(values:Seq[Double]):Double", "kind" : "abstract def"}, {"label" : "defaultValue", "tail" : ": Double", "member" : "potential.DefaultValueComputer.defaultValue", "link" : "potential\/DefaultValueComputer.html#defaultValue:Double", "kind" : "abstract val"}], "shortDescription" : "Base trait for default value computation", "object" : "potential\/DefaultValueComputer$.html", "members_object" : [{"label" : "apply", "tail" : "(defaultValueComputerType: DefaultValueComputerType.DefaultValueComputerType): DefaultValueComputer", "member" : "potential.DefaultValueComputer.apply", "link" : "potential\/DefaultValueComputer$.html#apply(defaultValueComputerType:potential.DefaultValueComputerType.DefaultValueComputerType):potential.DefaultValueComputer", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/DefaultValueComputer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/DefaultValueComputer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/DefaultValueComputer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/DefaultValueComputer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/DefaultValueComputer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/DefaultValueComputer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/DefaultValueComputer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/DefaultValueComputer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/DefaultValueComputer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/DefaultValueComputer$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/DefaultValueComputer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/DefaultValueComputer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/DefaultValueComputer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/DefaultValueComputer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/DefaultValueComputer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/DefaultValueComputer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/DefaultValueComputer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/DefaultValueComputer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/DefaultValueComputer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "potential\/DefaultValueComputer.html", "kind" : "trait"}, {"name" : "potential.DefaultValueComputerType", "shortDescription" : "Enumeration including the available options for defaultvalue computer", "object" : "potential\/DefaultValueComputerType$.html", "members_object" : [{"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "potential\/DefaultValueComputerType$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "potential\/DefaultValueComputerType$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "potential\/DefaultValueComputerType$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "ZERO", "tail" : ": Value", "member" : "potential.DefaultValueComputerType.ZERO", "link" : "potential\/DefaultValueComputerType$.html#ZERO:potential.DefaultValueComputerType.Value", "kind" : "val"}, {"label" : "REGULAR", "tail" : ": Value", "member" : "potential.DefaultValueComputerType.REGULAR", "link" : "potential\/DefaultValueComputerType$.html#REGULAR:potential.DefaultValueComputerType.Value", "kind" : "val"}, {"label" : "DefaultValueComputerType", "tail" : "", "member" : "potential.DefaultValueComputerType.DefaultValueComputerType", "link" : "potential\/DefaultValueComputerType$.html#DefaultValueComputerType=potential.DefaultValueComputerType.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/DefaultValueComputerType$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/DefaultValueComputerType$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/DefaultValueComputerType$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/DefaultValueComputerType$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "potential\/DefaultValueComputerType$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "potential\/DefaultValueComputerType$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "potential\/DefaultValueComputerType$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "potential\/DefaultValueComputerType$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "potential\/DefaultValueComputerType$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "potential\/DefaultValueComputerType$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "potential\/DefaultValueComputerType$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "potential\/DefaultValueComputerType$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/DefaultValueComputerType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/DefaultValueComputerType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/DefaultValueComputerType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/DefaultValueComputerType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/DefaultValueComputerType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/DefaultValueComputerType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/DefaultValueComputerType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/DefaultValueComputerType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/DefaultValueComputerType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/DefaultValueComputerType$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/DefaultValueComputerType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/DefaultValueComputerType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/DefaultValueComputerType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/DefaultValueComputerType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/DefaultValueComputerType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/DefaultValueComputerType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/DefaultValueComputerType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/DefaultValueComputerType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "potential.MarginalizationTest", "shortDescription" : "", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "potential\/MarginalizationTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "potential\/MarginalizationTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "potential\/MarginalizationTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "potential\/MarginalizationTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "store3", "tail" : ": Potential", "member" : "potential.MarginalizationTest.store3", "link" : "potential\/MarginalizationTest.html#store3:potential.Potential", "kind" : "val"}, {"label" : "store2", "tail" : ": Potential", "member" : "potential.MarginalizationTest.store2", "link" : "potential\/MarginalizationTest.html#store2:potential.Potential", "kind" : "val"}, {"label" : "marginalizers", "tail" : ": List[OperatorType.Value]", "member" : "potential.MarginalizationTest.marginalizers", "link" : "potential\/MarginalizationTest.html#marginalizers:List[potential.OperatorType.Value]", "kind" : "var"}, {"label" : "store1", "tail" : ": Potential", "member" : "potential.MarginalizationTest.store1", "link" : "potential\/MarginalizationTest.html#store1:potential.Potential", "kind" : "val"}, {"label" : "resultTable", "tail" : ": Potential", "member" : "potential.MarginalizationTest.resultTable", "link" : "potential\/MarginalizationTest.html#resultTable:potential.Potential", "kind" : "val"}, {"label" : "potential1Table", "tail" : ": Potential", "member" : "potential.MarginalizationTest.potential1Table", "link" : "potential\/MarginalizationTest.html#potential1Table:potential.Potential", "kind" : "val"}, {"label" : "storeTable1", "tail" : ": TableStore", "member" : "potential.MarginalizationTest.storeTable1", "link" : "potential\/MarginalizationTest.html#storeTable1:potential.TableStore", "kind" : "val"}, {"label" : "valuesPot1", "tail" : ": Array[Double]", "member" : "potential.MarginalizationTest.valuesPot1", "link" : "potential\/MarginalizationTest.html#valuesPot1:Array[Double]", "kind" : "val"}, {"label" : "variableSet1", "tail" : ": VariableSet", "member" : "potential.MarginalizationTest.variableSet1", "link" : "potential\/MarginalizationTest.html#variableSet1:base.VariableSet", "kind" : "val"}, {"label" : "variable4", "tail" : ": Variable", "member" : "potential.MarginalizationTest.variable4", "link" : "potential\/MarginalizationTest.html#variable4:base.Variable", "kind" : "val"}, {"label" : "variable3", "tail" : ": Variable", "member" : "potential.MarginalizationTest.variable3", "link" : "potential\/MarginalizationTest.html#variable3:base.Variable", "kind" : "val"}, {"label" : "variable2", "tail" : ": Variable", "member" : "potential.MarginalizationTest.variable2", "link" : "potential\/MarginalizationTest.html#variable2:base.Variable", "kind" : "val"}, {"label" : "variable1", "tail" : ": Variable", "member" : "potential.MarginalizationTest.variable1", "link" : "potential\/MarginalizationTest.html#variable1:base.Variable", "kind" : "val"}, {"label" : "cores", "tail" : ": Int", "member" : "potential.MarginalizationTest.cores", "link" : "potential\/MarginalizationTest.html#cores:Int", "kind" : "val"}, {"member" : "potential.MarginalizationTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "potential\/MarginalizationTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "potential\/MarginalizationTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "potential\/MarginalizationTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "potential\/MarginalizationTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "potential\/MarginalizationTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "potential\/MarginalizationTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "potential\/MarginalizationTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "potential\/MarginalizationTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "potential\/MarginalizationTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "potential\/MarginalizationTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "potential\/MarginalizationTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "potential\/MarginalizationTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "potential\/MarginalizationTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "potential\/MarginalizationTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "potential\/MarginalizationTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "potential\/MarginalizationTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "potential\/MarginalizationTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "potential\/MarginalizationTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "potential\/MarginalizationTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "potential\/MarginalizationTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "potential\/MarginalizationTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "potential\/MarginalizationTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "potential\/MarginalizationTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/MarginalizationTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/MarginalizationTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "potential\/MarginalizationTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "potential\/MarginalizationTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "potential\/MarginalizationTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "potential\/MarginalizationTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "potential\/MarginalizationTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/MarginalizationTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/MarginalizationTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/MarginalizationTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/MarginalizationTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/MarginalizationTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/MarginalizationTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/MarginalizationTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/MarginalizationTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/MarginalizationTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/MarginalizationTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "potential\/MarginalizationTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "potential\/MarginalizationTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "potential\/MarginalizationTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "potential\/MarginalizationTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "potential\/MarginalizationTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "potential\/MarginalizationTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/MarginalizationTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/MarginalizationTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/MarginalizationTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "potential\/MarginalizationTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/MarginalizationTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "potential\/MarginalizationTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "potential\/MarginalizationTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "potential\/MarginalizationTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "potential\/MarginalizationTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "potential\/MarginalizationTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "potential\/MarginalizationTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "potential\/MarginalizationTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "potential\/MarginalizationTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "potential\/MarginalizationTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "potential\/MarginalizationTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "potential\/MarginalizationTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/MarginalizationTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/MarginalizationTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/MarginalizationTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/MarginalizationTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/MarginalizationTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/MarginalizationTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "potential\/MarginalizationTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/MarginalizationTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/MarginalizationTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/MarginalizationTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/MarginalizationTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/MarginalizationTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/MarginalizationTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/MarginalizationTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/MarginalizationTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/MarginalizationTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/MarginalizationTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/MarginalizationTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/MarginalizationTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/MarginalizationTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/MarginalizationTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/MarginalizationTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/MarginalizationTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/MarginalizationTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/MarginalizationTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/MarginalizationTest.html", "kind" : "class"}, {"name" : "potential.Marginalizer", "members_trait" : [{"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/Marginalizer.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/Marginalizer.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/Marginalizer.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/Marginalizer.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/Marginalizer.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/Marginalizer.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/Marginalizer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/Marginalizer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/Marginalizer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/Marginalizer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/Marginalizer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/Marginalizer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/Marginalizer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Marginalizer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Marginalizer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Marginalizer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/Marginalizer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/Marginalizer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/Marginalizer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/Marginalizer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/Marginalizer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/Marginalizer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/Marginalizer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/Marginalizer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/Marginalizer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Trait offering the functions required for implementingmarginalization strategies in a general way", "trait" : "potential\/Marginalizer.html", "kind" : "trait"}, {"name" : "potential.Operations", "shortDescription" : "Object for creating the definitions of operations forcombination and marginalization", "object" : "potential\/Operations$.html", "members_object" : [{"label" : "Marginalization", "tail" : "", "member" : "potential.Operations.Marginalization", "link" : "potential\/Operations$.html#Marginalization=(potential.ValueStore,base.Variable)=>potential.ValueStore", "kind" : "type"}, {"label" : "Combination", "tail" : "", "member" : "potential.Operations.Combination", "link" : "potential\/Operations$.html#Combination=(potential.ValueStore,potential.ValueStore)=>potential.ValueStore", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/Operations$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/Operations$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/Operations$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/Operations$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/Operations$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/Operations$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/Operations$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Operations$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Operations$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Operations$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/Operations$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/Operations$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/Operations$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/Operations$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/Operations$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/Operations$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/Operations$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/Operations$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/Operations$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "potential.OperatorType", "shortDescription" : "Object acting as enumeration for types of operatorsfor combination and marginalization", "object" : "potential\/OperatorType$.html", "members_object" : [{"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "potential\/OperatorType$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "potential\/OperatorType$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "potential\/OperatorType$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "ALT9", "tail" : ": Value", "member" : "potential.OperatorType.ALT9", "link" : "potential\/OperatorType$.html#ALT9:potential.OperatorType.Value", "kind" : "val"}, {"label" : "ALT8", "tail" : ": Value", "member" : "potential.OperatorType.ALT8", "link" : "potential\/OperatorType$.html#ALT8:potential.OperatorType.Value", "kind" : "val"}, {"label" : "ALT7", "tail" : ": Value", "member" : "potential.OperatorType.ALT7", "link" : "potential\/OperatorType$.html#ALT7:potential.OperatorType.Value", "kind" : "val"}, {"label" : "ALT6", "tail" : ": Value", "member" : "potential.OperatorType.ALT6", "link" : "potential\/OperatorType$.html#ALT6:potential.OperatorType.Value", "kind" : "val"}, {"label" : "ALT5", "tail" : ": Value", "member" : "potential.OperatorType.ALT5", "link" : "potential\/OperatorType$.html#ALT5:potential.OperatorType.Value", "kind" : "val"}, {"label" : "ALT4", "tail" : ": Value", "member" : "potential.OperatorType.ALT4", "link" : "potential\/OperatorType$.html#ALT4:potential.OperatorType.Value", "kind" : "val"}, {"label" : "ALT3", "tail" : ": Value", "member" : "potential.OperatorType.ALT3", "link" : "potential\/OperatorType$.html#ALT3:potential.OperatorType.Value", "kind" : "val"}, {"label" : "ALT2", "tail" : ": Value", "member" : "potential.OperatorType.ALT2", "link" : "potential\/OperatorType$.html#ALT2:potential.OperatorType.Value", "kind" : "val"}, {"label" : "ALT1", "tail" : ": Value", "member" : "potential.OperatorType.ALT1", "link" : "potential\/OperatorType$.html#ALT1:potential.OperatorType.Value", "kind" : "val"}, {"label" : "DEFAULT", "tail" : ": Value", "member" : "potential.OperatorType.DEFAULT", "link" : "potential\/OperatorType$.html#DEFAULT:potential.OperatorType.Value", "kind" : "val"}, {"label" : "OperatorType", "tail" : "", "member" : "potential.OperatorType.OperatorType", "link" : "potential\/OperatorType$.html#OperatorType=potential.OperatorType.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/OperatorType$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/OperatorType$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/OperatorType$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/OperatorType$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "potential\/OperatorType$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "potential\/OperatorType$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "potential\/OperatorType$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "potential\/OperatorType$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "potential\/OperatorType$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "potential\/OperatorType$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "potential\/OperatorType$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "potential\/OperatorType$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/OperatorType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/OperatorType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/OperatorType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/OperatorType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/OperatorType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/OperatorType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/OperatorType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/OperatorType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/OperatorType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/OperatorType$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/OperatorType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/OperatorType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/OperatorType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/OperatorType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/OperatorType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/OperatorType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/OperatorType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/OperatorType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "potential.Potential", "shortDescription" : "Class for representing potentials", "object" : "potential\/Potential$.html", "members_class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.Potential.getMemorySize", "link" : "potential\/Potential.html#getMemorySize:Long", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "potential.Potential.equals", "link" : "potential\/Potential.html#equals(obj:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.Potential.toString", "link" : "potential\/Potential.html#toString():String", "kind" : "def"}, {"label" : "convert", "tail" : "(storeType: ValueStoreTypes.Value): Potential", "member" : "potential.Potential.convert", "link" : "potential\/Potential.html#convert(storeType:potential.ValueStoreTypes.Value):potential.Potential", "kind" : "def"}, {"label" : "isUnit", "tail" : "(): Boolean", "member" : "potential.Potential.isUnit", "link" : "potential\/Potential.html#isUnit:Boolean", "kind" : "def"}, {"label" : "isPotentialForVariable", "tail" : "(variable: Variable): Boolean", "member" : "potential.Potential.isPotentialForVariable", "link" : "potential\/Potential.html#isPotentialForVariable(variable:base.Variable):Boolean", "kind" : "def"}, {"label" : "isPotentialForParentVariable", "tail" : "(variable: Variable): Boolean", "member" : "potential.Potential.isPotentialForParentVariable", "link" : "potential\/Potential.html#isPotentialForParentVariable(variable:base.Variable):Boolean", "kind" : "def"}, {"label" : "KLDistance", "tail" : "(other: Potential): Double", "member" : "potential.Potential.KLDistance", "link" : "potential\/Potential.html#KLDistance(other:potential.Potential):Double", "kind" : "def"}, {"label" : "normalize", "tail" : "(): Potential", "member" : "potential.Potential.normalize", "link" : "potential\/Potential.html#normalize:potential.Potential", "kind" : "def"}, {"label" : "qualitativeMarginalize", "tail" : "(variable: Variable): Potential", "member" : "potential.Potential.qualitativeMarginalize", "link" : "potential\/Potential.html#qualitativeMarginalize(variable:base.Variable):potential.Potential", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): Potential", "member" : "potential.Potential.marginalize", "link" : "potential\/Potential.html#marginalize(variable:base.Variable):potential.Potential", "kind" : "def"}, {"label" : "qualitativeCombine", "tail" : "(other: Potential): Potential", "member" : "potential.Potential.qualitativeCombine", "link" : "potential\/Potential.html#qualitativeCombine(other:potential.Potential):potential.Potential", "kind" : "def"}, {"label" : "combine", "tail" : "(other: Potential): Potential", "member" : "potential.Potential.combine", "link" : "potential\/Potential.html#combine(other:potential.Potential):potential.Potential", "kind" : "def"}, {"label" : "getPatternMeasures", "tail" : "(): (Int, Double, Double, Double, Double, Double, Double)", "member" : "potential.Potential.getPatternMeasures", "link" : "potential\/Potential.html#getPatternMeasures:(Int,Double,Double,Double,Double,Double,Double)", "kind" : "def"}, {"label" : "analyze", "tail" : "(): (VariableSet, List[Double], Double, List[Double], List[Double], Double, Long, Long)", "member" : "potential.Potential.analyze", "link" : "potential\/Potential.html#analyze:(base.VariableSet,List[Double],Double,List[Double],List[Double],Double,Long,Long)", "kind" : "def"}, {"label" : "setFunctions", "tail" : "(combType: OperatorType.OperatorType, margType: OperatorType.OperatorType): Unit", "member" : "potential.Potential.setFunctions", "link" : "potential\/Potential.html#setFunctions(combType:potential.OperatorType.OperatorType,margType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": List[Variable]", "member" : "potential.Potential.conditioningVars", "link" : "potential\/Potential.html#conditioningVars:List[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.Potential.mainVariable", "link" : "potential\/Potential.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.Potential.variables", "link" : "potential\/Potential.html#variables:base.VariableSet", "kind" : "val"}, {"member" : "potential.Potential#<init>", "error" : "unsupported entity"}, {"label" : "store", "tail" : ": ValueStore", "member" : "potential.Potential.store", "link" : "potential\/Potential.html#store:potential.ValueStore", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/Potential.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/Potential.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/Potential.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/Potential.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/Potential.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/Potential.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/Potential.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Potential.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Potential.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Potential.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/Potential.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/Potential.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/Potential.html#clone():Object", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/Potential.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/Potential.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/Potential.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/Potential.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "getPotentialsSize", "tail" : "(potentials: List[Potential]): Long", "member" : "potential.Potential.getPotentialsSize", "link" : "potential\/Potential$.html#getPotentialsSize(potentials:List[potential.Potential]):Long", "kind" : "def"}, {"label" : "equals", "tail" : "(first: Potential, second: Potential): Boolean", "member" : "potential.Potential.equals", "link" : "potential\/Potential$.html#equals(first:potential.Potential,second:potential.Potential):Boolean", "kind" : "def"}, {"label" : "generateZeros", "tail" : "(potential: Potential, proportion: Double): Potential", "member" : "potential.Potential.generateZeros", "link" : "potential\/Potential$.html#generateZeros(potential:potential.Potential,proportion:Double):potential.Potential", "kind" : "def"}, {"label" : "generateNormalizedRandomValues", "tail" : "(counter: Int, values: List[Double]): List[Double]", "member" : "potential.Potential.generateNormalizedRandomValues", "link" : "potential\/Potential$.html#generateNormalizedRandomValues(counter:Int,values:List[Double]):List[Double]", "kind" : "def"}, {"label" : "generateValues", "tail" : "(variable: Variable, values: List[Double], doNormalization: Boolean): List[Double]", "member" : "potential.Potential.generateValues", "link" : "potential\/Potential$.html#generateValues(variable:base.Variable,values:List[Double],doNormalization:Boolean):List[Double]", "kind" : "def"}, {"label" : "generateRandomPotential", "tail" : "(maxCardinality: Int, minGlobalCardinality: Long, maxGlobalCardinality: Long, intervals: Int, normalize: Boolean): Potential", "member" : "potential.Potential.generateRandomPotential", "link" : "potential\/Potential$.html#generateRandomPotential(maxCardinality:Int,minGlobalCardinality:Long,maxGlobalCardinality:Long,intervals:Int,normalize:Boolean):potential.Potential", "kind" : "def"}, {"label" : "generateRandomPotentialPair", "tail" : "(maxCardinality: Int, minGlobalCardinality: Long, maxGlobalCardinality: Long, intervals: Int): (Potential, Potential)", "member" : "potential.Potential.generateRandomPotentialPair", "link" : "potential\/Potential$.html#generateRandomPotentialPair(maxCardinality:Int,minGlobalCardinality:Long,maxGlobalCardinality:Long,intervals:Int):(potential.Potential,potential.Potential)", "kind" : "def"}, {"label" : "generateRandomPotentialPair", "tail" : "(numberVariables1: Int, numberVariables2: Int, maxCardinality: Int): (Potential, Potential)", "member" : "potential.Potential.generateRandomPotentialPair", "link" : "potential\/Potential$.html#generateRandomPotentialPair(numberVariables1:Int,numberVariables2:Int,maxCardinality:Int):(potential.Potential,potential.Potential)", "kind" : "def"}, {"label" : "generateRandomPotential", "tail" : "(numberVariables: Int, maxCardinality: Int): Potential", "member" : "potential.Potential.generateRandomPotential", "link" : "potential\/Potential$.html#generateRandomPotential(numberVariables:Int,maxCardinality:Int):potential.Potential", "kind" : "def"}, {"label" : "readObject", "tail" : "(fileName: String): Potential", "member" : "potential.Potential.readObject", "link" : "potential\/Potential$.html#readObject(fileName:String):potential.Potential", "kind" : "def"}, {"label" : "writeObject", "tail" : "(fileName: String, potential: Potential): Unit", "member" : "potential.Potential.writeObject", "link" : "potential\/Potential$.html#writeObject(fileName:String,potential:potential.Potential):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(): Potential", "member" : "potential.Potential.apply", "link" : "potential\/Potential$.html#apply:potential.Potential", "kind" : "def"}, {"label" : "apply", "tail" : "(values: ValueStore): Potential", "member" : "potential.Potential.apply", "link" : "potential\/Potential$.html#apply(values:potential.ValueStore):potential.Potential", "kind" : "def"}, {"label" : "apply", "tail" : "(variableSet: VariableSet, kind: ValueStoreType): Potential", "member" : "potential.Potential.apply", "link" : "potential\/Potential$.html#apply(variableSet:base.VariableSet,kind:potential.ValueStoreTypes.ValueStoreType):potential.Potential", "kind" : "def"}, {"label" : "apply", "tail" : "(variableSet: VariableSet, valuesList: List[Double], kind: ValueStoreType): Potential", "member" : "potential.Potential.apply", "link" : "potential\/Potential$.html#apply(variableSet:base.VariableSet,valuesList:List[Double],kind:potential.ValueStoreTypes.ValueStoreType):potential.Potential", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/Potential$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/Potential$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/Potential$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/Potential$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/Potential$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/Potential$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/Potential$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Potential$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Potential$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/Potential$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/Potential$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/Potential$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/Potential$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/Potential$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/Potential$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/Potential$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/Potential$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/Potential$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/Potential$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/Potential.html", "kind" : "class"}, {"name" : "potential.PotentialRandomGenerationTest", "shortDescription" : "", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "potential\/PotentialRandomGenerationTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "potential\/PotentialRandomGenerationTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "potential\/PotentialRandomGenerationTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "potential\/PotentialRandomGenerationTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "testName", "tail" : ": String", "member" : "potential.PotentialRandomGenerationTest.testName", "link" : "potential\/PotentialRandomGenerationTest.html#testName:String", "kind" : "var"}, {"member" : "potential.PotentialRandomGenerationTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "potential\/PotentialRandomGenerationTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "potential\/PotentialRandomGenerationTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "potential\/PotentialRandomGenerationTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "potential\/PotentialRandomGenerationTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "potential\/PotentialRandomGenerationTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "potential\/PotentialRandomGenerationTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "potential\/PotentialRandomGenerationTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "potential\/PotentialRandomGenerationTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "potential\/PotentialRandomGenerationTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "potential\/PotentialRandomGenerationTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "potential\/PotentialRandomGenerationTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "potential\/PotentialRandomGenerationTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "potential\/PotentialRandomGenerationTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "potential\/PotentialRandomGenerationTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "potential\/PotentialRandomGenerationTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "potential\/PotentialRandomGenerationTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "potential\/PotentialRandomGenerationTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "potential\/PotentialRandomGenerationTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "potential\/PotentialRandomGenerationTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "potential\/PotentialRandomGenerationTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "potential\/PotentialRandomGenerationTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "potential\/PotentialRandomGenerationTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "potential\/PotentialRandomGenerationTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/PotentialRandomGenerationTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "potential\/PotentialRandomGenerationTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "potential\/PotentialRandomGenerationTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "potential\/PotentialRandomGenerationTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "potential\/PotentialRandomGenerationTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "potential\/PotentialRandomGenerationTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "potential\/PotentialRandomGenerationTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/PotentialRandomGenerationTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/PotentialRandomGenerationTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/PotentialRandomGenerationTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "potential\/PotentialRandomGenerationTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/PotentialRandomGenerationTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/PotentialRandomGenerationTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/PotentialRandomGenerationTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "potential\/PotentialRandomGenerationTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/PotentialRandomGenerationTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "potential\/PotentialRandomGenerationTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "potential\/PotentialRandomGenerationTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "potential\/PotentialRandomGenerationTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "potential\/PotentialRandomGenerationTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "potential\/PotentialRandomGenerationTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "potential\/PotentialRandomGenerationTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "potential\/PotentialRandomGenerationTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/PotentialRandomGenerationTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "potential\/PotentialRandomGenerationTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/PotentialRandomGenerationTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "potential\/PotentialRandomGenerationTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "potential\/PotentialRandomGenerationTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "potential\/PotentialRandomGenerationTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "potential\/PotentialRandomGenerationTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "potential\/PotentialRandomGenerationTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "potential\/PotentialRandomGenerationTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "potential\/PotentialRandomGenerationTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "potential\/PotentialRandomGenerationTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "potential\/PotentialRandomGenerationTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "potential\/PotentialRandomGenerationTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "potential\/PotentialRandomGenerationTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "potential\/PotentialRandomGenerationTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "potential\/PotentialRandomGenerationTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/PotentialRandomGenerationTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/PotentialRandomGenerationTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/PotentialRandomGenerationTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/PotentialRandomGenerationTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "potential\/PotentialRandomGenerationTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "potential\/PotentialRandomGenerationTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "potential\/PotentialRandomGenerationTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/PotentialRandomGenerationTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/PotentialRandomGenerationTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/PotentialRandomGenerationTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/PotentialRandomGenerationTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/PotentialRandomGenerationTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/PotentialRandomGenerationTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/PotentialRandomGenerationTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/PotentialRandomGenerationTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/PotentialRandomGenerationTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/PotentialRandomGenerationTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/PotentialRandomGenerationTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/PotentialRandomGenerationTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/PotentialRandomGenerationTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/PotentialRandomGenerationTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/PotentialRandomGenerationTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/PotentialRandomGenerationTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/PotentialRandomGenerationTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/PotentialRandomGenerationTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/PotentialRandomGenerationTest.html", "kind" : "class"}, {"name" : "potential.PrunedTreeStore", "shortDescription" : "Class for storing values in a tree form", "object" : "potential\/PrunedTreeStore$.html", "members_class" : [{"label" : "prune", "tail" : "(): ValueStore", "member" : "potential.PrunedTreeStore.prune", "link" : "potential\/PrunedTreeStore.html#prune:potential.ValueStore", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.PrunedTreeStore.kind", "link" : "potential\/PrunedTreeStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.PrunedTreeStore#<init>", "error" : "unsupported entity"}, {"label" : "root", "tail" : ": TreeNode", "member" : "potential.PrunedTreeStore.root", "link" : "potential\/PrunedTreeStore.html#root:potential.tree.TreeNode", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.PrunedTreeStore.variables", "link" : "potential\/PrunedTreeStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.TreeStore.getMemorySize", "link" : "potential\/PrunedTreeStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "printTree", "tail" : "(): String", "member" : "potential.TreeStore.printTree", "link" : "potential\/PrunedTreeStore.html#printTree:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.TreeStore.toString", "link" : "potential\/PrunedTreeStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.TreeStore.getSize", "link" : "potential\/PrunedTreeStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.TreeStore.getIndicesForValue", "link" : "potential\/PrunedTreeStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.TreeStore.getDifferentValues", "link" : "potential\/PrunedTreeStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.TreeStore.getListValues", "link" : "potential\/PrunedTreeStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.TreeStore.getValue", "link" : "potential\/PrunedTreeStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/PrunedTreeStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/PrunedTreeStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/PrunedTreeStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.ValueStore.getValuesProportions", "link" : "potential\/PrunedTreeStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.ValueStore.getZerosProportion", "link" : "potential\/PrunedTreeStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/PrunedTreeStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.ValueStore.getIndices", "link" : "potential\/PrunedTreeStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/PrunedTreeStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/PrunedTreeStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/PrunedTreeStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/PrunedTreeStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/PrunedTreeStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/PrunedTreeStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/PrunedTreeStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/PrunedTreeStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/PrunedTreeStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/PrunedTreeStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/PrunedTreeStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/PrunedTreeStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/PrunedTreeStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/PrunedTreeStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/PrunedTreeStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/PrunedTreeStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/PrunedTreeStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/PrunedTreeStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/PrunedTreeStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/PrunedTreeStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/PrunedTreeStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/PrunedTreeStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/PrunedTreeStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/PrunedTreeStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/PrunedTreeStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/PrunedTreeStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/PrunedTreeStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/PrunedTreeStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/PrunedTreeStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/PrunedTreeStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/PrunedTreeStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.PrunedTreeStore.marginalizeDefault", "link" : "potential\/PrunedTreeStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.PrunedTreeStore.combineDefault", "link" : "potential\/PrunedTreeStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variablesInTree: VariableSet, values: Array[Double]): PrunedTreeStore", "member" : "potential.PrunedTreeStore.apply", "link" : "potential\/PrunedTreeStore$.html#apply(variablesInTree:base.VariableSet,values:Array[Double]):potential.PrunedTreeStore", "kind" : "def"}, {"label" : "PARALLEL", "tail" : ": Int(2)", "member" : "potential.PrunedTreeStore.PARALLEL", "link" : "potential\/PrunedTreeStore$.html#PARALLEL:Int(2)", "kind" : "final val"}, {"label" : "NORMAL", "tail" : ": Int(1)", "member" : "potential.PrunedTreeStore.NORMAL", "link" : "potential\/PrunedTreeStore$.html#NORMAL:Int(1)", "kind" : "final val"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/PrunedTreeStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/PrunedTreeStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/PrunedTreeStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/PrunedTreeStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/PrunedTreeStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/PrunedTreeStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/PrunedTreeStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/PrunedTreeStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/PrunedTreeStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/PrunedTreeStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/PrunedTreeStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/PrunedTreeStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/PrunedTreeStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/PrunedTreeStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/PrunedTreeStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/PrunedTreeStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/PrunedTreeStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/PrunedTreeStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/PrunedTreeStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/PrunedTreeStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/PrunedTreeStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/PrunedTreeStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/PrunedTreeStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/PrunedTreeStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/PrunedTreeStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/PrunedTreeStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/PrunedTreeStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/PrunedTreeStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/PrunedTreeStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/PrunedTreeStore.html", "kind" : "class"}, {"name" : "potential.RegularDefaultValueComputer", "shortDescription" : "Trait with determination of default value throughthe analysis of the sequence of values", "members_class" : [{"label" : "getType", "tail" : "(): DefaultValueComputerType.Value", "member" : "potential.RegularDefaultValueComputer.getType", "link" : "potential\/RegularDefaultValueComputer.html#getType:potential.DefaultValueComputerType.Value", "kind" : "def"}, {"label" : "computeDefaultValue", "tail" : "(values: Seq[Double]): Double", "member" : "potential.RegularDefaultValueComputer.computeDefaultValue", "link" : "potential\/RegularDefaultValueComputer.html#computeDefaultValue(values:Seq[Double]):Double", "kind" : "def"}, {"label" : "defaultValue", "tail" : ": Double", "member" : "potential.RegularDefaultValueComputer.defaultValue", "link" : "potential\/RegularDefaultValueComputer.html#defaultValue:Double", "kind" : "var"}, {"member" : "potential.RegularDefaultValueComputer#<init>", "error" : "unsupported entity"}, {"label" : "getDefaultValue", "tail" : "(): Double", "member" : "potential.DefaultValueComputer.getDefaultValue", "link" : "potential\/RegularDefaultValueComputer.html#getDefaultValue:Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/RegularDefaultValueComputer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/RegularDefaultValueComputer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/RegularDefaultValueComputer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/RegularDefaultValueComputer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/RegularDefaultValueComputer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/RegularDefaultValueComputer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/RegularDefaultValueComputer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/RegularDefaultValueComputer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/RegularDefaultValueComputer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/RegularDefaultValueComputer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/RegularDefaultValueComputer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/RegularDefaultValueComputer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/RegularDefaultValueComputer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/RegularDefaultValueComputer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/RegularDefaultValueComputer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/RegularDefaultValueComputer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/RegularDefaultValueComputer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/RegularDefaultValueComputer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/RegularDefaultValueComputer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/RegularDefaultValueComputer.html", "kind" : "class"}, {"name" : "potential.TableStore", "shortDescription" : "Class for managing table storage (CPT) for potentials", "object" : "potential\/TableStore$.html", "members_object" : [{"label" : "marginalizeAlt1", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.TableStore.marginalizeAlt1", "link" : "potential\/TableStore$.html#marginalizeAlt1(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.TableStore.marginalizeDefault", "link" : "potential\/TableStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineAlt1", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.TableStore.combineAlt1", "link" : "potential\/TableStore$.html#combineAlt1(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.TableStore.combineDefault", "link" : "potential\/TableStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variables: VariableSet, values: Array[Double]): TableStore", "member" : "potential.TableStore.apply", "link" : "potential\/TableStore$.html#apply(variables:base.VariableSet,values:Array[Double]):potential.TableStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/TableStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/TableStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/TableStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/TableStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/TableStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/TableStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/TableStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/TableStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/TableStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/TableStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/TableStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/TableStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/TableStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/TableStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/TableStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/TableStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/TableStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TableStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TableStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TableStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/TableStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/TableStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/TableStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/TableStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/TableStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/TableStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/TableStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/TableStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/TableStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.TableStore.getMemorySize", "link" : "potential\/TableStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.TableStore.toString", "link" : "potential\/TableStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.TableStore.getSize", "link" : "potential\/TableStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.TableStore.getIndicesForValue", "link" : "potential\/TableStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.TableStore.getDifferentValues", "link" : "potential\/TableStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.TableStore.getListValues", "link" : "potential\/TableStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.TableStore.getValue", "link" : "potential\/TableStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.TableStore.kind", "link" : "potential\/TableStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.TableStore#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": Array[Double]", "member" : "potential.TableStore.values", "link" : "potential\/TableStore.html#values:Array[Double]", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.TableStore.variables", "link" : "potential\/TableStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/TableStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/TableStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/TableStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.ValueStore.getValuesProportions", "link" : "potential\/TableStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.ValueStore.getZerosProportion", "link" : "potential\/TableStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/TableStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.ValueStore.getIndices", "link" : "potential\/TableStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/TableStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/TableStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/TableStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/TableStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/TableStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/TableStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/TableStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/TableStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/TableStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/TableStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/TableStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/TableStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/TableStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/TableStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/TableStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/TableStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/TableStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/TableStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/TableStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/TableStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/TableStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/TableStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TableStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TableStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TableStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/TableStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/TableStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/TableStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/TableStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/TableStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/TableStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/TableStore.html", "kind" : "case class"}, {"name" : "potential.TreeStore", "shortDescription" : "Class for storing values in a tree form", "object" : "potential\/TreeStore$.html", "members_object" : [{"label" : "marginalizeDefault", "tail" : "(valst: ValueStore, variable: Variable): ValueStore", "member" : "potential.TreeStore.marginalizeDefault", "link" : "potential\/TreeStore$.html#marginalizeDefault(valst:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.TreeStore.combineDefault", "link" : "potential\/TreeStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "apply", "tail" : "(variablesInTree: VariableSet, values: Array[Double]): TreeStore", "member" : "potential.TreeStore.apply", "link" : "potential\/TreeStore$.html#apply(variablesInTree:base.VariableSet,values:Array[Double]):potential.TreeStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/TreeStore$.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/TreeStore$.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/TreeStore$.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/TreeStore$.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/TreeStore$.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/TreeStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/TreeStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/TreeStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/TreeStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/TreeStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/TreeStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/TreeStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/TreeStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/TreeStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/TreeStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/TreeStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/TreeStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TreeStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TreeStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TreeStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/TreeStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/TreeStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/TreeStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/TreeStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/TreeStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/TreeStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/TreeStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/TreeStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/TreeStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.TreeStore.getMemorySize", "link" : "potential\/TreeStore.html#getMemorySize:Long", "kind" : "def"}, {"label" : "printTree", "tail" : "(): String", "member" : "potential.TreeStore.printTree", "link" : "potential\/TreeStore.html#printTree:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "potential.TreeStore.toString", "link" : "potential\/TreeStore.html#toString:String", "kind" : "def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.TreeStore.getSize", "link" : "potential\/TreeStore.html#getSize:(Long,Long,Long)", "kind" : "def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.TreeStore.getIndicesForValue", "link" : "potential\/TreeStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.TreeStore.getDifferentValues", "link" : "potential\/TreeStore.html#getDifferentValues:List[Double]", "kind" : "def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.TreeStore.getListValues", "link" : "potential\/TreeStore.html#getListValues:List[Double]", "kind" : "def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.TreeStore.getValue", "link" : "potential\/TreeStore.html#getValue(index:Long):Double", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.TreeStore.kind", "link" : "potential\/TreeStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"member" : "potential.TreeStore#<init>", "error" : "unsupported entity"}, {"label" : "root", "tail" : ": TreeNode", "member" : "potential.TreeStore.root", "link" : "potential\/TreeStore.html#root:potential.tree.TreeNode", "kind" : "val"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.TreeStore.variables", "link" : "potential\/TreeStore.html#variables:base.VariableSet", "kind" : "val"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/TreeStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/TreeStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/TreeStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.ValueStore.getValuesProportions", "link" : "potential\/TreeStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.ValueStore.getZerosProportion", "link" : "potential\/TreeStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/TreeStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.ValueStore.getIndices", "link" : "potential\/TreeStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/TreeStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/TreeStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/TreeStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/TreeStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/TreeStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/TreeStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/TreeStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/TreeStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/TreeStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/TreeStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/TreeStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/TreeStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/TreeStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/TreeStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/TreeStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/TreeStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/TreeStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/TreeStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/TreeStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/TreeStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/TreeStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/TreeStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TreeStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TreeStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/TreeStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/TreeStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/TreeStore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/TreeStore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/TreeStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/TreeStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/TreeStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "potential\/TreeStore.html", "kind" : "case class"}, {"name" : "potential.ValueDrivenStore", "members_trait" : [{"label" : "addValue", "tail" : "(value: Double, index: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValue", "link" : "potential\/ValueDrivenStore.html#addValue(value:Double,index:Long):potential.ValueDrivenStore", "kind" : "def"}, {"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/ValueDrivenStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/ValueDrivenStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/ValueDrivenStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.ValueStore.getValuesProportions", "link" : "potential\/ValueDrivenStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.ValueStore.getZerosProportion", "link" : "potential\/ValueDrivenStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/ValueDrivenStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.ValueStore.getIndices", "link" : "potential\/ValueDrivenStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/ValueDrivenStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.ValueStore.kind", "link" : "potential\/ValueDrivenStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/ValueDrivenStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/ValueDrivenStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/ValueDrivenStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/ValueDrivenStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/ValueDrivenStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/ValueDrivenStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/ValueDrivenStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/ValueDrivenStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/ValueDrivenStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/ValueDrivenStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/ValueDrivenStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/ValueDrivenStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/ValueDrivenStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/ValueDrivenStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/ValueDrivenStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/ValueDrivenStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/ValueDrivenStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/ValueDrivenStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/ValueDrivenStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/ValueDrivenStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/ValueDrivenStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueDrivenStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueDrivenStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueDrivenStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/ValueDrivenStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/ValueDrivenStore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/ValueDrivenStore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/ValueDrivenStore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/ValueDrivenStore.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/ValueDrivenStore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/ValueDrivenStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/ValueDrivenStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/ValueDrivenStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "addValueForRepresentation", "tail" : "(d: Double, l: Long): ValueDrivenStore", "member" : "potential.ValueDrivenStore.addValueForRepresentation", "link" : "potential\/ValueDrivenStore.html#addValueForRepresentation(d:Double,l:Long):potential.ValueDrivenStore", "kind" : "abstract def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.ValueStore.getMemorySize", "link" : "potential\/ValueDrivenStore.html#getMemorySize:Long", "kind" : "abstract def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.ValueStore.getSize", "link" : "potential\/ValueDrivenStore.html#getSize:(Long,Long,Long)", "kind" : "abstract def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.ValueStore.getIndicesForValue", "link" : "potential\/ValueDrivenStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "abstract def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.ValueStore.getDifferentValues", "link" : "potential\/ValueDrivenStore.html#getDifferentValues:List[Double]", "kind" : "abstract def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.ValueStore.getListValues", "link" : "potential\/ValueDrivenStore.html#getListValues:List[Double]", "kind" : "abstract def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/ValueDrivenStore.html#getValue(index:Long):Double", "kind" : "abstract def"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.ValueStore.variables", "link" : "potential\/ValueDrivenStore.html#variables:base.VariableSet", "kind" : "abstract val"}], "shortDescription" : "General trait for ValueDrivenStores, adding the behaviorof defining and using a default value", "trait" : "potential\/ValueDrivenStore.html", "kind" : "trait"}, {"name" : "potential.ValueStore", "members_trait" : [{"label" : "normalize", "tail" : "(): ValueStore", "member" : "potential.ValueStore.normalize", "link" : "potential\/ValueStore.html#normalize:potential.ValueStore", "kind" : "def"}, {"label" : "marginalize", "tail" : "(variable: Variable): ValueStore", "member" : "potential.ValueStore.marginalize", "link" : "potential\/ValueStore.html#marginalize(variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "combine", "tail" : "(value: ValueStore): ValueStore", "member" : "potential.ValueStore.combine", "link" : "potential\/ValueStore.html#combine(value:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "getValuesProportions", "tail" : "(): List[Double]", "member" : "potential.ValueStore.getValuesProportions", "link" : "potential\/ValueStore.html#getValuesProportions:List[Double]", "kind" : "def"}, {"label" : "getZerosProportion", "tail" : "(): Double", "member" : "potential.ValueStore.getZerosProportion", "link" : "potential\/ValueStore.html#getZerosProportion:Double", "kind" : "def"}, {"label" : "getValue", "tail" : "(conf: Configuration): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/ValueStore.html#getValue(conf:base.Configuration):Double", "kind" : "def"}, {"label" : "getIndices", "tail" : "(): List[Long]", "member" : "potential.ValueStore.getIndices", "link" : "potential\/ValueStore.html#getIndices:List[Long]", "kind" : "def"}, {"label" : "getVariables", "tail" : "(): VariableSet", "member" : "potential.ValueStore.getVariables", "link" : "potential\/ValueStore.html#getVariables:base.VariableSet", "kind" : "def"}, {"label" : "kind", "tail" : ": ValueStoreTypes.Value", "member" : "potential.ValueStore.kind", "link" : "potential\/ValueStore.html#kind:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "conditioningVars", "tail" : ": Iterable[Variable]", "member" : "potential.ValueStore.conditioningVars", "link" : "potential\/ValueStore.html#conditioningVars:Iterable[base.Variable]", "kind" : "val"}, {"label" : "mainVariable", "tail" : ": Variable", "member" : "potential.ValueStore.mainVariable", "link" : "potential\/ValueStore.html#mainVariable:base.Variable", "kind" : "val"}, {"label" : "marginalizeDefault", "tail" : "(valst1: ValueStore, variable: Variable): ValueStore", "member" : "potential.Marginalizer.marginalizeDefault", "link" : "potential\/ValueStore.html#marginalizeDefault(valst1:potential.ValueStore,variable:base.Variable):potential.ValueStore", "kind" : "def"}, {"label" : "registerMarginalizationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Marginalization): Option[Marginalization]", "member" : "potential.Marginalizer.registerMarginalizationFunction", "link" : "potential\/ValueStore.html#registerMarginalizationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Marginalization):Option[potential.Operations.Marginalization]", "kind" : "def"}, {"label" : "setMarginalizer", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Marginalizer.setMarginalizer", "link" : "potential\/ValueStore.html#setMarginalizer(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableMarginalizationOptions", "tail" : "(): Int", "member" : "potential.Marginalizer.availableMarginalizationOptions", "link" : "potential\/ValueStore.html#availableMarginalizationOptions:Int", "kind" : "def"}, {"label" : "marginalizationFunctions", "tail" : ": Map[OperatorType.OperatorType, Marginalization]", "member" : "potential.Marginalizer.marginalizationFunctions", "link" : "potential\/ValueStore.html#marginalizationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Marginalization]", "kind" : "val"}, {"label" : "marginalizationFunction", "tail" : ": Marginalization", "member" : "potential.Marginalizer.marginalizationFunction", "link" : "potential\/ValueStore.html#marginalizationFunction:potential.Operations.Marginalization", "kind" : "val"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/ValueStore.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/ValueStore.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/ValueStore.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/ValueStore.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/ValueStore.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/ValueStore.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/ValueStore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/ValueStore.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/ValueStore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/ValueStore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/ValueStore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/ValueStore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/ValueStore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueStore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueStore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueStore.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/ValueStore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/ValueStore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/ValueStore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/ValueStore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/ValueStore.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/ValueStore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/ValueStore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/ValueStore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/ValueStore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getMemorySize", "tail" : "(): Long", "member" : "potential.ValueStore.getMemorySize", "link" : "potential\/ValueStore.html#getMemorySize:Long", "kind" : "abstract def"}, {"label" : "getSize", "tail" : "(): (Long, Long, Long)", "member" : "potential.ValueStore.getSize", "link" : "potential\/ValueStore.html#getSize:(Long,Long,Long)", "kind" : "abstract def"}, {"label" : "getIndicesForValue", "tail" : "(value: Double): List[Long]", "member" : "potential.ValueStore.getIndicesForValue", "link" : "potential\/ValueStore.html#getIndicesForValue(value:Double):List[Long]", "kind" : "abstract def"}, {"label" : "getDifferentValues", "tail" : "(): List[Double]", "member" : "potential.ValueStore.getDifferentValues", "link" : "potential\/ValueStore.html#getDifferentValues:List[Double]", "kind" : "abstract def"}, {"label" : "getListValues", "tail" : "(): List[Double]", "member" : "potential.ValueStore.getListValues", "link" : "potential\/ValueStore.html#getListValues:List[Double]", "kind" : "abstract def"}, {"label" : "getValue", "tail" : "(index: Long): Double", "member" : "potential.ValueStore.getValue", "link" : "potential\/ValueStore.html#getValue(index:Long):Double", "kind" : "abstract def"}, {"label" : "variables", "tail" : ": VariableSet", "member" : "potential.ValueStore.variables", "link" : "potential\/ValueStore.html#variables:base.VariableSet", "kind" : "abstract val"}], "shortDescription" : "Trait defining the operations to be implemented in ValueStoreobjects", "object" : "potential\/ValueStore$.html", "members_object" : [{"label" : "combineValues", "tail" : "(valst1: ValueStore, valst2: ValueStore, triplet: (Double, Double, Double)): Array[Long]", "member" : "potential.ValueStore.combineValues", "link" : "potential\/ValueStore$.html#combineValues(valst1:potential.ValueStore,valst2:potential.ValueStore,triplet:(Double,Double,Double)):Array[Long]", "kind" : "def"}, {"label" : "combineIndices", "tail" : "(valst1: ValueStore, valst2: ValueStore, entry: (Double, List[(Double, Double, Double)])): (Double, ArrayBuffer[Long])", "member" : "potential.ValueStore.combineIndices", "link" : "potential\/ValueStore$.html#combineIndices(valst1:potential.ValueStore,valst2:potential.ValueStore,entry:(Double,List[(Double,Double,Double)])):(Double,scala.collection.mutable.ArrayBuffer[Long])", "kind" : "def"}, {"label" : "createStore", "tail" : "(store: ValueStore, values: List[Double]): ValueStore", "member" : "potential.ValueStore.createStore", "link" : "potential\/ValueStore$.html#createStore(store:potential.ValueStore,values:List[Double]):potential.ValueStore", "kind" : "def"}, {"label" : "marginalizationType", "tail" : ": OperatorType.OperatorType", "member" : "potential.ValueStore.marginalizationType", "link" : "potential\/ValueStore$.html#marginalizationType:potential.OperatorType.OperatorType", "kind" : "var"}, {"label" : "combinationType", "tail" : ": OperatorType.OperatorType", "member" : "potential.ValueStore.combinationType", "link" : "potential\/ValueStore$.html#combinationType:potential.OperatorType.OperatorType", "kind" : "var"}, {"label" : "combineDefault", "tail" : "(valst1: ValueStore, valst2: ValueStore): ValueStore", "member" : "potential.Combiner.combineDefault", "link" : "potential\/ValueStore$.html#combineDefault(valst1:potential.ValueStore,valst2:potential.ValueStore):potential.ValueStore", "kind" : "def"}, {"label" : "registerCombinationFunction", "tail" : "(opType: OperatorType.OperatorType, newFunction: Combination): Option[Combination]", "member" : "potential.Combiner.registerCombinationFunction", "link" : "potential\/ValueStore$.html#registerCombinationFunction(opType:potential.OperatorType.OperatorType,newFunction:potential.Operations.Combination):Option[potential.Operations.Combination]", "kind" : "def"}, {"label" : "setCombiner", "tail" : "(opType: OperatorType.OperatorType): Unit", "member" : "potential.Combiner.setCombiner", "link" : "potential\/ValueStore$.html#setCombiner(opType:potential.OperatorType.OperatorType):Unit", "kind" : "def"}, {"label" : "availableCombinationFunctions", "tail" : "(): Int", "member" : "potential.Combiner.availableCombinationFunctions", "link" : "potential\/ValueStore$.html#availableCombinationFunctions:Int", "kind" : "def"}, {"label" : "combinationFunctions", "tail" : ": Map[OperatorType.OperatorType, Combination]", "member" : "potential.Combiner.combinationFunctions", "link" : "potential\/ValueStore$.html#combinationFunctions:scala.collection.mutable.Map[potential.OperatorType.OperatorType,potential.Operations.Combination]", "kind" : "val"}, {"label" : "combinationFunction", "tail" : ": Combination", "member" : "potential.Combiner.combinationFunction", "link" : "potential\/ValueStore$.html#combinationFunction:potential.Operations.Combination", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/ValueStore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/ValueStore$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/ValueStore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/ValueStore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/ValueStore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/ValueStore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/ValueStore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueStore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueStore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueStore$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/ValueStore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/ValueStore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/ValueStore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/ValueStore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/ValueStore$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/ValueStore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/ValueStore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/ValueStore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/ValueStore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "potential\/ValueStore.html", "kind" : "trait"}, {"name" : "potential.ValueStoreTypes", "shortDescription" : "Enumeration for the kinds of trees to manage", "object" : "potential\/ValueStoreTypes$.html", "members_object" : [{"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "potential\/ValueStoreTypes$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "potential\/ValueStoreTypes$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "potential\/ValueStoreTypes$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "IDMMUT", "tail" : ": Value", "member" : "potential.ValueStoreTypes.IDMMUT", "link" : "potential\/ValueStoreTypes$.html#IDMMUT:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "IDSETIMMUT", "tail" : ": Value", "member" : "potential.ValueStoreTypes.IDSETIMMUT", "link" : "potential\/ValueStoreTypes$.html#IDSETIMMUT:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "IDSETMUT", "tail" : ": Value", "member" : "potential.ValueStoreTypes.IDSETMUT", "link" : "potential\/ValueStoreTypes$.html#IDSETMUT:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "IDPIMMUT", "tail" : ": Value", "member" : "potential.ValueStoreTypes.IDPIMMUT", "link" : "potential\/ValueStoreTypes$.html#IDPIMMUT:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "IDPMUT", "tail" : ": Value", "member" : "potential.ValueStoreTypes.IDPMUT", "link" : "potential\/ValueStoreTypes$.html#IDPMUT:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "VDISETIMMUT", "tail" : ": Value", "member" : "potential.ValueStoreTypes.VDISETIMMUT", "link" : "potential\/ValueStoreTypes$.html#VDISETIMMUT:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "VDISETMUT", "tail" : ": Value", "member" : "potential.ValueStoreTypes.VDISETMUT", "link" : "potential\/ValueStoreTypes$.html#VDISETMUT:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "VDILISTIMMUT", "tail" : ": Value", "member" : "potential.ValueStoreTypes.VDILISTIMMUT", "link" : "potential\/ValueStoreTypes$.html#VDILISTIMMUT:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "VDILISTMUT", "tail" : ": Value", "member" : "potential.ValueStoreTypes.VDILISTMUT", "link" : "potential\/ValueStoreTypes$.html#VDILISTMUT:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "VDGLIST", "tail" : ": Value", "member" : "potential.ValueStoreTypes.VDGLIST", "link" : "potential\/ValueStoreTypes$.html#VDGLIST:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "VDGSET", "tail" : ": Value", "member" : "potential.ValueStoreTypes.VDGSET", "link" : "potential\/ValueStoreTypes$.html#VDGSET:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "PRUNEDTREE", "tail" : ": Value", "member" : "potential.ValueStoreTypes.PRUNEDTREE", "link" : "potential\/ValueStoreTypes$.html#PRUNEDTREE:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "TREE", "tail" : ": Value", "member" : "potential.ValueStoreTypes.TREE", "link" : "potential\/ValueStoreTypes$.html#TREE:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "TABLE", "tail" : ": Value", "member" : "potential.ValueStoreTypes.TABLE", "link" : "potential\/ValueStoreTypes$.html#TABLE:potential.ValueStoreTypes.Value", "kind" : "val"}, {"label" : "ValueStoreType", "tail" : "", "member" : "potential.ValueStoreTypes.ValueStoreType", "link" : "potential\/ValueStoreTypes$.html#ValueStoreType=potential.ValueStoreTypes.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/ValueStoreTypes$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/ValueStoreTypes$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/ValueStoreTypes$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "potential\/ValueStoreTypes$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "potential\/ValueStoreTypes$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "potential\/ValueStoreTypes$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "potential\/ValueStoreTypes$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "potential\/ValueStoreTypes$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "potential\/ValueStoreTypes$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "potential\/ValueStoreTypes$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "potential\/ValueStoreTypes$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "potential\/ValueStoreTypes$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/ValueStoreTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/ValueStoreTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/ValueStoreTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/ValueStoreTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/ValueStoreTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/ValueStoreTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/ValueStoreTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueStoreTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueStoreTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ValueStoreTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/ValueStoreTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/ValueStoreTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/ValueStoreTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/ValueStoreTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/ValueStoreTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/ValueStoreTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/ValueStoreTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/ValueStoreTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "potential.ZeroDefaultValueComputer", "shortDescription" : "Default value treatment using 0 as default value withoutfurther analysis of the sequence of values", "members_class" : [{"label" : "getType", "tail" : "(): DefaultValueComputerType.Value", "member" : "potential.ZeroDefaultValueComputer.getType", "link" : "potential\/ZeroDefaultValueComputer.html#getType:potential.DefaultValueComputerType.Value", "kind" : "def"}, {"label" : "computeDefaultValue", "tail" : "(values: Seq[Double]): Double", "member" : "potential.ZeroDefaultValueComputer.computeDefaultValue", "link" : "potential\/ZeroDefaultValueComputer.html#computeDefaultValue(values:Seq[Double]):Double", "kind" : "def"}, {"label" : "defaultValue", "tail" : ": Double", "member" : "potential.ZeroDefaultValueComputer.defaultValue", "link" : "potential\/ZeroDefaultValueComputer.html#defaultValue:Double", "kind" : "var"}, {"member" : "potential.ZeroDefaultValueComputer#<init>", "error" : "unsupported entity"}, {"label" : "getDefaultValue", "tail" : "(): Double", "member" : "potential.DefaultValueComputer.getDefaultValue", "link" : "potential\/ZeroDefaultValueComputer.html#getDefaultValue:Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "potential\/ZeroDefaultValueComputer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "potential\/ZeroDefaultValueComputer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "potential\/ZeroDefaultValueComputer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "potential\/ZeroDefaultValueComputer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "potential\/ZeroDefaultValueComputer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "potential\/ZeroDefaultValueComputer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "potential\/ZeroDefaultValueComputer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ZeroDefaultValueComputer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ZeroDefaultValueComputer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "potential\/ZeroDefaultValueComputer.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "potential\/ZeroDefaultValueComputer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "potential\/ZeroDefaultValueComputer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "potential\/ZeroDefaultValueComputer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "potential\/ZeroDefaultValueComputer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "potential\/ZeroDefaultValueComputer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "potential\/ZeroDefaultValueComputer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "potential\/ZeroDefaultValueComputer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "potential\/ZeroDefaultValueComputer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "potential\/ZeroDefaultValueComputer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "potential\/ZeroDefaultValueComputer.html", "kind" : "class"}], "access" : [{"name" : "access.IndexAccessTest", "shortDescription" : "", "members_class" : [{"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "access\/IndexAccessTest.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "access\/IndexAccessTest.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "access\/IndexAccessTest.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "access\/IndexAccessTest.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "converted", "tail" : ": List[Potential]", "member" : "access.IndexAccessTest.converted", "link" : "access\/IndexAccessTest.html#converted:List[potential.Potential]", "kind" : "val"}, {"label" : "pot", "tail" : ": Potential", "member" : "access.IndexAccessTest.pot", "link" : "access\/IndexAccessTest.html#pot:potential.Potential", "kind" : "val"}, {"label" : "bnet", "tail" : ": Bnet", "member" : "access.IndexAccessTest.bnet", "link" : "access\/IndexAccessTest.html#bnet:bnet.Bnet", "kind" : "val"}, {"label" : "representations", "tail" : ": List[potential.ValueStoreTypes.Value]", "member" : "access.IndexAccessTest.representations", "link" : "access\/IndexAccessTest.html#representations:List[potential.ValueStoreTypes.Value]", "kind" : "val"}, {"member" : "access.IndexAccessTest#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.FunSuite.toString", "link" : "access\/IndexAccessTest.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.FunSuiteLike.testDataFor", "link" : "access\/IndexAccessTest.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.FunSuiteLike.styleName", "link" : "access\/IndexAccessTest.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.FunSuiteLike.testsFor", "link" : "access\/IndexAccessTest.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.run", "link" : "access\/IndexAccessTest.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTests", "link" : "access\/IndexAccessTest.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.FunSuiteLike.tags", "link" : "access\/IndexAccessTest.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.FunSuiteLike.runTest", "link" : "access\/IndexAccessTest.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.FunSuiteLike.testNames", "link" : "access\/IndexAccessTest.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.ignore", "link" : "access\/IndexAccessTest.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.test", "link" : "access\/IndexAccessTest.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerIgnoredTest", "link" : "access\/IndexAccessTest.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.FunSuiteLike.registerTest", "link" : "access\/IndexAccessTest.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.FunSuiteLike.markup", "link" : "access\/IndexAccessTest.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.FunSuiteLike.alert", "link" : "access\/IndexAccessTest.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.FunSuiteLike.note", "link" : "access\/IndexAccessTest.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.FunSuiteLike.info", "link" : "access\/IndexAccessTest.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "access\/IndexAccessTest.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "access\/IndexAccessTest.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "access\/IndexAccessTest.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "access\/IndexAccessTest.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "access\/IndexAccessTest.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "access\/IndexAccessTest.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "access\/IndexAccessTest.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "access\/IndexAccessTest.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "access\/IndexAccessTest.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "access\/IndexAccessTest.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "access\/IndexAccessTest.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "access\/IndexAccessTest.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "access\/IndexAccessTest.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "access\/IndexAccessTest.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "access\/IndexAccessTest.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "access\/IndexAccessTest.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "access\/IndexAccessTest.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "access\/IndexAccessTest.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "access\/IndexAccessTest.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "access\/IndexAccessTest.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "access\/IndexAccessTest.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "access\/IndexAccessTest.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "access\/IndexAccessTest.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: ⇒ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "access\/IndexAccessTest.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "access\/IndexAccessTest.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "access\/IndexAccessTest.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "access\/IndexAccessTest.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "access\/IndexAccessTest.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "access\/IndexAccessTest.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "access\/IndexAccessTest.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "access\/IndexAccessTest.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "access\/IndexAccessTest.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "access\/IndexAccessTest.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "access\/IndexAccessTest.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "access\/IndexAccessTest.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "access\/IndexAccessTest.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "access\/IndexAccessTest.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "access\/IndexAccessTest.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "access\/IndexAccessTest.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "access\/IndexAccessTest.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "access\/IndexAccessTest.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "access\/IndexAccessTest.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "access\/IndexAccessTest.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "access\/IndexAccessTest.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "access\/IndexAccessTest.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "access\/IndexAccessTest.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "access\/IndexAccessTest.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "access\/IndexAccessTest.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "access\/IndexAccessTest.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "access\/IndexAccessTest.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "access\/IndexAccessTest.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "access\/IndexAccessTest.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "access\/IndexAccessTest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "access\/IndexAccessTest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "access\/IndexAccessTest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "access\/IndexAccessTest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "access\/IndexAccessTest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "access\/IndexAccessTest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "access\/IndexAccessTest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "access\/IndexAccessTest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "access\/IndexAccessTest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "access\/IndexAccessTest.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "access\/IndexAccessTest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "access\/IndexAccessTest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "access\/IndexAccessTest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "access\/IndexAccessTest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "access\/IndexAccessTest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "access\/IndexAccessTest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "access\/IndexAccessTest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "access\/IndexAccessTest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "access\/IndexAccessTest.html", "kind" : "class"}]};